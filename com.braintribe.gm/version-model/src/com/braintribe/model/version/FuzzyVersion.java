// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
// 
// This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License along with this library; See http://www.gnu.org/licenses/.
// ============================================================================
package com.braintribe.model.version;

import com.braintribe.model.generic.reflection.EntityType;
import com.braintribe.model.generic.reflection.EntityTypes;

/**
 * a {@link FuzzyVersion} is a special version that is only fixed on major/minor and turns into an 
 * autogenerated hotfix range (lower bound = major.minor, upper bound = mainger.minor+1 
 * 
 * @author pit/dirk
 *
 */
public interface FuzzyVersion extends HasMajorMinorRevision, VersionInterval {
	
	EntityType<FuzzyVersion> T = EntityTypes.T(FuzzyVersion.class);
	
	
	static FuzzyVersion create(int major, int minor, int revision) {
		FuzzyVersion fv = FuzzyVersion.T.create();
		fv.setMajor(major);
		fv.setMinor(minor);
		fv.setRevision(revision);
		return fv;
	}
	
	static FuzzyVersion create(int major, int minor) {
		FuzzyVersion fv = FuzzyVersion.T.create();
		fv.setMajor(major);
		fv.setMinor(minor);
		return fv;
	}
	
	static FuzzyVersion create(int major) {
		FuzzyVersion fv = FuzzyVersion.T.create();
		fv.setMajor(major);
		return fv;
	}
	
	/**
	 * derives and instantiates a {@link FuzzyVersion} from a {@link HasMajorMinor}
	 * @param v - the {@link HasMajorMinor} - anything that can provide these
	 * @return - a fresh {@link FuzzyVersion}
	 */
	static FuzzyVersion from( HasMajorMinor v) {
		FuzzyVersion fv = FuzzyVersion.T.create();
		fv.setMajor( v.getMajor());
		fv.setMinor( v.getMinor());
		
		return fv;
	}
	
	/**
	 * derives and instantiates a {@link FuzzyVersion} from a {@link HasMajorMinorRevision}
	 * @param v - the {@link HasMajorMinorRevision} - anything that can provide these
	 * @return - a fresh {@link FuzzyVersion}
	 */
	static FuzzyVersion fromMajorMinorRevision(HasMajorMinorRevision v) {
		FuzzyVersion fv = FuzzyVersion.T.create();
		fv.setMajor( v.getMajor());
		fv.setMinor( v.getMinor());
		fv.setRevision( v.getRevision());
		
		return fv;
	}
	
	@Override
	default Version lowerBound() {
		return Version.from( this);
	}
	@Override
	default boolean lowerBoundExclusive() {
		return false;
	}
	
	@Override
	default Version upperBound() {
		return successor(Version.T::createRaw);
	}
	
	@Override
	default boolean upperBoundExclusive() {		
		return true;
	}

	@Override
	default boolean matches(Version version) {
		return (
				lowerBound().compareTo(version) <= 0 &&
				upperBound().compareTo( version) > 0
				);
	}
	
	default String asString() {
		return "[" + lowerBound().asString() + "," + upperBound().asString() + ")";
	}
	
	default String asShortNotation() {
		StringBuilder builder = new StringBuilder();
		int precision = continuousPrecision();
	
		for (int i = 0; i <= precision; i++) {
			if (i > 0)
				builder.append('.');
			builder.append(readNumericField(i));
		}
		
		builder.append('~');
		
		return builder.toString();
	}
		
}


