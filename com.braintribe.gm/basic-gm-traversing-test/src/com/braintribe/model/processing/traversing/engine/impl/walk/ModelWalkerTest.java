// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
// 
// This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License along with this library; See http://www.gnu.org/licenses/.
// ============================================================================
package com.braintribe.model.processing.traversing.engine.impl.walk;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;

import com.braintribe.model.generic.GenericEntity;
import com.braintribe.model.processing.traversing.api.GmTraversingContext;
import com.braintribe.model.processing.traversing.api.GmTraversingVisitor;
import com.braintribe.model.processing.traversing.api.path.TraversingModelPathElement;
import com.braintribe.model.processing.traversing.engine.GMT;
import com.braintribe.model.processing.traversing.engine.impl.misc.model.BinaryTreeNode;
import com.braintribe.model.processing.traversing.impl.visitors.ValueTypeOrientedVisitor;

/**
 * Tests for {@link ModelWalker}
 * 
 */
public class ModelWalkerTest {

	// init variable that will hold all the visited nodes in order
	private List<String> visitedNodes = new ArrayList<String>();
	// create a visitor that will keep track of visiting order
	private final GmTraversingVisitor trackingVisitor = new ValueTypeOrientedVisitor() {

		@Override
		protected void onEntityEnter(GmTraversingContext context, GenericEntity entity, TraversingModelPathElement pathElement) {
			BinaryTreeNode node = (BinaryTreeNode) pathElement.getValue();
			visitedNodes.add("Enter " + node.getName());
		}

		@Override
		protected void onEntityLeave(GmTraversingContext context, GenericEntity entity, TraversingModelPathElement pathElement) {
			BinaryTreeNode node = (BinaryTreeNode) pathElement.getValue();
			visitedNodes.add("Leave " + node.getName());
		}
	};

	/**
	 * Validate that breadth first traversing is correct for the {@link ModelWalker}. The data is generated by
	 * {@link #getAssembly()} and validated against {@link #getBreadthFirstEvents()}
	 */
	@Test
	public void testBreadthFirst() throws Exception {

		visitedNodes = new ArrayList<String>();
		// traverse
		GMT.traverse().visitor(trackingVisitor).breadthFirstWalk().doFor(getAssembly());

		assertThat(visitedNodes).isEqualTo(getBreadthFirstEvents());
	}

	/**
	 * Validate that depth first traversing is correct for the {@link ModelWalker}. The data is generated by
	 * {@link #getAssembly()} and validated against {@link #getDepthFirstEvents()}
	 */
	@Test
	public void testDepthFirst() throws Exception {

		visitedNodes = new ArrayList<String>();
		// traverse
		GMT.traverse().visitor(trackingVisitor).doFor(getAssembly());

		assertThat(visitedNodes).isEqualTo(getDepthFirstEvents());
	}

	/**
	 * Validate that breadth first cycle traversing is correct for the {@link ModelWalker}. The data is generated by
	 * {@link #getCycleAssembly()} and validated against {@link #getCycleBreadthFirstEvents()}
	 */
	@Test
	public void testCycleBreadthFirst() throws Exception {
		visitedNodes = new ArrayList<String>();
		// traverse
		GMT.traverse().visitor(trackingVisitor).breadthFirstWalk().doFor(getCycleAssembly());

		assertThat(visitedNodes).isEqualTo(getCycleBreadthFirstEvents());
	}

	/**
	 * Validate that depth first traversing is correct for the {@link ModelWalker}. The data is generated by
	 * {@link #getCycleAssembly()} and validated against {@link #getCycleDepthFirstEvents()}
	 */
	@Test
	public void testCycleDepthFirst() throws Exception {
		visitedNodes = new ArrayList<String>();
		// traverse
		GMT.traverse().visitor(trackingVisitor).doFor(getCycleAssembly());

		assertThat(visitedNodes).isEqualTo(getCycleDepthFirstEvents());
	}

	// TODO refactor the package and maybe this part
	/**
	 * @return Sample data used for traversing tests
	 */
	private static Object getAssembly() {
		BinaryTreeNode a1 = BinaryTreeNode.T.create();
		BinaryTreeNode b1 = BinaryTreeNode.T.create();
		BinaryTreeNode b2 = BinaryTreeNode.T.create();
		BinaryTreeNode c1 = BinaryTreeNode.T.create();
		BinaryTreeNode c2 = BinaryTreeNode.T.create();
		BinaryTreeNode c3 = BinaryTreeNode.T.create();
		BinaryTreeNode c4 = BinaryTreeNode.T.create();

		a1.setName("a1");
		b1.setName("b1");
		b2.setName("b2");
		c1.setName("c1");
		c2.setName("c2");
		c3.setName("c3");
		c4.setName("c4");

		a1.setLeft(b1);
		a1.setRight(b2);
		b1.setLeft(c1);
		b1.setRight(c2);
		b2.setLeft(c3);
		b2.setRight(c4);

		return a1;
	}

	/**
	 * @return Sample data used for cycle traversing tests
	 */
	protected Object getCycleAssembly() {
		BinaryTreeNode a1 = BinaryTreeNode.T.create();
		BinaryTreeNode b1 = BinaryTreeNode.T.create();

		a1.setName("a1");
		b1.setName("b1");

		a1.setLeft(b1);
		b1.setRight(a1);

		return a1;
	}

	/**
	 * @return expected enter and leave events for a breadth first traversing of {@link ModelWalkerTest#getAssembly()}
	 */
	private static List<String> getBreadthFirstEvents() {

		final List<String> breadthFirstNodes = new ArrayList<String>();

		breadthFirstNodes.add("Enter a1");
		breadthFirstNodes.add("Leave a1");
		breadthFirstNodes.add("Enter b1");
		breadthFirstNodes.add("Enter b2");
		breadthFirstNodes.add("Leave b2");
		breadthFirstNodes.add("Leave b1");
		breadthFirstNodes.add("Enter c1");
		breadthFirstNodes.add("Enter c2");
		breadthFirstNodes.add("Enter c3");
		breadthFirstNodes.add("Enter c4");
		breadthFirstNodes.add("Leave c4");
		breadthFirstNodes.add("Leave c3");
		breadthFirstNodes.add("Leave c2");
		breadthFirstNodes.add("Leave c1");

		return breadthFirstNodes;
	}

	/**
	 * @return expected enter and leave events for a breadth first cycle traversing of
	 *         {@link ModelWalkerTest#getCycleAssembly()}
	 */
	private static List<String> getCycleBreadthFirstEvents() {

		final List<String> breadthFirstNodes = new ArrayList<String>();

		breadthFirstNodes.add("Enter a1");
		breadthFirstNodes.add("Leave a1");
		breadthFirstNodes.add("Enter b1");
		breadthFirstNodes.add("Leave b1");
		breadthFirstNodes.add("Enter a1");
		breadthFirstNodes.add("Leave a1");

		return breadthFirstNodes;
	}

	/**
	 * @return expected enter and leave events for a depth first traversing of {@link ModelWalkerTest#getAssembly()}
	 */
	private static List<String> getDepthFirstEvents() {

		final List<String> depthFirstNodes = new ArrayList<String>();

		depthFirstNodes.add("Enter a1");
		depthFirstNodes.add("Enter b1");
		depthFirstNodes.add("Enter c1");
		depthFirstNodes.add("Leave c1");
		depthFirstNodes.add("Enter c2");
		depthFirstNodes.add("Leave c2");
		depthFirstNodes.add("Leave b1");
		depthFirstNodes.add("Enter b2");
		depthFirstNodes.add("Enter c3");
		depthFirstNodes.add("Leave c3");
		depthFirstNodes.add("Enter c4");
		depthFirstNodes.add("Leave c4");
		depthFirstNodes.add("Leave b2");
		depthFirstNodes.add("Leave a1");

		return depthFirstNodes;
	}

	/**
	 * @return expected enter and leave events for a depth first traversing of
	 *         {@link ModelWalkerTest#getCycleAssembly()}
	 */
	private static List<String> getCycleDepthFirstEvents() {

		final List<String> depthFirstNodes = new ArrayList<String>();

		depthFirstNodes.add("Enter a1");
		depthFirstNodes.add("Enter b1");
		depthFirstNodes.add("Enter a1");
		depthFirstNodes.add("Leave a1");
		depthFirstNodes.add("Leave b1");
		depthFirstNodes.add("Leave a1");

		return depthFirstNodes;
	}

	// TODO check if needed
	/* @Test public void testReachability() throws Exception { TypeA typeA = new TypeA(); typeA.setEnumA(EnumA.one);
	 * TypeB typeB = new TypeB(); typeB.setName("egal");
	 * 
	 * List<Object> list = new ArrayList<Object>(); list.add(typeA); list.add(typeB);
	 * System.out.println("reachability:"); System.out.println("-----------------"); GmTraversingVisitor visitor = new
	 * GmTraversingVisitorAdapter() { public void onElementEnter(GmTraversingContext context, TraversingModelPathElement
	 * pathElement) throws GmTraversingException { System.out.println(pathElement.getType()); } };
	 * GMT.traverse().visitor(visitor).doFor(list); System.out.println("-----------------"); } */

}
