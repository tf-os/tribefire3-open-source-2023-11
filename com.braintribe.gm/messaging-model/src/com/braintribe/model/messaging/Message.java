// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
// 
// This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License along with this library; See http://www.gnu.org/licenses/.
// ============================================================================
package com.braintribe.model.messaging;

import java.util.Map;

import com.braintribe.model.generic.GenericEntity;
import com.braintribe.model.generic.reflection.EntityType;
import com.braintribe.model.generic.reflection.EntityTypes;

public interface Message extends GenericEntity {

	EntityType<Message> T = EntityTypes.T(Message.class);

	/**
	 * <p>
	 * Gets the message id as generated by the messaging implementation.
	 * 
	 * <p>
	 * Messaging providers must ensure that a value is available through this method after the send method was called in
	 * the message producer.
	 * <p>
	 * To be used by messaging providers, any value set by clients before the send method is called in the message
	 * producer is expected to be ignored and overwritten.
	 * 
	 * @return The message id
	 */
	String getMessageId();
	void setMessageId(String id);

	/**
	 * <p>
	 * Gets the message destination.
	 * 
	 * <p>
	 * Messaging providers must ensure that the targeted destination is available to clients through this method after
	 * the send method was called in the message producer.
	 * 
	 * <p>
	 * To be used by messaging providers, any value set by clients before the send method is called in the message
	 * producer is expected to be ignored and overwritten.
	 * 
	 * <p>
	 * Clients must specify the destination in the producer, and not at message level through this method.
	 * 
	 * @return The destination of this message.
	 */
	Destination getDestination();
	void setDestination(Destination destination);

	/**
	 * <p>
	 * Gets the reply-to message destination
	 * 
	 * <p>
	 * Can be used by clients (consumers) to address a reply message. The existence of a reply-to message destination
	 * hints that a reply message is expected, but not mandatory.
	 * 
	 * <p>
	 * Clients can use {@link #getCorrelationId()}/{@link #setCorrelationId(String)} to match a sent message with a
	 * reply.
	 */
	Destination getReplyTo();
	void setReplyTo(Destination replyTo);

	Map<String, Object> getHeaders();
	void setHeaders(Map<String, Object> headers);

	Map<String, Object> getProperties();
	void setProperties(Map<String, Object> properties);

	/**
	 * <p>
	 * Gets the message priority, as actually handled by the messaging provider.
	 * 
	 * <p>
	 * To be used by clients to determine the priority of a message
	 * 
	 * <p>
	 * Being {@code 0} the lowest priority, {@code 9} the highest.
	 * 
	 * <p>
	 * May be a default value set by the messaging provider if no priority was given by the producer client through
	 * {@link #setPriority(Integer)}.
	 * 
	 * <p>
	 * May be a converted value set by the messaging provider, if the priority given by the producer client through
	 * {@link #setPriority(Integer)} did not match the expected range.
	 */
	Integer getPriority();
	void setPriority(Integer priority);

	/**
	 * <p>
	 * Clients can use this to correlate outgoing with incoming messages.
	 * 
	 * <p>
	 * Messaging providers shall not manipulate this value in any way, thus consumer clients are safe to consider the
	 * correlation id to be exactly as it was set by the producer client.
	 */
	String getCorrelationId();
	void setCorrelationId(String correlationId);

	/**
	 * <p>
	 * Whether this message is persistent, as it was set by the producer client through {@link #setPersistent(boolean)}.
	 * 
	 * <p>
	 * Messaging providers may attempt to persist the message to disk or database if this flag is enabled.
	 * 
	 * <p>
	 * By marking messages as persistent, it is more likely that they will survive a messaging server restart, although
	 * it provides no guarantee that the message won't be lost.
	 * 
	 * @return {@code true} if this message is persistent, {@code false} otherwise.
	 */
	boolean getPersistent();
	void setPersistent(boolean isPersistent);

	/**
	 * <p>
	 * Message expiration time, as determined by messaging providers after the message is sent.
	 * 
	 * <p>
	 * Measured in milliseconds since midnight, January 1, 1970 UTC, it defines until when the message will be retained
	 * in the messaging system if not immediately delivered to known consumers.
	 * 
	 * <p>
	 * {@code 0} means the message will never expire.
	 * 
	 * @return The message expiration time
	 */
	Long getExpiration();
	void setExpiration(Long expiration);

	/**
	 * <p>
	 * Message time to live, in milliseconds.
	 * 
	 * <p>
	 * The time to live determines for how long (milliseconds) the message will be retained by the messaging system, if
	 * not immediately delivered to known consumers.
	 * 
	 * <p>
	 * Unlike the message expiration, the time to live can be set by clients, either at message level by this method or
	 * at message producer level.
	 * 
	 * <p>
	 * If time to live is provided, messaging providers will calculate the message expiration based on it.
	 * 
	 * <p>
	 * If {@code null}, {@code 0} or less is given, the message expiration will be {@code 0}, which means it will be
	 * retained indefinitely, until it is consumed.
	 */
	Long getTimeToLive();
	void setTimeToLive(Long timeToLive);

	/**
	 * <p>
	 * message body.
	 * <p>
	 * Can be any value compatible with the serialization used by the messaging provider.
	 */
	Object getBody();
	void setBody(Object body);

}
