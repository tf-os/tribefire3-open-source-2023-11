// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
// 
// This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License along with this library; See http://www.gnu.org/licenses/.
// ============================================================================
package com.braintribe.model.processing.manipulation.parser.impl.autogenerated;

import java.util.List;

import org.antlr.v4.runtime.NoViableAltException;
import org.antlr.v4.runtime.Parser;
import org.antlr.v4.runtime.ParserRuleContext;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.RuntimeMetaData;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.Vocabulary;
import org.antlr.v4.runtime.VocabularyImpl;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.ParserATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.tree.ParseTreeListener;
import org.antlr.v4.runtime.tree.TerminalNode;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class GmmlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.5", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		Boolean=1, Null=2, Colon=3, Colon_Colon=4, EQ=5, PLUS=6, MINUS=7, MINUS_MINUS=8, 
		LB=9, RB=10, LSB=11, RSB=12, LCB=13, RCB=14, COMMA=15, Dot=16, EXCLAMATION=17, 
		StandardIdentifier=18, DateFunction=19, DateOffset=20, TimeZoneOffset=21, 
		DecimalLiteral=22, FloatLiteral=23, DoubleLiteral=24, LongBase10Literal=25, 
		LongBase16Literal=26, IntegerBase10Literal=27, IntegerBase16Literal=28, 
		StringOpen=29, WS=30, Comment=31, LineComment=32, ANY=33, UnicodeEscape=34, 
		EscB=35, EscT=36, EscN=37, EscF=38, EscR=39, EscSQ=40, EscBS=41, PlainContent=42, 
		StringClose=43;
	public static final int
		RULE_blockSequence = 0, RULE_block = 1, RULE_manipulationBlocks = 2, RULE_manipulationBlock = 3, 
		RULE_statement = 4, RULE_variableStatement = 5, RULE_listElement = 6, 
		RULE_setElement = 7, RULE_listValue = 8, RULE_setValue = 9, RULE_mapEntry = 10, 
		RULE_mapValue = 11, RULE_assignableValue = 12, RULE_collectionDeltaValue = 13, 
		RULE_singleDeltaValue = 14, RULE_listDeltaValue = 15, RULE_setDeltaValue = 16, 
		RULE_mapDeltaValue = 17, RULE_manipulation = 18, RULE_propertyManipulation = 19, 
		RULE_propertyOwner = 20, RULE_manipulationOperation = 21, RULE_changeValue = 22, 
		RULE_add = 23, RULE_remove = 24, RULE_clear = 25, RULE_deleteManipulation = 26, 
		RULE_customManipulation = 27, RULE_customInstance = 28, RULE_propertyEntry = 29, 
		RULE_variableAssignment = 30, RULE_variable = 31, RULE_fullyQualifiedIdentifier = 32, 
		RULE_variableValue = 33, RULE_qualifiedType = 34, RULE_value = 35, RULE_variableOrAssignmentValue = 36, 
		RULE_variableAssignmentValue = 37, RULE_enumValue = 38, RULE_literalValue = 39, 
		RULE_dateValue = 40, RULE_calendarOffsetValue = 41, RULE_dateOffset = 42, 
		RULE_timeZoneOffset = 43, RULE_stringValue = 44, RULE_escape = 45, RULE_plainContent = 46, 
		RULE_nullValue = 47, RULE_booleanValue = 48, RULE_decimalValue = 49, RULE_floatValue = 50, 
		RULE_doubleValue = 51, RULE_integerValue = 52, RULE_longValue = 53;
	public static final String[] ruleNames = {
		"blockSequence", "block", "manipulationBlocks", "manipulationBlock", "statement", 
		"variableStatement", "listElement", "setElement", "listValue", "setValue", 
		"mapEntry", "mapValue", "assignableValue", "collectionDeltaValue", "singleDeltaValue", 
		"listDeltaValue", "setDeltaValue", "mapDeltaValue", "manipulation", "propertyManipulation", 
		"propertyOwner", "manipulationOperation", "changeValue", "add", "remove", 
		"clear", "deleteManipulation", "customManipulation", "customInstance", 
		"propertyEntry", "variableAssignment", "variable", "fullyQualifiedIdentifier", 
		"variableValue", "qualifiedType", "value", "variableOrAssignmentValue", 
		"variableAssignmentValue", "enumValue", "literalValue", "dateValue", "calendarOffsetValue", 
		"dateOffset", "timeZoneOffset", "stringValue", "escape", "plainContent", 
		"nullValue", "booleanValue", "decimalValue", "floatValue", "doubleValue", 
		"integerValue", "longValue"
	};

	private static final String[] _LITERAL_NAMES = {
		null, null, "'null'", "':'", "'::'", "'='", "'+'", "'-'", "'--'", "'('", 
		"')'", "'['", "']'", "'{'", "'}'", "','", "'.'", "'!'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "Boolean", "Null", "Colon", "Colon_Colon", "EQ", "PLUS", "MINUS", 
		"MINUS_MINUS", "LB", "RB", "LSB", "RSB", "LCB", "RCB", "COMMA", "Dot", 
		"EXCLAMATION", "StandardIdentifier", "DateFunction", "DateOffset", "TimeZoneOffset", 
		"DecimalLiteral", "FloatLiteral", "DoubleLiteral", "LongBase10Literal", 
		"LongBase16Literal", "IntegerBase10Literal", "IntegerBase16Literal", "StringOpen", 
		"WS", "Comment", "LineComment", "ANY", "UnicodeEscape", "EscB", "EscT", 
		"EscN", "EscF", "EscR", "EscSQ", "EscBS", "PlainContent", "StringClose"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "GmmlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public GmmlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class BlockSequenceContext extends ParserRuleContext {
		public ManipulationBlocksContext manipulationBlocks() {
			return getRuleContext(ManipulationBlocksContext.class,0);
		}
		public TerminalNode EOF() { return getToken(GmmlParser.EOF, 0); }
		public BlockSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blockSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterBlockSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitBlockSequence(this);
		}
	}

	public final BlockSequenceContext blockSequence() throws RecognitionException {
		BlockSequenceContext _localctx = new BlockSequenceContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_blockSequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(108);
			manipulationBlocks();
			setState(109);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(GmmlParser.EOF, 0); }
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitBlock(this);
		}
	}

	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(114);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS) | (1L << Dot) | (1L << StandardIdentifier))) != 0)) {
				{
				{
				setState(111);
				statement();
				}
				}
				setState(116);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(117);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ManipulationBlocksContext extends ParserRuleContext {
		public List<ManipulationBlockContext> manipulationBlock() {
			return getRuleContexts(ManipulationBlockContext.class);
		}
		public ManipulationBlockContext manipulationBlock(int i) {
			return getRuleContext(ManipulationBlockContext.class,i);
		}
		public ManipulationBlocksContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_manipulationBlocks; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterManipulationBlocks(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitManipulationBlocks(this);
		}
	}

	public final ManipulationBlocksContext manipulationBlocks() throws RecognitionException {
		ManipulationBlocksContext _localctx = new ManipulationBlocksContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_manipulationBlocks);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(122);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==LCB) {
				{
				{
				setState(119);
				manipulationBlock();
				}
				}
				setState(124);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ManipulationBlockContext extends ParserRuleContext {
		public TerminalNode LCB() { return getToken(GmmlParser.LCB, 0); }
		public TerminalNode RCB() { return getToken(GmmlParser.RCB, 0); }
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public ManipulationBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_manipulationBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterManipulationBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitManipulationBlock(this);
		}
	}

	public final ManipulationBlockContext manipulationBlock() throws RecognitionException {
		ManipulationBlockContext _localctx = new ManipulationBlockContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_manipulationBlock);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(125);
			match(LCB);
			setState(129);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS) | (1L << Dot) | (1L << StandardIdentifier))) != 0)) {
				{
				{
				setState(126);
				statement();
				}
				}
				setState(131);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(132);
			match(RCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public VariableStatementContext variableStatement() {
			return getRuleContext(VariableStatementContext.class,0);
		}
		public ManipulationContext manipulation() {
			return getRuleContext(ManipulationContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitStatement(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_statement);
		try {
			setState(136);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(134);
				variableStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(135);
				manipulation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableStatementContext extends ParserRuleContext {
		public VariableAssignmentContext variableAssignment() {
			return getRuleContext(VariableAssignmentContext.class,0);
		}
		public VariableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterVariableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitVariableStatement(this);
		}
	}

	public final VariableStatementContext variableStatement() throws RecognitionException {
		VariableStatementContext _localctx = new VariableStatementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_variableStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(138);
			variableAssignment();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListElementContext extends ParserRuleContext {
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public ListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterListElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitListElement(this);
		}
	}

	public final ListElementContext listElement() throws RecognitionException {
		ListElementContext _localctx = new ListElementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_listElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(140);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetElementContext extends ParserRuleContext {
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public SetElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterSetElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitSetElement(this);
		}
	}

	public final SetElementContext setElement() throws RecognitionException {
		SetElementContext _localctx = new SetElementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_setElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(142);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListValueContext extends ParserRuleContext {
		public TerminalNode LSB() { return getToken(GmmlParser.LSB, 0); }
		public TerminalNode RSB() { return getToken(GmmlParser.RSB, 0); }
		public List<ListElementContext> listElement() {
			return getRuleContexts(ListElementContext.class);
		}
		public ListElementContext listElement(int i) {
			return getRuleContext(ListElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GmmlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GmmlParser.COMMA, i);
		}
		public ListValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterListValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitListValue(this);
		}
	}

	public final ListValueContext listValue() throws RecognitionException {
		ListValueContext _localctx = new ListValueContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_listValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(144);
			match(LSB);
			setState(153);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Boolean) | (1L << Null) | (1L << LB) | (1L << StandardIdentifier) | (1L << DateFunction) | (1L << DecimalLiteral) | (1L << FloatLiteral) | (1L << DoubleLiteral) | (1L << LongBase10Literal) | (1L << LongBase16Literal) | (1L << IntegerBase10Literal) | (1L << IntegerBase16Literal) | (1L << StringOpen))) != 0)) {
				{
				setState(145);
				listElement();
				setState(150);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(146);
					match(COMMA);
					setState(147);
					listElement();
					}
					}
					setState(152);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(155);
			match(RSB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetValueContext extends ParserRuleContext {
		public TerminalNode LB() { return getToken(GmmlParser.LB, 0); }
		public TerminalNode RB() { return getToken(GmmlParser.RB, 0); }
		public List<SetElementContext> setElement() {
			return getRuleContexts(SetElementContext.class);
		}
		public SetElementContext setElement(int i) {
			return getRuleContext(SetElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GmmlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GmmlParser.COMMA, i);
		}
		public SetValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterSetValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitSetValue(this);
		}
	}

	public final SetValueContext setValue() throws RecognitionException {
		SetValueContext _localctx = new SetValueContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_setValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(157);
			match(LB);
			setState(166);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Boolean) | (1L << Null) | (1L << LB) | (1L << StandardIdentifier) | (1L << DateFunction) | (1L << DecimalLiteral) | (1L << FloatLiteral) | (1L << DoubleLiteral) | (1L << LongBase10Literal) | (1L << LongBase16Literal) | (1L << IntegerBase10Literal) | (1L << IntegerBase16Literal) | (1L << StringOpen))) != 0)) {
				{
				setState(158);
				setElement();
				setState(163);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(159);
					match(COMMA);
					setState(160);
					setElement();
					}
					}
					setState(165);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(168);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MapEntryContext extends ParserRuleContext {
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode Colon() { return getToken(GmmlParser.Colon, 0); }
		public MapEntryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mapEntry; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterMapEntry(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitMapEntry(this);
		}
	}

	public final MapEntryContext mapEntry() throws RecognitionException {
		MapEntryContext _localctx = new MapEntryContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_mapEntry);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(170);
			value();
			setState(171);
			match(Colon);
			setState(172);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MapValueContext extends ParserRuleContext {
		public TerminalNode LCB() { return getToken(GmmlParser.LCB, 0); }
		public TerminalNode RCB() { return getToken(GmmlParser.RCB, 0); }
		public List<MapEntryContext> mapEntry() {
			return getRuleContexts(MapEntryContext.class);
		}
		public MapEntryContext mapEntry(int i) {
			return getRuleContext(MapEntryContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GmmlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GmmlParser.COMMA, i);
		}
		public MapValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mapValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterMapValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitMapValue(this);
		}
	}

	public final MapValueContext mapValue() throws RecognitionException {
		MapValueContext _localctx = new MapValueContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_mapValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(174);
			match(LCB);
			setState(183);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Boolean) | (1L << Null) | (1L << LB) | (1L << StandardIdentifier) | (1L << DateFunction) | (1L << DecimalLiteral) | (1L << FloatLiteral) | (1L << DoubleLiteral) | (1L << LongBase10Literal) | (1L << LongBase16Literal) | (1L << IntegerBase10Literal) | (1L << IntegerBase16Literal) | (1L << StringOpen))) != 0)) {
				{
				setState(175);
				mapEntry();
				setState(180);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(176);
					match(COMMA);
					setState(177);
					mapEntry();
					}
					}
					setState(182);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(185);
			match(RCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignableValueContext extends ParserRuleContext {
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public ListValueContext listValue() {
			return getRuleContext(ListValueContext.class,0);
		}
		public SetValueContext setValue() {
			return getRuleContext(SetValueContext.class,0);
		}
		public MapValueContext mapValue() {
			return getRuleContext(MapValueContext.class,0);
		}
		public AssignableValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignableValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterAssignableValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitAssignableValue(this);
		}
	}

	public final AssignableValueContext assignableValue() throws RecognitionException {
		AssignableValueContext _localctx = new AssignableValueContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_assignableValue);
		try {
			setState(191);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(187);
				value();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(188);
				listValue();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(189);
				setValue();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(190);
				mapValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionDeltaValueContext extends ParserRuleContext {
		public SingleDeltaValueContext singleDeltaValue() {
			return getRuleContext(SingleDeltaValueContext.class,0);
		}
		public SetDeltaValueContext setDeltaValue() {
			return getRuleContext(SetDeltaValueContext.class,0);
		}
		public MapDeltaValueContext mapDeltaValue() {
			return getRuleContext(MapDeltaValueContext.class,0);
		}
		public CollectionDeltaValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionDeltaValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterCollectionDeltaValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitCollectionDeltaValue(this);
		}
	}

	public final CollectionDeltaValueContext collectionDeltaValue() throws RecognitionException {
		CollectionDeltaValueContext _localctx = new CollectionDeltaValueContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_collectionDeltaValue);
		try {
			setState(196);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(193);
				singleDeltaValue();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(194);
				setDeltaValue();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(195);
				mapDeltaValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleDeltaValueContext extends ParserRuleContext {
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public SingleDeltaValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleDeltaValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterSingleDeltaValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitSingleDeltaValue(this);
		}
	}

	public final SingleDeltaValueContext singleDeltaValue() throws RecognitionException {
		SingleDeltaValueContext _localctx = new SingleDeltaValueContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_singleDeltaValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(198);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListDeltaValueContext extends ParserRuleContext {
		public ListDeltaValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listDeltaValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterListDeltaValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitListDeltaValue(this);
		}
	}

	public final ListDeltaValueContext listDeltaValue() throws RecognitionException {
		ListDeltaValueContext _localctx = new ListDeltaValueContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_listDeltaValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetDeltaValueContext extends ParserRuleContext {
		public SetValueContext setValue() {
			return getRuleContext(SetValueContext.class,0);
		}
		public SetDeltaValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setDeltaValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterSetDeltaValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitSetDeltaValue(this);
		}
	}

	public final SetDeltaValueContext setDeltaValue() throws RecognitionException {
		SetDeltaValueContext _localctx = new SetDeltaValueContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_setDeltaValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(202);
			setValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MapDeltaValueContext extends ParserRuleContext {
		public MapValueContext mapValue() {
			return getRuleContext(MapValueContext.class,0);
		}
		public MapDeltaValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mapDeltaValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterMapDeltaValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitMapDeltaValue(this);
		}
	}

	public final MapDeltaValueContext mapDeltaValue() throws RecognitionException {
		MapDeltaValueContext _localctx = new MapDeltaValueContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_mapDeltaValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(204);
			mapValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ManipulationContext extends ParserRuleContext {
		public PropertyManipulationContext propertyManipulation() {
			return getRuleContext(PropertyManipulationContext.class,0);
		}
		public DeleteManipulationContext deleteManipulation() {
			return getRuleContext(DeleteManipulationContext.class,0);
		}
		public CustomManipulationContext customManipulation() {
			return getRuleContext(CustomManipulationContext.class,0);
		}
		public ManipulationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_manipulation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterManipulation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitManipulation(this);
		}
	}

	public final ManipulationContext manipulation() throws RecognitionException {
		ManipulationContext _localctx = new ManipulationContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_manipulation);
		try {
			setState(209);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(206);
				propertyManipulation();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(207);
				deleteManipulation();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(208);
				customManipulation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PropertyManipulationContext extends ParserRuleContext {
		public TerminalNode Dot() { return getToken(GmmlParser.Dot, 0); }
		public TerminalNode StandardIdentifier() { return getToken(GmmlParser.StandardIdentifier, 0); }
		public ManipulationOperationContext manipulationOperation() {
			return getRuleContext(ManipulationOperationContext.class,0);
		}
		public PropertyOwnerContext propertyOwner() {
			return getRuleContext(PropertyOwnerContext.class,0);
		}
		public PropertyManipulationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyManipulation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterPropertyManipulation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitPropertyManipulation(this);
		}
	}

	public final PropertyManipulationContext propertyManipulation() throws RecognitionException {
		PropertyManipulationContext _localctx = new PropertyManipulationContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_propertyManipulation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(212);
			_la = _input.LA(1);
			if (_la==StandardIdentifier) {
				{
				setState(211);
				propertyOwner();
				}
			}

			setState(214);
			match(Dot);
			setState(215);
			match(StandardIdentifier);
			setState(216);
			manipulationOperation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PropertyOwnerContext extends ParserRuleContext {
		public VariableValueContext variableValue() {
			return getRuleContext(VariableValueContext.class,0);
		}
		public PropertyOwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyOwner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterPropertyOwner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitPropertyOwner(this);
		}
	}

	public final PropertyOwnerContext propertyOwner() throws RecognitionException {
		PropertyOwnerContext _localctx = new PropertyOwnerContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_propertyOwner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(218);
			variableValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ManipulationOperationContext extends ParserRuleContext {
		public ChangeValueContext changeValue() {
			return getRuleContext(ChangeValueContext.class,0);
		}
		public AddContext add() {
			return getRuleContext(AddContext.class,0);
		}
		public RemoveContext remove() {
			return getRuleContext(RemoveContext.class,0);
		}
		public ClearContext clear() {
			return getRuleContext(ClearContext.class,0);
		}
		public ManipulationOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_manipulationOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterManipulationOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitManipulationOperation(this);
		}
	}

	public final ManipulationOperationContext manipulationOperation() throws RecognitionException {
		ManipulationOperationContext _localctx = new ManipulationOperationContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_manipulationOperation);
		try {
			setState(224);
			switch (_input.LA(1)) {
			case EQ:
				enterOuterAlt(_localctx, 1);
				{
				setState(220);
				changeValue();
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(221);
				add();
				}
				break;
			case MINUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(222);
				remove();
				}
				break;
			case MINUS_MINUS:
				enterOuterAlt(_localctx, 4);
				{
				setState(223);
				clear();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeValueContext extends ParserRuleContext {
		public TerminalNode EQ() { return getToken(GmmlParser.EQ, 0); }
		public AssignableValueContext assignableValue() {
			return getRuleContext(AssignableValueContext.class,0);
		}
		public ChangeValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterChangeValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitChangeValue(this);
		}
	}

	public final ChangeValueContext changeValue() throws RecognitionException {
		ChangeValueContext _localctx = new ChangeValueContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_changeValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(226);
			match(EQ);
			setState(227);
			assignableValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(GmmlParser.PLUS, 0); }
		public CollectionDeltaValueContext collectionDeltaValue() {
			return getRuleContext(CollectionDeltaValueContext.class,0);
		}
		public AddContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterAdd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitAdd(this);
		}
	}

	public final AddContext add() throws RecognitionException {
		AddContext _localctx = new AddContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_add);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(229);
			match(PLUS);
			setState(230);
			collectionDeltaValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemoveContext extends ParserRuleContext {
		public TerminalNode MINUS() { return getToken(GmmlParser.MINUS, 0); }
		public CollectionDeltaValueContext collectionDeltaValue() {
			return getRuleContext(CollectionDeltaValueContext.class,0);
		}
		public RemoveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_remove; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterRemove(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitRemove(this);
		}
	}

	public final RemoveContext remove() throws RecognitionException {
		RemoveContext _localctx = new RemoveContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_remove);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(232);
			match(MINUS);
			setState(233);
			collectionDeltaValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClearContext extends ParserRuleContext {
		public TerminalNode MINUS_MINUS() { return getToken(GmmlParser.MINUS_MINUS, 0); }
		public ClearContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clear; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterClear(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitClear(this);
		}
	}

	public final ClearContext clear() throws RecognitionException {
		ClearContext _localctx = new ClearContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_clear);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(235);
			match(MINUS_MINUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteManipulationContext extends ParserRuleContext {
		public TerminalNode MINUS() { return getToken(GmmlParser.MINUS, 0); }
		public VariableOrAssignmentValueContext variableOrAssignmentValue() {
			return getRuleContext(VariableOrAssignmentValueContext.class,0);
		}
		public DeleteManipulationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteManipulation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterDeleteManipulation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitDeleteManipulation(this);
		}
	}

	public final DeleteManipulationContext deleteManipulation() throws RecognitionException {
		DeleteManipulationContext _localctx = new DeleteManipulationContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_deleteManipulation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(237);
			match(MINUS);
			setState(238);
			variableOrAssignmentValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CustomManipulationContext extends ParserRuleContext {
		public CustomInstanceContext customInstance() {
			return getRuleContext(CustomInstanceContext.class,0);
		}
		public TerminalNode LCB() { return getToken(GmmlParser.LCB, 0); }
		public TerminalNode RCB() { return getToken(GmmlParser.RCB, 0); }
		public List<PropertyEntryContext> propertyEntry() {
			return getRuleContexts(PropertyEntryContext.class);
		}
		public PropertyEntryContext propertyEntry(int i) {
			return getRuleContext(PropertyEntryContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GmmlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GmmlParser.COMMA, i);
		}
		public CustomManipulationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_customManipulation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterCustomManipulation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitCustomManipulation(this);
		}
	}

	public final CustomManipulationContext customManipulation() throws RecognitionException {
		CustomManipulationContext _localctx = new CustomManipulationContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_customManipulation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(240);
			customInstance();
			setState(241);
			match(LCB);
			setState(250);
			_la = _input.LA(1);
			if (_la==StandardIdentifier) {
				{
				setState(242);
				propertyEntry();
				setState(247);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(243);
					match(COMMA);
					setState(244);
					propertyEntry();
					}
					}
					setState(249);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(252);
			match(RCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CustomInstanceContext extends ParserRuleContext {
		public FullyQualifiedIdentifierContext fullyQualifiedIdentifier() {
			return getRuleContext(FullyQualifiedIdentifierContext.class,0);
		}
		public CustomInstanceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_customInstance; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterCustomInstance(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitCustomInstance(this);
		}
	}

	public final CustomInstanceContext customInstance() throws RecognitionException {
		CustomInstanceContext _localctx = new CustomInstanceContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_customInstance);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(254);
			fullyQualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PropertyEntryContext extends ParserRuleContext {
		public TerminalNode StandardIdentifier() { return getToken(GmmlParser.StandardIdentifier, 0); }
		public TerminalNode Colon() { return getToken(GmmlParser.Colon, 0); }
		public AssignableValueContext assignableValue() {
			return getRuleContext(AssignableValueContext.class,0);
		}
		public PropertyEntryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyEntry; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterPropertyEntry(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitPropertyEntry(this);
		}
	}

	public final PropertyEntryContext propertyEntry() throws RecognitionException {
		PropertyEntryContext _localctx = new PropertyEntryContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_propertyEntry);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(256);
			match(StandardIdentifier);
			setState(257);
			match(Colon);
			setState(258);
			assignableValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableAssignmentContext extends ParserRuleContext {
		public VariableAssignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableAssignment; }
	 
		public VariableAssignmentContext() { }
		public void copyFrom(VariableAssignmentContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class QualifiedTypeAssignmentContext extends VariableAssignmentContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode EQ() { return getToken(GmmlParser.EQ, 0); }
		public QualifiedTypeContext qualifiedType() {
			return getRuleContext(QualifiedTypeContext.class,0);
		}
		public QualifiedTypeAssignmentContext(VariableAssignmentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterQualifiedTypeAssignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitQualifiedTypeAssignment(this);
		}
	}
	public static class ValueAssignmentContext extends VariableAssignmentContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode EQ() { return getToken(GmmlParser.EQ, 0); }
		public AssignableValueContext assignableValue() {
			return getRuleContext(AssignableValueContext.class,0);
		}
		public ValueAssignmentContext(VariableAssignmentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterValueAssignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitValueAssignment(this);
		}
	}
	public static class InstanceCreationContext extends VariableAssignmentContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode EQ() { return getToken(GmmlParser.EQ, 0); }
		public List<TerminalNode> LB() { return getTokens(GmmlParser.LB); }
		public TerminalNode LB(int i) {
			return getToken(GmmlParser.LB, i);
		}
		public List<TerminalNode> RB() { return getTokens(GmmlParser.RB); }
		public TerminalNode RB(int i) {
			return getToken(GmmlParser.RB, i);
		}
		public VariableValueContext variableValue() {
			return getRuleContext(VariableValueContext.class,0);
		}
		public VariableAssignmentContext variableAssignment() {
			return getRuleContext(VariableAssignmentContext.class,0);
		}
		public TerminalNode EXCLAMATION() { return getToken(GmmlParser.EXCLAMATION, 0); }
		public QualifiedTypeContext qualifiedType() {
			return getRuleContext(QualifiedTypeContext.class,0);
		}
		public InstanceCreationContext(VariableAssignmentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterInstanceCreation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitInstanceCreation(this);
		}
	}
	public static class InstanceLookupContext extends VariableAssignmentContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode EQ() { return getToken(GmmlParser.EQ, 0); }
		public List<TerminalNode> LB() { return getTokens(GmmlParser.LB); }
		public TerminalNode LB(int i) {
			return getToken(GmmlParser.LB, i);
		}
		public StringValueContext stringValue() {
			return getRuleContext(StringValueContext.class,0);
		}
		public List<TerminalNode> RB() { return getTokens(GmmlParser.RB); }
		public TerminalNode RB(int i) {
			return getToken(GmmlParser.RB, i);
		}
		public VariableValueContext variableValue() {
			return getRuleContext(VariableValueContext.class,0);
		}
		public VariableAssignmentContext variableAssignment() {
			return getRuleContext(VariableAssignmentContext.class,0);
		}
		public TerminalNode EXCLAMATION() { return getToken(GmmlParser.EXCLAMATION, 0); }
		public QualifiedTypeContext qualifiedType() {
			return getRuleContext(QualifiedTypeContext.class,0);
		}
		public InstanceLookupContext(VariableAssignmentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterInstanceLookup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitInstanceLookup(this);
		}
	}
	public static class InstanceAcquireContext extends VariableAssignmentContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode EQ() { return getToken(GmmlParser.EQ, 0); }
		public TerminalNode LSB() { return getToken(GmmlParser.LSB, 0); }
		public StringValueContext stringValue() {
			return getRuleContext(StringValueContext.class,0);
		}
		public TerminalNode RSB() { return getToken(GmmlParser.RSB, 0); }
		public VariableValueContext variableValue() {
			return getRuleContext(VariableValueContext.class,0);
		}
		public TerminalNode LB() { return getToken(GmmlParser.LB, 0); }
		public VariableAssignmentContext variableAssignment() {
			return getRuleContext(VariableAssignmentContext.class,0);
		}
		public TerminalNode RB() { return getToken(GmmlParser.RB, 0); }
		public TerminalNode EXCLAMATION() { return getToken(GmmlParser.EXCLAMATION, 0); }
		public QualifiedTypeContext qualifiedType() {
			return getRuleContext(QualifiedTypeContext.class,0);
		}
		public InstanceAcquireContext(VariableAssignmentContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterInstanceAcquire(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitInstanceAcquire(this);
		}
	}

	public final VariableAssignmentContext variableAssignment() throws RecognitionException {
		VariableAssignmentContext _localctx = new VariableAssignmentContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_variableAssignment);
		try {
			setState(312);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				_localctx = new QualifiedTypeAssignmentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(260);
				variable();
				setState(261);
				match(EQ);
				setState(262);
				qualifiedType();
				}
				break;
			case 2:
				_localctx = new InstanceCreationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(264);
				variable();
				setState(265);
				match(EQ);
				setState(273);
				switch (_input.LA(1)) {
				case StandardIdentifier:
					{
					setState(266);
					variableValue();
					}
					break;
				case LB:
					{
					setState(267);
					match(LB);
					setState(268);
					variableAssignment();
					setState(269);
					match(RB);
					}
					break;
				case EXCLAMATION:
					{
					setState(271);
					match(EXCLAMATION);
					setState(272);
					qualifiedType();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(275);
				match(LB);
				setState(276);
				match(RB);
				}
				break;
			case 3:
				_localctx = new InstanceLookupContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(278);
				variable();
				setState(279);
				match(EQ);
				setState(287);
				switch (_input.LA(1)) {
				case StandardIdentifier:
					{
					setState(280);
					variableValue();
					}
					break;
				case LB:
					{
					setState(281);
					match(LB);
					setState(282);
					variableAssignment();
					setState(283);
					match(RB);
					}
					break;
				case EXCLAMATION:
					{
					setState(285);
					match(EXCLAMATION);
					setState(286);
					qualifiedType();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(289);
				match(LB);
				setState(290);
				stringValue();
				setState(291);
				match(RB);
				}
				break;
			case 4:
				_localctx = new InstanceAcquireContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(293);
				variable();
				setState(294);
				match(EQ);
				setState(302);
				switch (_input.LA(1)) {
				case StandardIdentifier:
					{
					setState(295);
					variableValue();
					}
					break;
				case LB:
					{
					setState(296);
					match(LB);
					setState(297);
					variableAssignment();
					setState(298);
					match(RB);
					}
					break;
				case EXCLAMATION:
					{
					setState(300);
					match(EXCLAMATION);
					setState(301);
					qualifiedType();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(304);
				match(LSB);
				setState(305);
				stringValue();
				setState(306);
				match(RSB);
				}
				break;
			case 5:
				_localctx = new ValueAssignmentContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(308);
				variable();
				setState(309);
				match(EQ);
				setState(310);
				assignableValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableContext extends ParserRuleContext {
		public TerminalNode StandardIdentifier() { return getToken(GmmlParser.StandardIdentifier, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitVariable(this);
		}
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(314);
			match(StandardIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullyQualifiedIdentifierContext extends ParserRuleContext {
		public List<TerminalNode> StandardIdentifier() { return getTokens(GmmlParser.StandardIdentifier); }
		public TerminalNode StandardIdentifier(int i) {
			return getToken(GmmlParser.StandardIdentifier, i);
		}
		public List<TerminalNode> Dot() { return getTokens(GmmlParser.Dot); }
		public TerminalNode Dot(int i) {
			return getToken(GmmlParser.Dot, i);
		}
		public FullyQualifiedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullyQualifiedIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterFullyQualifiedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitFullyQualifiedIdentifier(this);
		}
	}

	public final FullyQualifiedIdentifierContext fullyQualifiedIdentifier() throws RecognitionException {
		FullyQualifiedIdentifierContext _localctx = new FullyQualifiedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_fullyQualifiedIdentifier);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(316);
			match(StandardIdentifier);
			setState(321);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,21,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(317);
					match(Dot);
					setState(318);
					match(StandardIdentifier);
					}
					} 
				}
				setState(323);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,21,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableValueContext extends ParserRuleContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public VariableValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterVariableValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitVariableValue(this);
		}
	}

	public final VariableValueContext variableValue() throws RecognitionException {
		VariableValueContext _localctx = new VariableValueContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_variableValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(324);
			variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifiedTypeContext extends ParserRuleContext {
		public FullyQualifiedIdentifierContext fullyQualifiedIdentifier() {
			return getRuleContext(FullyQualifiedIdentifierContext.class,0);
		}
		public QualifiedTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterQualifiedType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitQualifiedType(this);
		}
	}

	public final QualifiedTypeContext qualifiedType() throws RecognitionException {
		QualifiedTypeContext _localctx = new QualifiedTypeContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_qualifiedType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(326);
			fullyQualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValueContext extends ParserRuleContext {
		public LiteralValueContext literalValue() {
			return getRuleContext(LiteralValueContext.class,0);
		}
		public NullValueContext nullValue() {
			return getRuleContext(NullValueContext.class,0);
		}
		public VariableOrAssignmentValueContext variableOrAssignmentValue() {
			return getRuleContext(VariableOrAssignmentValueContext.class,0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitValue(this);
		}
	}

	public final ValueContext value() throws RecognitionException {
		ValueContext _localctx = new ValueContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_value);
		try {
			setState(331);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(328);
				literalValue();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(329);
				nullValue();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(330);
				variableOrAssignmentValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableOrAssignmentValueContext extends ParserRuleContext {
		public VariableValueContext variableValue() {
			return getRuleContext(VariableValueContext.class,0);
		}
		public VariableAssignmentValueContext variableAssignmentValue() {
			return getRuleContext(VariableAssignmentValueContext.class,0);
		}
		public VariableOrAssignmentValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableOrAssignmentValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterVariableOrAssignmentValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitVariableOrAssignmentValue(this);
		}
	}

	public final VariableOrAssignmentValueContext variableOrAssignmentValue() throws RecognitionException {
		VariableOrAssignmentValueContext _localctx = new VariableOrAssignmentValueContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_variableOrAssignmentValue);
		try {
			setState(335);
			switch (_input.LA(1)) {
			case StandardIdentifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(333);
				variableValue();
				}
				break;
			case LB:
				enterOuterAlt(_localctx, 2);
				{
				setState(334);
				variableAssignmentValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableAssignmentValueContext extends ParserRuleContext {
		public TerminalNode LB() { return getToken(GmmlParser.LB, 0); }
		public VariableAssignmentContext variableAssignment() {
			return getRuleContext(VariableAssignmentContext.class,0);
		}
		public TerminalNode RB() { return getToken(GmmlParser.RB, 0); }
		public VariableAssignmentValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableAssignmentValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterVariableAssignmentValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitVariableAssignmentValue(this);
		}
	}

	public final VariableAssignmentValueContext variableAssignmentValue() throws RecognitionException {
		VariableAssignmentValueContext _localctx = new VariableAssignmentValueContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_variableAssignmentValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(337);
			match(LB);
			setState(338);
			variableAssignment();
			setState(339);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnumValueContext extends ParserRuleContext {
		public VariableOrAssignmentValueContext variableOrAssignmentValue() {
			return getRuleContext(VariableOrAssignmentValueContext.class,0);
		}
		public TerminalNode Colon_Colon() { return getToken(GmmlParser.Colon_Colon, 0); }
		public TerminalNode StandardIdentifier() { return getToken(GmmlParser.StandardIdentifier, 0); }
		public EnumValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enumValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterEnumValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitEnumValue(this);
		}
	}

	public final EnumValueContext enumValue() throws RecognitionException {
		EnumValueContext _localctx = new EnumValueContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_enumValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(341);
			variableOrAssignmentValue();
			setState(342);
			match(Colon_Colon);
			setState(343);
			match(StandardIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralValueContext extends ParserRuleContext {
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public FloatValueContext floatValue() {
			return getRuleContext(FloatValueContext.class,0);
		}
		public DoubleValueContext doubleValue() {
			return getRuleContext(DoubleValueContext.class,0);
		}
		public DecimalValueContext decimalValue() {
			return getRuleContext(DecimalValueContext.class,0);
		}
		public IntegerValueContext integerValue() {
			return getRuleContext(IntegerValueContext.class,0);
		}
		public LongValueContext longValue() {
			return getRuleContext(LongValueContext.class,0);
		}
		public StringValueContext stringValue() {
			return getRuleContext(StringValueContext.class,0);
		}
		public DateValueContext dateValue() {
			return getRuleContext(DateValueContext.class,0);
		}
		public EnumValueContext enumValue() {
			return getRuleContext(EnumValueContext.class,0);
		}
		public LiteralValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literalValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterLiteralValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitLiteralValue(this);
		}
	}

	public final LiteralValueContext literalValue() throws RecognitionException {
		LiteralValueContext _localctx = new LiteralValueContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_literalValue);
		try {
			setState(354);
			switch (_input.LA(1)) {
			case Boolean:
				enterOuterAlt(_localctx, 1);
				{
				setState(345);
				booleanValue();
				}
				break;
			case FloatLiteral:
				enterOuterAlt(_localctx, 2);
				{
				setState(346);
				floatValue();
				}
				break;
			case DoubleLiteral:
				enterOuterAlt(_localctx, 3);
				{
				setState(347);
				doubleValue();
				}
				break;
			case DecimalLiteral:
				enterOuterAlt(_localctx, 4);
				{
				setState(348);
				decimalValue();
				}
				break;
			case IntegerBase10Literal:
			case IntegerBase16Literal:
				enterOuterAlt(_localctx, 5);
				{
				setState(349);
				integerValue();
				}
				break;
			case LongBase10Literal:
			case LongBase16Literal:
				enterOuterAlt(_localctx, 6);
				{
				setState(350);
				longValue();
				}
				break;
			case StringOpen:
				enterOuterAlt(_localctx, 7);
				{
				setState(351);
				stringValue();
				}
				break;
			case DateFunction:
				enterOuterAlt(_localctx, 8);
				{
				setState(352);
				dateValue();
				}
				break;
			case LB:
			case StandardIdentifier:
				enterOuterAlt(_localctx, 9);
				{
				setState(353);
				enumValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DateValueContext extends ParserRuleContext {
		public TerminalNode DateFunction() { return getToken(GmmlParser.DateFunction, 0); }
		public List<CalendarOffsetValueContext> calendarOffsetValue() {
			return getRuleContexts(CalendarOffsetValueContext.class);
		}
		public CalendarOffsetValueContext calendarOffsetValue(int i) {
			return getRuleContext(CalendarOffsetValueContext.class,i);
		}
		public TerminalNode RB() { return getToken(GmmlParser.RB, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GmmlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GmmlParser.COMMA, i);
		}
		public DateValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterDateValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitDateValue(this);
		}
	}

	public final DateValueContext dateValue() throws RecognitionException {
		DateValueContext _localctx = new DateValueContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_dateValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(356);
			match(DateFunction);
			setState(357);
			calendarOffsetValue();
			setState(362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(358);
				match(COMMA);
				setState(359);
				calendarOffsetValue();
				}
				}
				setState(364);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(365);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CalendarOffsetValueContext extends ParserRuleContext {
		public DateOffsetContext dateOffset() {
			return getRuleContext(DateOffsetContext.class,0);
		}
		public TimeZoneOffsetContext timeZoneOffset() {
			return getRuleContext(TimeZoneOffsetContext.class,0);
		}
		public CalendarOffsetValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_calendarOffsetValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterCalendarOffsetValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitCalendarOffsetValue(this);
		}
	}

	public final CalendarOffsetValueContext calendarOffsetValue() throws RecognitionException {
		CalendarOffsetValueContext _localctx = new CalendarOffsetValueContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_calendarOffsetValue);
		try {
			setState(369);
			switch (_input.LA(1)) {
			case DateOffset:
				enterOuterAlt(_localctx, 1);
				{
				setState(367);
				dateOffset();
				}
				break;
			case TimeZoneOffset:
				enterOuterAlt(_localctx, 2);
				{
				setState(368);
				timeZoneOffset();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DateOffsetContext extends ParserRuleContext {
		public TerminalNode DateOffset() { return getToken(GmmlParser.DateOffset, 0); }
		public DateOffsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateOffset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterDateOffset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitDateOffset(this);
		}
	}

	public final DateOffsetContext dateOffset() throws RecognitionException {
		DateOffsetContext _localctx = new DateOffsetContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_dateOffset);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(371);
			match(DateOffset);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeZoneOffsetContext extends ParserRuleContext {
		public TerminalNode TimeZoneOffset() { return getToken(GmmlParser.TimeZoneOffset, 0); }
		public TimeZoneOffsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeZoneOffset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterTimeZoneOffset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitTimeZoneOffset(this);
		}
	}

	public final TimeZoneOffsetContext timeZoneOffset() throws RecognitionException {
		TimeZoneOffsetContext _localctx = new TimeZoneOffsetContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_timeZoneOffset);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(373);
			match(TimeZoneOffset);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringValueContext extends ParserRuleContext {
		public TerminalNode StringOpen() { return getToken(GmmlParser.StringOpen, 0); }
		public TerminalNode StringClose() { return getToken(GmmlParser.StringClose, 0); }
		public List<EscapeContext> escape() {
			return getRuleContexts(EscapeContext.class);
		}
		public EscapeContext escape(int i) {
			return getRuleContext(EscapeContext.class,i);
		}
		public List<PlainContentContext> plainContent() {
			return getRuleContexts(PlainContentContext.class);
		}
		public PlainContentContext plainContent(int i) {
			return getRuleContext(PlainContentContext.class,i);
		}
		public StringValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterStringValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitStringValue(this);
		}
	}

	public final StringValueContext stringValue() throws RecognitionException {
		StringValueContext _localctx = new StringValueContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_stringValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(375);
			match(StringOpen);
			setState(380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UnicodeEscape) | (1L << EscB) | (1L << EscT) | (1L << EscN) | (1L << EscF) | (1L << EscR) | (1L << EscSQ) | (1L << EscBS) | (1L << PlainContent))) != 0)) {
				{
				setState(378);
				switch (_input.LA(1)) {
				case UnicodeEscape:
				case EscB:
				case EscT:
				case EscN:
				case EscF:
				case EscR:
				case EscSQ:
				case EscBS:
					{
					setState(376);
					escape();
					}
					break;
				case PlainContent:
					{
					setState(377);
					plainContent();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(382);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(383);
			match(StringClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EscapeContext extends ParserRuleContext {
		public EscapeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_escape; }
	 
		public EscapeContext() { }
		public void copyFrom(EscapeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class EscFContext extends EscapeContext {
		public TerminalNode EscF() { return getToken(GmmlParser.EscF, 0); }
		public EscFContext(EscapeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterEscF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitEscF(this);
		}
	}
	public static class EscSQContext extends EscapeContext {
		public TerminalNode EscSQ() { return getToken(GmmlParser.EscSQ, 0); }
		public EscSQContext(EscapeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterEscSQ(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitEscSQ(this);
		}
	}
	public static class EscBSContext extends EscapeContext {
		public TerminalNode EscBS() { return getToken(GmmlParser.EscBS, 0); }
		public EscBSContext(EscapeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterEscBS(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitEscBS(this);
		}
	}
	public static class EscNContext extends EscapeContext {
		public TerminalNode EscN() { return getToken(GmmlParser.EscN, 0); }
		public EscNContext(EscapeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterEscN(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitEscN(this);
		}
	}
	public static class EscBContext extends EscapeContext {
		public TerminalNode EscB() { return getToken(GmmlParser.EscB, 0); }
		public EscBContext(EscapeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterEscB(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitEscB(this);
		}
	}
	public static class EscRContext extends EscapeContext {
		public TerminalNode EscR() { return getToken(GmmlParser.EscR, 0); }
		public EscRContext(EscapeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterEscR(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitEscR(this);
		}
	}
	public static class UnicodeEscapeContext extends EscapeContext {
		public TerminalNode UnicodeEscape() { return getToken(GmmlParser.UnicodeEscape, 0); }
		public UnicodeEscapeContext(EscapeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterUnicodeEscape(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitUnicodeEscape(this);
		}
	}
	public static class EscTContext extends EscapeContext {
		public TerminalNode EscT() { return getToken(GmmlParser.EscT, 0); }
		public EscTContext(EscapeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterEscT(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitEscT(this);
		}
	}

	public final EscapeContext escape() throws RecognitionException {
		EscapeContext _localctx = new EscapeContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_escape);
		try {
			setState(393);
			switch (_input.LA(1)) {
			case EscB:
				_localctx = new EscBContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(385);
				match(EscB);
				}
				break;
			case EscBS:
				_localctx = new EscBSContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(386);
				match(EscBS);
				}
				break;
			case EscF:
				_localctx = new EscFContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(387);
				match(EscF);
				}
				break;
			case EscN:
				_localctx = new EscNContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(388);
				match(EscN);
				}
				break;
			case EscR:
				_localctx = new EscRContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(389);
				match(EscR);
				}
				break;
			case EscSQ:
				_localctx = new EscSQContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(390);
				match(EscSQ);
				}
				break;
			case EscT:
				_localctx = new EscTContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(391);
				match(EscT);
				}
				break;
			case UnicodeEscape:
				_localctx = new UnicodeEscapeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(392);
				match(UnicodeEscape);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlainContentContext extends ParserRuleContext {
		public TerminalNode PlainContent() { return getToken(GmmlParser.PlainContent, 0); }
		public PlainContentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plainContent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterPlainContent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitPlainContent(this);
		}
	}

	public final PlainContentContext plainContent() throws RecognitionException {
		PlainContentContext _localctx = new PlainContentContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_plainContent);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(395);
			match(PlainContent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullValueContext extends ParserRuleContext {
		public TerminalNode Null() { return getToken(GmmlParser.Null, 0); }
		public NullValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterNullValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitNullValue(this);
		}
	}

	public final NullValueContext nullValue() throws RecognitionException {
		NullValueContext _localctx = new NullValueContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_nullValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(397);
			match(Null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanValueContext extends ParserRuleContext {
		public TerminalNode Boolean() { return getToken(GmmlParser.Boolean, 0); }
		public BooleanValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterBooleanValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitBooleanValue(this);
		}
	}

	public final BooleanValueContext booleanValue() throws RecognitionException {
		BooleanValueContext _localctx = new BooleanValueContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_booleanValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(399);
			match(Boolean);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalValueContext extends ParserRuleContext {
		public TerminalNode DecimalLiteral() { return getToken(GmmlParser.DecimalLiteral, 0); }
		public DecimalValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterDecimalValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitDecimalValue(this);
		}
	}

	public final DecimalValueContext decimalValue() throws RecognitionException {
		DecimalValueContext _localctx = new DecimalValueContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_decimalValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(401);
			match(DecimalLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FloatValueContext extends ParserRuleContext {
		public TerminalNode FloatLiteral() { return getToken(GmmlParser.FloatLiteral, 0); }
		public FloatValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_floatValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterFloatValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitFloatValue(this);
		}
	}

	public final FloatValueContext floatValue() throws RecognitionException {
		FloatValueContext _localctx = new FloatValueContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_floatValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(403);
			match(FloatLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoubleValueContext extends ParserRuleContext {
		public TerminalNode DoubleLiteral() { return getToken(GmmlParser.DoubleLiteral, 0); }
		public DoubleValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doubleValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterDoubleValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitDoubleValue(this);
		}
	}

	public final DoubleValueContext doubleValue() throws RecognitionException {
		DoubleValueContext _localctx = new DoubleValueContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_doubleValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(405);
			match(DoubleLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntegerValueContext extends ParserRuleContext {
		public IntegerValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_integerValue; }
	 
		public IntegerValueContext() { }
		public void copyFrom(IntegerValueContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IntegerHexRepresentationContext extends IntegerValueContext {
		public TerminalNode IntegerBase16Literal() { return getToken(GmmlParser.IntegerBase16Literal, 0); }
		public IntegerHexRepresentationContext(IntegerValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterIntegerHexRepresentation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitIntegerHexRepresentation(this);
		}
	}
	public static class IntegerDecimalRepresenationContext extends IntegerValueContext {
		public TerminalNode IntegerBase10Literal() { return getToken(GmmlParser.IntegerBase10Literal, 0); }
		public IntegerDecimalRepresenationContext(IntegerValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterIntegerDecimalRepresenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitIntegerDecimalRepresenation(this);
		}
	}

	public final IntegerValueContext integerValue() throws RecognitionException {
		IntegerValueContext _localctx = new IntegerValueContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_integerValue);
		try {
			setState(409);
			switch (_input.LA(1)) {
			case IntegerBase16Literal:
				_localctx = new IntegerHexRepresentationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(407);
				match(IntegerBase16Literal);
				}
				break;
			case IntegerBase10Literal:
				_localctx = new IntegerDecimalRepresenationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(408);
				match(IntegerBase10Literal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LongValueContext extends ParserRuleContext {
		public LongValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_longValue; }
	 
		public LongValueContext() { }
		public void copyFrom(LongValueContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LongDecimalRepresenationContext extends LongValueContext {
		public TerminalNode LongBase10Literal() { return getToken(GmmlParser.LongBase10Literal, 0); }
		public LongDecimalRepresenationContext(LongValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterLongDecimalRepresenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitLongDecimalRepresenation(this);
		}
	}
	public static class LongHexRepresentationContext extends LongValueContext {
		public TerminalNode LongBase16Literal() { return getToken(GmmlParser.LongBase16Literal, 0); }
		public LongHexRepresentationContext(LongValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).enterLongHexRepresentation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmmlParserListener ) ((GmmlParserListener)listener).exitLongHexRepresentation(this);
		}
	}

	public final LongValueContext longValue() throws RecognitionException {
		LongValueContext _localctx = new LongValueContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_longValue);
		try {
			setState(413);
			switch (_input.LA(1)) {
			case LongBase16Literal:
				_localctx = new LongHexRepresentationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(411);
				match(LongBase16Literal);
				}
				break;
			case LongBase10Literal:
				_localctx = new LongDecimalRepresenationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(412);
				match(LongBase10Literal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3-\u01a2\4\2\t\2\4"+
		"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"+
		"\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\3\2\3\2\3\2\3\3\7\3s\n\3\f\3\16\3v\13"+
		"\3\3\3\3\3\3\4\7\4{\n\4\f\4\16\4~\13\4\3\5\3\5\7\5\u0082\n\5\f\5\16\5"+
		"\u0085\13\5\3\5\3\5\3\6\3\6\5\6\u008b\n\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n"+
		"\3\n\3\n\3\n\7\n\u0097\n\n\f\n\16\n\u009a\13\n\5\n\u009c\n\n\3\n\3\n\3"+
		"\13\3\13\3\13\3\13\7\13\u00a4\n\13\f\13\16\13\u00a7\13\13\5\13\u00a9\n"+
		"\13\3\13\3\13\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\7\r\u00b5\n\r\f\r\16\r\u00b8"+
		"\13\r\5\r\u00ba\n\r\3\r\3\r\3\16\3\16\3\16\3\16\5\16\u00c2\n\16\3\17\3"+
		"\17\3\17\5\17\u00c7\n\17\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3\24"+
		"\3\24\3\24\5\24\u00d4\n\24\3\25\5\25\u00d7\n\25\3\25\3\25\3\25\3\25\3"+
		"\26\3\26\3\27\3\27\3\27\3\27\5\27\u00e3\n\27\3\30\3\30\3\30\3\31\3\31"+
		"\3\31\3\32\3\32\3\32\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35"+
		"\7\35\u00f8\n\35\f\35\16\35\u00fb\13\35\5\35\u00fd\n\35\3\35\3\35\3\36"+
		"\3\36\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u0114"+
		"\n \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u0122\n \3 \3 \3 \3 \3 \3 "+
		"\3 \3 \3 \3 \3 \3 \3 \5 \u0131\n \3 \3 \3 \3 \3 \3 \3 \3 \5 \u013b\n "+
		"\3!\3!\3\"\3\"\3\"\7\"\u0142\n\"\f\"\16\"\u0145\13\"\3#\3#\3$\3$\3%\3"+
		"%\3%\5%\u014e\n%\3&\3&\5&\u0152\n&\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3)\3)\3"+
		")\3)\3)\3)\3)\3)\3)\5)\u0165\n)\3*\3*\3*\3*\7*\u016b\n*\f*\16*\u016e\13"+
		"*\3*\3*\3+\3+\5+\u0174\n+\3,\3,\3-\3-\3.\3.\3.\7.\u017d\n.\f.\16.\u0180"+
		"\13.\3.\3.\3/\3/\3/\3/\3/\3/\3/\3/\5/\u018c\n/\3\60\3\60\3\61\3\61\3\62"+
		"\3\62\3\63\3\63\3\64\3\64\3\65\3\65\3\66\3\66\5\66\u019c\n\66\3\67\3\67"+
		"\5\67\u01a0\n\67\3\67\2\28\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$"+
		"&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjl\2\2\u01a5\2n\3\2\2\2\4t"+
		"\3\2\2\2\6|\3\2\2\2\b\177\3\2\2\2\n\u008a\3\2\2\2\f\u008c\3\2\2\2\16\u008e"+
		"\3\2\2\2\20\u0090\3\2\2\2\22\u0092\3\2\2\2\24\u009f\3\2\2\2\26\u00ac\3"+
		"\2\2\2\30\u00b0\3\2\2\2\32\u00c1\3\2\2\2\34\u00c6\3\2\2\2\36\u00c8\3\2"+
		"\2\2 \u00ca\3\2\2\2\"\u00cc\3\2\2\2$\u00ce\3\2\2\2&\u00d3\3\2\2\2(\u00d6"+
		"\3\2\2\2*\u00dc\3\2\2\2,\u00e2\3\2\2\2.\u00e4\3\2\2\2\60\u00e7\3\2\2\2"+
		"\62\u00ea\3\2\2\2\64\u00ed\3\2\2\2\66\u00ef\3\2\2\28\u00f2\3\2\2\2:\u0100"+
		"\3\2\2\2<\u0102\3\2\2\2>\u013a\3\2\2\2@\u013c\3\2\2\2B\u013e\3\2\2\2D"+
		"\u0146\3\2\2\2F\u0148\3\2\2\2H\u014d\3\2\2\2J\u0151\3\2\2\2L\u0153\3\2"+
		"\2\2N\u0157\3\2\2\2P\u0164\3\2\2\2R\u0166\3\2\2\2T\u0173\3\2\2\2V\u0175"+
		"\3\2\2\2X\u0177\3\2\2\2Z\u0179\3\2\2\2\\\u018b\3\2\2\2^\u018d\3\2\2\2"+
		"`\u018f\3\2\2\2b\u0191\3\2\2\2d\u0193\3\2\2\2f\u0195\3\2\2\2h\u0197\3"+
		"\2\2\2j\u019b\3\2\2\2l\u019f\3\2\2\2no\5\6\4\2op\7\2\2\3p\3\3\2\2\2qs"+
		"\5\n\6\2rq\3\2\2\2sv\3\2\2\2tr\3\2\2\2tu\3\2\2\2uw\3\2\2\2vt\3\2\2\2w"+
		"x\7\2\2\3x\5\3\2\2\2y{\5\b\5\2zy\3\2\2\2{~\3\2\2\2|z\3\2\2\2|}\3\2\2\2"+
		"}\7\3\2\2\2~|\3\2\2\2\177\u0083\7\17\2\2\u0080\u0082\5\n\6\2\u0081\u0080"+
		"\3\2\2\2\u0082\u0085\3\2\2\2\u0083\u0081\3\2\2\2\u0083\u0084\3\2\2\2\u0084"+
		"\u0086\3\2\2\2\u0085\u0083\3\2\2\2\u0086\u0087\7\20\2\2\u0087\t\3\2\2"+
		"\2\u0088\u008b\5\f\7\2\u0089\u008b\5&\24\2\u008a\u0088\3\2\2\2\u008a\u0089"+
		"\3\2\2\2\u008b\13\3\2\2\2\u008c\u008d\5> \2\u008d\r\3\2\2\2\u008e\u008f"+
		"\5H%\2\u008f\17\3\2\2\2\u0090\u0091\5H%\2\u0091\21\3\2\2\2\u0092\u009b"+
		"\7\r\2\2\u0093\u0098\5\16\b\2\u0094\u0095\7\21\2\2\u0095\u0097\5\16\b"+
		"\2\u0096\u0094\3\2\2\2\u0097\u009a\3\2\2\2\u0098\u0096\3\2\2\2\u0098\u0099"+
		"\3\2\2\2\u0099\u009c\3\2\2\2\u009a\u0098\3\2\2\2\u009b\u0093\3\2\2\2\u009b"+
		"\u009c\3\2\2\2\u009c\u009d\3\2\2\2\u009d\u009e\7\16\2\2\u009e\23\3\2\2"+
		"\2\u009f\u00a8\7\13\2\2\u00a0\u00a5\5\20\t\2\u00a1\u00a2\7\21\2\2\u00a2"+
		"\u00a4\5\20\t\2\u00a3\u00a1\3\2\2\2\u00a4\u00a7\3\2\2\2\u00a5\u00a3\3"+
		"\2\2\2\u00a5\u00a6\3\2\2\2\u00a6\u00a9\3\2\2\2\u00a7\u00a5\3\2\2\2\u00a8"+
		"\u00a0\3\2\2\2\u00a8\u00a9\3\2\2\2\u00a9\u00aa\3\2\2\2\u00aa\u00ab\7\f"+
		"\2\2\u00ab\25\3\2\2\2\u00ac\u00ad\5H%\2\u00ad\u00ae\7\5\2\2\u00ae\u00af"+
		"\5H%\2\u00af\27\3\2\2\2\u00b0\u00b9\7\17\2\2\u00b1\u00b6\5\26\f\2\u00b2"+
		"\u00b3\7\21\2\2\u00b3\u00b5\5\26\f\2\u00b4\u00b2\3\2\2\2\u00b5\u00b8\3"+
		"\2\2\2\u00b6\u00b4\3\2\2\2\u00b6\u00b7\3\2\2\2\u00b7\u00ba\3\2\2\2\u00b8"+
		"\u00b6\3\2\2\2\u00b9\u00b1\3\2\2\2\u00b9\u00ba\3\2\2\2\u00ba\u00bb\3\2"+
		"\2\2\u00bb\u00bc\7\20\2\2\u00bc\31\3\2\2\2\u00bd\u00c2\5H%\2\u00be\u00c2"+
		"\5\22\n\2\u00bf\u00c2\5\24\13\2\u00c0\u00c2\5\30\r\2\u00c1\u00bd\3\2\2"+
		"\2\u00c1\u00be\3\2\2\2\u00c1\u00bf\3\2\2\2\u00c1\u00c0\3\2\2\2\u00c2\33"+
		"\3\2\2\2\u00c3\u00c7\5\36\20\2\u00c4\u00c7\5\"\22\2\u00c5\u00c7\5$\23"+
		"\2\u00c6\u00c3\3\2\2\2\u00c6\u00c4\3\2\2\2\u00c6\u00c5\3\2\2\2\u00c7\35"+
		"\3\2\2\2\u00c8\u00c9\5H%\2\u00c9\37\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb"+
		"!\3\2\2\2\u00cc\u00cd\5\24\13\2\u00cd#\3\2\2\2\u00ce\u00cf\5\30\r\2\u00cf"+
		"%\3\2\2\2\u00d0\u00d4\5(\25\2\u00d1\u00d4\5\66\34\2\u00d2\u00d4\58\35"+
		"\2\u00d3\u00d0\3\2\2\2\u00d3\u00d1\3\2\2\2\u00d3\u00d2\3\2\2\2\u00d4\'"+
		"\3\2\2\2\u00d5\u00d7\5*\26\2\u00d6\u00d5\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7"+
		"\u00d8\3\2\2\2\u00d8\u00d9\7\22\2\2\u00d9\u00da\7\24\2\2\u00da\u00db\5"+
		",\27\2\u00db)\3\2\2\2\u00dc\u00dd\5D#\2\u00dd+\3\2\2\2\u00de\u00e3\5."+
		"\30\2\u00df\u00e3\5\60\31\2\u00e0\u00e3\5\62\32\2\u00e1\u00e3\5\64\33"+
		"\2\u00e2\u00de\3\2\2\2\u00e2\u00df\3\2\2\2\u00e2\u00e0\3\2\2\2\u00e2\u00e1"+
		"\3\2\2\2\u00e3-\3\2\2\2\u00e4\u00e5\7\7\2\2\u00e5\u00e6\5\32\16\2\u00e6"+
		"/\3\2\2\2\u00e7\u00e8\7\b\2\2\u00e8\u00e9\5\34\17\2\u00e9\61\3\2\2\2\u00ea"+
		"\u00eb\7\t\2\2\u00eb\u00ec\5\34\17\2\u00ec\63\3\2\2\2\u00ed\u00ee\7\n"+
		"\2\2\u00ee\65\3\2\2\2\u00ef\u00f0\7\t\2\2\u00f0\u00f1\5J&\2\u00f1\67\3"+
		"\2\2\2\u00f2\u00f3\5:\36\2\u00f3\u00fc\7\17\2\2\u00f4\u00f9\5<\37\2\u00f5"+
		"\u00f6\7\21\2\2\u00f6\u00f8\5<\37\2\u00f7\u00f5\3\2\2\2\u00f8\u00fb\3"+
		"\2\2\2\u00f9\u00f7\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\u00fd\3\2\2\2\u00fb"+
		"\u00f9\3\2\2\2\u00fc\u00f4\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd\u00fe\3\2"+
		"\2\2\u00fe\u00ff\7\20\2\2\u00ff9\3\2\2\2\u0100\u0101\5B\"\2\u0101;\3\2"+
		"\2\2\u0102\u0103\7\24\2\2\u0103\u0104\7\5\2\2\u0104\u0105\5\32\16\2\u0105"+
		"=\3\2\2\2\u0106\u0107\5@!\2\u0107\u0108\7\7\2\2\u0108\u0109\5F$\2\u0109"+
		"\u013b\3\2\2\2\u010a\u010b\5@!\2\u010b\u0113\7\7\2\2\u010c\u0114\5D#\2"+
		"\u010d\u010e\7\13\2\2\u010e\u010f\5> \2\u010f\u0110\7\f\2\2\u0110\u0114"+
		"\3\2\2\2\u0111\u0112\7\23\2\2\u0112\u0114\5F$\2\u0113\u010c\3\2\2\2\u0113"+
		"\u010d\3\2\2\2\u0113\u0111\3\2\2\2\u0114\u0115\3\2\2\2\u0115\u0116\7\13"+
		"\2\2\u0116\u0117\7\f\2\2\u0117\u013b\3\2\2\2\u0118\u0119\5@!\2\u0119\u0121"+
		"\7\7\2\2\u011a\u0122\5D#\2\u011b\u011c\7\13\2\2\u011c\u011d\5> \2\u011d"+
		"\u011e\7\f\2\2\u011e\u0122\3\2\2\2\u011f\u0120\7\23\2\2\u0120\u0122\5"+
		"F$\2\u0121\u011a\3\2\2\2\u0121\u011b\3\2\2\2\u0121\u011f\3\2\2\2\u0122"+
		"\u0123\3\2\2\2\u0123\u0124\7\13\2\2\u0124\u0125\5Z.\2\u0125\u0126\7\f"+
		"\2\2\u0126\u013b\3\2\2\2\u0127\u0128\5@!\2\u0128\u0130\7\7\2\2\u0129\u0131"+
		"\5D#\2\u012a\u012b\7\13\2\2\u012b\u012c\5> \2\u012c\u012d\7\f\2\2\u012d"+
		"\u0131\3\2\2\2\u012e\u012f\7\23\2\2\u012f\u0131\5F$\2\u0130\u0129\3\2"+
		"\2\2\u0130\u012a\3\2\2\2\u0130\u012e\3\2\2\2\u0131\u0132\3\2\2\2\u0132"+
		"\u0133\7\r\2\2\u0133\u0134\5Z.\2\u0134\u0135\7\16\2\2\u0135\u013b\3\2"+
		"\2\2\u0136\u0137\5@!\2\u0137\u0138\7\7\2\2\u0138\u0139\5\32\16\2\u0139"+
		"\u013b\3\2\2\2\u013a\u0106\3\2\2\2\u013a\u010a\3\2\2\2\u013a\u0118\3\2"+
		"\2\2\u013a\u0127\3\2\2\2\u013a\u0136\3\2\2\2\u013b?\3\2\2\2\u013c\u013d"+
		"\7\24\2\2\u013dA\3\2\2\2\u013e\u0143\7\24\2\2\u013f\u0140\7\22\2\2\u0140"+
		"\u0142\7\24\2\2\u0141\u013f\3\2\2\2\u0142\u0145\3\2\2\2\u0143\u0141\3"+
		"\2\2\2\u0143\u0144\3\2\2\2\u0144C\3\2\2\2\u0145\u0143\3\2\2\2\u0146\u0147"+
		"\5@!\2\u0147E\3\2\2\2\u0148\u0149\5B\"\2\u0149G\3\2\2\2\u014a\u014e\5"+
		"P)\2\u014b\u014e\5`\61\2\u014c\u014e\5J&\2\u014d\u014a\3\2\2\2\u014d\u014b"+
		"\3\2\2\2\u014d\u014c\3\2\2\2\u014eI\3\2\2\2\u014f\u0152\5D#\2\u0150\u0152"+
		"\5L\'\2\u0151\u014f\3\2\2\2\u0151\u0150\3\2\2\2\u0152K\3\2\2\2\u0153\u0154"+
		"\7\13\2\2\u0154\u0155\5> \2\u0155\u0156\7\f\2\2\u0156M\3\2\2\2\u0157\u0158"+
		"\5J&\2\u0158\u0159\7\6\2\2\u0159\u015a\7\24\2\2\u015aO\3\2\2\2\u015b\u0165"+
		"\5b\62\2\u015c\u0165\5f\64\2\u015d\u0165\5h\65\2\u015e\u0165\5d\63\2\u015f"+
		"\u0165\5j\66\2\u0160\u0165\5l\67\2\u0161\u0165\5Z.\2\u0162\u0165\5R*\2"+
		"\u0163\u0165\5N(\2\u0164\u015b\3\2\2\2\u0164\u015c\3\2\2\2\u0164\u015d"+
		"\3\2\2\2\u0164\u015e\3\2\2\2\u0164\u015f\3\2\2\2\u0164\u0160\3\2\2\2\u0164"+
		"\u0161\3\2\2\2\u0164\u0162\3\2\2\2\u0164\u0163\3\2\2\2\u0165Q\3\2\2\2"+
		"\u0166\u0167\7\25\2\2\u0167\u016c\5T+\2\u0168\u0169\7\21\2\2\u0169\u016b"+
		"\5T+\2\u016a\u0168\3\2\2\2\u016b\u016e\3\2\2\2\u016c\u016a\3\2\2\2\u016c"+
		"\u016d\3\2\2\2\u016d\u016f\3\2\2\2\u016e\u016c\3\2\2\2\u016f\u0170\7\f"+
		"\2\2\u0170S\3\2\2\2\u0171\u0174\5V,\2\u0172\u0174\5X-\2\u0173\u0171\3"+
		"\2\2\2\u0173\u0172\3\2\2\2\u0174U\3\2\2\2\u0175\u0176\7\26\2\2\u0176W"+
		"\3\2\2\2\u0177\u0178\7\27\2\2\u0178Y\3\2\2\2\u0179\u017e\7\37\2\2\u017a"+
		"\u017d\5\\/\2\u017b\u017d\5^\60\2\u017c\u017a\3\2\2\2\u017c\u017b\3\2"+
		"\2\2\u017d\u0180\3\2\2\2\u017e\u017c\3\2\2\2\u017e\u017f\3\2\2\2\u017f"+
		"\u0181\3\2\2\2\u0180\u017e\3\2\2\2\u0181\u0182\7-\2\2\u0182[\3\2\2\2\u0183"+
		"\u018c\7%\2\2\u0184\u018c\7+\2\2\u0185\u018c\7(\2\2\u0186\u018c\7\'\2"+
		"\2\u0187\u018c\7)\2\2\u0188\u018c\7*\2\2\u0189\u018c\7&\2\2\u018a\u018c"+
		"\7$\2\2\u018b\u0183\3\2\2\2\u018b\u0184\3\2\2\2\u018b\u0185\3\2\2\2\u018b"+
		"\u0186\3\2\2\2\u018b\u0187\3\2\2\2\u018b\u0188\3\2\2\2\u018b\u0189\3\2"+
		"\2\2\u018b\u018a\3\2\2\2\u018c]\3\2\2\2\u018d\u018e\7,\2\2\u018e_\3\2"+
		"\2\2\u018f\u0190\7\4\2\2\u0190a\3\2\2\2\u0191\u0192\7\3\2\2\u0192c\3\2"+
		"\2\2\u0193\u0194\7\30\2\2\u0194e\3\2\2\2\u0195\u0196\7\31\2\2\u0196g\3"+
		"\2\2\2\u0197\u0198\7\32\2\2\u0198i\3\2\2\2\u0199\u019c\7\36\2\2\u019a"+
		"\u019c\7\35\2\2\u019b\u0199\3\2\2\2\u019b\u019a\3\2\2\2\u019ck\3\2\2\2"+
		"\u019d\u01a0\7\34\2\2\u019e\u01a0\7\33\2\2\u019f\u019d\3\2\2\2\u019f\u019e"+
		"\3\2\2\2\u01a0m\3\2\2\2\"t|\u0083\u008a\u0098\u009b\u00a5\u00a8\u00b6"+
		"\u00b9\u00c1\u00c6\u00d3\u00d6\u00e2\u00f9\u00fc\u0113\u0121\u0130\u013a"+
		"\u0143\u014d\u0151\u0164\u016c\u0173\u017c\u017e\u018b\u019b\u019f";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}