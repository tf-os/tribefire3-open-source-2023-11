// ============================================================================
// Braintribe IT-Technologies GmbH - www.braintribe.com
// Copyright Braintribe-IT Technologies GmbH, Austria, 2002-2015 - All Rights Reserved
// It is strictly forbidden to copy, modify, distribute or use this code without written permission
// To this file the Braintribe License Agreement applies.
// ============================================================================
parser grammar GmmlParser;

options {
	tokenVocab = GmmlLexer;
}

@header {
package com.braintribe.model.processing.manipulation.parser.impl.autogenerated;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// root rule

blockSequence:      manipulationBlocks EOF;
block:              statement* EOF;
manipulationBlocks: manipulationBlock*;
manipulationBlock:  LCB statement* RCB;
statement:          variableStatement | manipulation;
variableStatement:  variableAssignment;

//------------- Collection Values --------

listElement:          value;
setElement:           value;
listValue:            LSB (listElement (COMMA listElement)*)? RSB;
setValue:             LB (setElement (COMMA setElement)*)? RB;
mapEntry:             value Colon value;
mapValue:             LCB (mapEntry (COMMA mapEntry)*)?	RCB;
assignableValue:      value | listValue | setValue | mapValue;

//------------- Collection Delta --------
collectionDeltaValue: singleDeltaValue | setDeltaValue | mapDeltaValue;
singleDeltaValue:     value;
listDeltaValue:       ; // TODO implement later
setDeltaValue:        setValue;
mapDeltaValue:        mapValue;

//---------------- manipulations

manipulation:
    propertyManipulation
  | deleteManipulation
  | customManipulation
;

propertyManipulation:   propertyOwner? Dot StandardIdentifier manipulationOperation;
propertyOwner:          variableValue;
manipulationOperation:  changeValue | add | remove | clear;
changeValue:            EQ assignableValue;
add:                    PLUS collectionDeltaValue;
remove:                 MINUS collectionDeltaValue;
clear:                  MINUS_MINUS;
deleteManipulation:     MINUS variableOrAssignmentValue;
customManipulation:     customInstance LCB (propertyEntry (COMMA propertyEntry)*)? RCB;
customInstance:         fullyQualifiedIdentifier;
propertyEntry:          StandardIdentifier Colon assignableValue;

//----------- Variables --------------

variableAssignment:
	  variable EQ qualifiedType #qualifiedTypeAssignment
	| variable EQ (variableValue | LB variableAssignment RB | EXCLAMATION qualifiedType) LB RB # instanceCreation
	| variable EQ (variableValue | LB variableAssignment RB | EXCLAMATION qualifiedType) LB stringValue RB #instanceLookup
	| variable EQ (variableValue | LB variableAssignment RB | EXCLAMATION qualifiedType) LSB stringValue RSB #instanceAcquire
	| variable EQ assignableValue #valueAssignment 
;

variable:                 StandardIdentifier;
fullyQualifiedIdentifier: StandardIdentifier (Dot StandardIdentifier)*;
variableValue:            variable;
qualifiedType:            fullyQualifiedIdentifier; // For Manipulator: fqIdentifier is String, fqType is GenericModelType 

value:
	  literalValue
	| nullValue
	| variableOrAssignmentValue
;

variableOrAssignmentValue:
	  variableValue
	| variableAssignmentValue
;

variableAssignmentValue: LB variableAssignment RB;

//---------------------Enum------------------------------

enumValue: variableOrAssignmentValue Colon_Colon StandardIdentifier;

//--------------------Literal Values----------------------

literalValue:
	  booleanValue
	| floatValue
	| doubleValue
	| decimalValue
	| integerValue
	| longValue
	| stringValue
	| dateValue
	| enumValue
;

//----------------------Date----------------------------

dateValue: DateFunction calendarOffsetValue (COMMA calendarOffsetValue)* RB;

calendarOffsetValue: dateOffset | timeZoneOffset;
dateOffset:          DateOffset;
timeZoneOffset:      TimeZoneOffset;

// ---------------------String--------------------------

stringValue: StringOpen (escape | plainContent)* StringClose;

escape:
	  EscB # EscB
	| EscBS # EscBS
	| EscF # EscF
	| EscN # EscN
	| EscR # EscR
	| EscSQ # EscSQ
	| EscT # EscT
	| UnicodeEscape # UnicodeEscape
;

plainContent: PlainContent;

//-------------------Simple literals----------------------

nullValue:    Null;
booleanValue: Boolean;
decimalValue: DecimalLiteral;
floatValue:   FloatLiteral;
doubleValue:  DoubleLiteral;

integerValue:
	  IntegerBase16Literal # IntegerHexRepresentation
	| IntegerBase10Literal # IntegerDecimalRepresenation
;

longValue:
	  LongBase16Literal # LongHexRepresentation
	| LongBase10Literal # LongDecimalRepresenation
;
