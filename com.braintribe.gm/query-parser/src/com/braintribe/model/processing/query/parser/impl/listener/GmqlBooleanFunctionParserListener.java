// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
// 
// This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License along with this library; See http://www.gnu.org/licenses/.
// ============================================================================
package com.braintribe.model.processing.query.parser.impl.listener;

import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.AliasContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.BooleanFunctionContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.FullTextComparisonContext;
import com.braintribe.model.processing.query.parser.impl.context.ConditionCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.basetype.DefaultCustomContext;
import com.braintribe.model.query.Source;
import com.braintribe.model.query.conditions.Condition;

public abstract class GmqlBooleanFunctionParserListener extends GmqlContextFunctionParserListener {

	@Override
	public void exitBooleanFunction(BooleanFunctionContext ctx) {
		propagateChildResult(ctx);
	}

	@Override
	public void exitFullTextComparison(FullTextComparisonContext ctx) {
		AliasContext aliasContext = ctx.alias();
		String alias = null;
		if (aliasContext != null) {
			alias = ((DefaultCustomContext) takeValue(aliasContext).cast()).getReturnValue();
		}
		
		String stringValue = ((DefaultCustomContext) takeValue(ctx.stringValue()).cast()).getReturnValue();
		
		Source source = null;
		
		if (alias != null) {
			source = acquireSource(alias);
		}
		
		Condition fullTextComparison = $.fullTextComparison(source, stringValue);
		addToObjectsWithSourcesList(fullTextComparison);
		setValue(ctx, new ConditionCustomContext(fullTextComparison));
	}

}
