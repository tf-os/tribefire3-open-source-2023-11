// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
// 
// This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License along with this library; See http://www.gnu.org/licenses/.
// ============================================================================
package com.braintribe.model.processing.query.parser.impl.listener;

import com.braintribe.model.processing.query.parser.api.GmqlQueryParserException;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.BooleanFunctionComparisonContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.GeneralValueContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.PredicateComparisonContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.ValueContext;
import com.braintribe.model.processing.query.parser.impl.context.ConditionCustomContext;
import com.braintribe.model.query.conditions.ValueComparison;

public abstract class GmqlComparisonParserListener extends GmqlEntityEnumParserListener {

	@Override
	public void exitValue(ValueContext ctx) {
		propagateChildResult(ctx);
	}

	@Override
	public void enterGeneralValue(GeneralValueContext ctx) {
		if (isDefaultSourceEnabled()) {
			setCustomParsingExcpetion(new GmqlQueryParserException("EntityQuery and PropertyQuery are not allowed to have aggregate or join functions"));
			throw new RuntimeException();
		}
	}

	@Override
	public void exitGeneralValue(GeneralValueContext ctx) {
		propagateChildResult(ctx);
	}

	@Override
	public void exitPredicateComparison(PredicateComparisonContext ctx) {
		Object leftOperand = takeValue(ctx.leftOperand).getReturnValue();
		Object rightOperand = takeValue(ctx.rightOperand).getReturnValue();
		String operator = ctx.Operator().getText();
		ValueComparison valueComparison = $.comparison(leftOperand, rightOperand, operator);
		setValue(ctx, new ConditionCustomContext(valueComparison));
	}

	@Override
	public void exitBooleanFunctionComparison(BooleanFunctionComparisonContext ctx) {
		propagateChildResult(ctx);
	}
}
