// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
// 
// This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License along with this library; See http://www.gnu.org/licenses/.
// ============================================================================
package com.braintribe.model.processing.query.parser.impl.listener;

import java.util.ArrayList;
import java.util.List;

import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.GroupByContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.GroupByExpressionContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.HavingConditionContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.SelectQueryContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.SelectQueryFromContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.SelectQueryHeadContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.SelectQueryJoinContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.SelectQuerySelectionContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.SelectQuerySingleFromContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.SelectQuerySingleSelectionContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.SelectQueryStartContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.SelectQueryTailGroupByContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.SelectQueryTailHavingContext;
import com.braintribe.model.processing.query.parser.impl.context.GroupByCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.ObjectCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.QueryCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.ValueCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.basetype.DefaultCustomContext;
import com.braintribe.model.query.From;
import com.braintribe.model.query.GroupBy;
import com.braintribe.model.query.Query;
import com.braintribe.model.query.SelectQuery;
import com.braintribe.model.query.conditions.Condition;

public abstract class GmqlSelectQueryParserListener extends GmqlJoinParserListener {

	@Override
	public void enterSelectQuery(SelectQueryContext ctx) {
		SelectQuery query = $.selectQuery();
		setValue(ctx, new QueryCustomContext(query));
		enableQueryHeadParsing();
	}

	@Override
	public void exitSelectQuery(SelectQueryContext ctx) {
		takeValue(ctx.selectQueryStart());
		takeValue(ctx.queryTailWhere());
		takeValue(ctx.queryTailOrderBy());
		takeValue(ctx.queryTailPagination());
		takeValue(ctx.selectQueryTailGroupBy());
		takeValue(ctx.selectQueryTailHaving());
	}

	@Override
	public void exitSelectQueryStart(SelectQueryStartContext ctx) {
		takeValue(ctx.selectQueryHead());
		takeValue(ctx.selectQueryFrom());
		takeValue(ctx.selectQueryJoin());
		disableQueryHeadParsing();
		// to avoid default rule handling to fire
		setValue(ctx, new DefaultCustomContext(""));
	}

	@Override
	public void exitSelectQueryHead(SelectQueryHeadContext ctx) {
		Query query = ((QueryCustomContext) getValue(ctx.getParent().getParent()).cast()).getReturnValue();
		takeValue(ctx.selectQuerySelection());
		if (ctx.Distinct() != null) {
			query.setDistinct(true);
		}
		// to avoid default rule handling to fire
		setValue(ctx, new DefaultCustomContext(""));
	}

	@Override
	public void exitSelectQuerySelection(SelectQuerySelectionContext ctx) {
		List<Object> querySelections = new ArrayList<Object>();

		Query query = ((QueryCustomContext) getValue(ctx.getParent().getParent().getParent()).cast()).getReturnValue();
		SelectQuery selectQuery = (SelectQuery) query;

		for (SelectQuerySingleSelectionContext currentCtx : ctx.selectQuerySingleSelection()) {
			querySelections.add(takeValue(currentCtx).getReturnValue());
		}
		if (!querySelections.isEmpty()) {
			selectQuery.setSelections(querySelections);
		}
		// to avoid default rule handling to fire
		setValue(ctx, new DefaultCustomContext(""));
	}

	@Override
	public void exitSelectQuerySingleSelection(SelectQuerySingleSelectionContext ctx) {
		propagateChildResult(ctx);
	}

	@Override
	public void exitSelectQueryFrom(SelectQueryFromContext ctx) {
		List<From> fromList = new ArrayList<From>();

		Query query = ((QueryCustomContext) getValue(ctx.getParent().getParent()).cast()).getReturnValue();
		SelectQuery selectQuery = (SelectQuery) query;

		for (SelectQuerySingleFromContext currentCtx : ctx.selectQuerySingleFrom()) {
			fromList.add((From) takeValue(currentCtx).getReturnValue());
		}
		selectQuery.setFroms(fromList);
		// to avoid default rule handling to fire
		setValue(ctx, new DefaultCustomContext(""));
	}

	@Override
	public void exitSelectQuerySingleFrom(SelectQuerySingleFromContext ctx) {
		String signature = ((DefaultCustomContext) takeValue(ctx.identifier()).cast()).getReturnValue();
		String alias = null;
		if (ctx.alias() != null) {
			alias = ((DefaultCustomContext) takeValue(ctx.alias()).cast()).getReturnValue();
		} else {
			if (signature.contains(".")) {
				alias = getImplicitAlias(signature);
			} else {
				alias = signature;
			}
		}
		From from = $.from(signature);
		registerSource(alias, from);
		setValue(ctx, new ObjectCustomContext(from));
	}

	@Override
	public void exitSelectQueryJoin(SelectQueryJoinContext ctx) {
		// all joins are handled individually
		removeContextList(ctx.join());
		// to avoid default rule handling to fire
		setValue(ctx, new DefaultCustomContext(""));
	}

	@Override
	public void exitGroupByExpression(GroupByExpressionContext ctx) {
		propagateChildResult(ctx);
	}

	@Override
	public void exitGroupBy(GroupByContext ctx) {
		List<Object> operandList = new ArrayList<Object>();

		for (GroupByExpressionContext currentCtx : ctx.groupByExpression()) {
			operandList.add(takeValue(currentCtx).getReturnValue());
		}

		GroupBy groupBy = $.groupBy(operandList);
		setValue(ctx, new GroupByCustomContext(groupBy));
	}

	@Override
	public void exitHavingCondition(HavingConditionContext ctx) {
		setValue(ctx, takeValue(ctx.booleanValueExpression()));
	}

	@Override
	public void exitSelectQueryTailHaving(SelectQueryTailHavingContext ctx) {
		SelectQuery query = (SelectQuery) ((QueryCustomContext) getValue(ctx.getParent()).cast()).getReturnValue();
		Object condition = null;
		if (ctx.havingCondition() != null) {
			condition = ((ValueCustomContext<?>) takeValue(ctx.havingCondition()).cast()).getReturnValue();
		}
		query.setHaving((Condition)condition);
		setValue(ctx, new DefaultCustomContext(""));
	}
	
	@Override
	public void exitSelectQueryTailGroupBy(SelectQueryTailGroupByContext ctx) {
		SelectQuery query = (SelectQuery) ((QueryCustomContext) getValue(ctx.getParent()).cast()).getReturnValue();
		GroupBy groupBy = ((GroupByCustomContext) takeValue(ctx.groupBy()).cast()).getReturnValue();
		query.setGroupBy(groupBy);
		setValue(ctx, new DefaultCustomContext(""));
	}

}
