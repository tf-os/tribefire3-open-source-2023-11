// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
// 
// This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License along with this library; See http://www.gnu.org/licenses/.
// ============================================================================
package com.braintribe.model.processing.query.parser.impl.listener;

import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.AggregateAvgContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.AggregateCountContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.AggregateFunctionContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.AggregateMaxContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.AggregateMinContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.AggregateSumContext;
import com.braintribe.model.processing.query.parser.impl.context.ObjectCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.basetype.BooleanCustomContext;

public abstract class GmqlAggregateFunctionParserListener extends GmqlSourcePropertyParserListener {

	@Override
	public void exitAggregateFunction(AggregateFunctionContext ctx) {
		propagateChildResult(ctx);
	}

	@Override
	public void exitAggregateAvg(AggregateAvgContext ctx) {
		Object sourceProperty = ((ObjectCustomContext) takeValue(ctx.sourceProperty()).cast()).getReturnValue();
		setValue(ctx, new ObjectCustomContext($.aggregateAvg(sourceProperty)));
	}

	@Override
	public void exitAggregateMax(AggregateMaxContext ctx) {
		Object sourceProperty = ((ObjectCustomContext) takeValue(ctx.sourceProperty()).cast()).getReturnValue();
		setValue(ctx, new ObjectCustomContext($.aggregateMax(sourceProperty)));
	}

	@Override
	public void exitAggregateMin(AggregateMinContext ctx) {
		Object sourceProperty = ((ObjectCustomContext) takeValue(ctx.sourceProperty()).cast()).getReturnValue();
		setValue(ctx, new ObjectCustomContext($.aggregateMin(sourceProperty)));
	}

	@Override
	public void exitAggregateSum(AggregateSumContext ctx) {
		Object sourceProperty = ((ObjectCustomContext) takeValue(ctx.sourceProperty()).cast()).getReturnValue();
		setValue(ctx, new ObjectCustomContext($.aggregateSum(sourceProperty)));
	}

	@Override
	public void exitAggregateCount(AggregateCountContext ctx) {
		Object sourceProperty = ((ObjectCustomContext) takeValue(ctx.sourceProperty()).cast()).getReturnValue();
		boolean distinct = false;
		if (ctx.booleanValue() != null) {
			distinct = ((BooleanCustomContext) takeValue(ctx.booleanValue()).cast()).getReturnValue();
		}
		setValue(ctx, new ObjectCustomContext($.aggregateCount(sourceProperty, distinct)));
	}
}
