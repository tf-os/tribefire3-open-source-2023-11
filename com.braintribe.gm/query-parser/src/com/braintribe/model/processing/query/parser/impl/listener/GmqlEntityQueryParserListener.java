// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
// 
// This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License along with this library; See http://www.gnu.org/licenses/.
// ============================================================================
package com.braintribe.model.processing.query.parser.impl.listener;

import com.braintribe.model.processing.query.parser.impl.DefaultSource;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.EntityQueryContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.EntityQueryHeadContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.EntityQueryStartContext;
import com.braintribe.model.processing.query.parser.impl.context.QueryCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.basetype.DefaultCustomContext;
import com.braintribe.model.query.EntityQuery;
import com.braintribe.model.query.Source;

public abstract class GmqlEntityQueryParserListener extends GmqlQueryParserListener {

	@Override
	public void enterEntityQuery(EntityQueryContext ctx) {
		EntityQuery query = $.entityQuery();
		setValue(ctx, new QueryCustomContext(query));
		enableQueryHeadParsing();
		enableDefaultSource();
	}

	@Override
	public void exitEntityQuery(EntityQueryContext ctx) {
		takeValue(ctx.entityQueryStart());
		takeValue(ctx.queryTailWhere());
		takeValue(ctx.queryTailOrderBy());
		takeValue(ctx.queryTailPagination());
		disableDefaultSource();

	}

	@Override
	public void exitEntityQueryStart(EntityQueryStartContext ctx) {
		EntityQuery query = (EntityQuery) ((QueryCustomContext) getValue(ctx.getParent()).cast()).getReturnValue();

		if (ctx.Distinct() != null) {
			query.setDistinct(true);
		}
		String entityTypeSignature = ((DefaultCustomContext) takeValue(ctx.entityQueryHead()).cast()).getReturnValue();
		query.setEntityTypeSignature(entityTypeSignature);

		// to avoid default rule handling to fire
		setValue(ctx, new DefaultCustomContext(""));
	}

	@Override
	public void exitEntityQueryHead(EntityQueryHeadContext ctx) {
		String entityTypeSignature = ((DefaultCustomContext) takeValue(ctx.identifier()).cast()).getReturnValue();

		Source source = DefaultSource.T.create();
		String alias = null;
		if (ctx.alias() != null) {
			alias = ((DefaultCustomContext) takeValue(ctx.alias()).cast()).getReturnValue();
		}
		registerSource( alias,  source);
		disableQueryHeadParsing();
		setValue(ctx, new DefaultCustomContext(entityTypeSignature));
	}

}
