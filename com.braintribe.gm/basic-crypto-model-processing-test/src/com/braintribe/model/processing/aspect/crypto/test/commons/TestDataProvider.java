// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
// 
// This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License along with this library; See http://www.gnu.org/licenses/.
// ============================================================================
package com.braintribe.model.processing.aspect.crypto.test.commons;

import java.util.HashMap;
import java.util.Map;

/**
 * <p>
 * This class code is automatically generated by TestDataGenerator.
 *
 */
public class TestDataProvider {
	
	// ############################################
	// # .. automatically generated properties .. #
	// ############################################

	public static final byte[] inputA = new byte[] {84, 69, 83, 84, 45, 73, 78, 80, 85, 84};
	public static final byte[] inputB = new byte[] {84, 69, 83, 84, 45, 73, 78, 80, 85, 84, 46};
	public static final String inputAString = "TEST-INPUT";
	public static final String inputBString = "TEST-INPUT.";
	public static final String salt = "SALT";
	public static final Map<String, String> symmetricKeys = new HashMap<>();
	public static final Map<String, String> asymmetricKeys = new HashMap<>();
	public static final Map<String, Object> testValues = new HashMap<>();

	// ##############################################
	// # .. //automatically generated properties .. #
	// ##############################################
	
	static {

		// ############################################
		// # .. automatically generated data ........ #
		// ############################################

		// symmetric key definitions

		symmetricKeys.put("DES|hex", "401a761a137543d9");
		symmetricKeys.put("DES|base64", "QBp2GhN1Q9k=");
		symmetricKeys.put("DESede|hex", "5e923e97341f85ab67a7d520011a04087f5454899de9b3fd");
		symmetricKeys.put("DESede|base64", "XpI+lzQfhatnp9UgARoECH9UVImd6bP9");
		symmetricKeys.put("AES|hex", "029a1fb44c68755249486d5bd1b2aa11");
		symmetricKeys.put("AES|base64", "ApoftExodVJJSG1b0bKqEQ==");

		// asymmetric key definitions

		asymmetricKeys.put("RSA|publ|hex", "30820122300d06092a864886f70d01010105000382010f003082010a02820101008a34b2e03a529690ec3a9c38bae24e3117e9d9d54c945f55fde37bcbf6da5629795ed6969c56256a8df2b6cfc5617001be04b5310e703e5fe9a3475444b930af697f1a111a1d56b4bf246cdf23ccd0fa3617d52d073498b1b2d495cebfe5f313e12060313ba543f7de6d8519ff789d519915272cd6cb1a9f4bf685d2653fd771edf433ee156ac014632b1ffc87fae771604e6cb11dd3b6604b1605e43d988b6e470cebf0c8665c73e635cd4f3fe4ce5bbfd324bcda7fbc9b7b5a5f8d411e09a4b1e1da04129e0db6bd93c9d30c51e964d8e6dff55a6c486df74305c4d94c5742c9632a342c247cf0cf14b8d3d32eaf6222a38616050b796ce1b354cc7e3ba6290203010001");
		asymmetricKeys.put("RSA|priv|hex", "308204bd020100300d06092a864886f70d0101010500048204a7308204a302010002820101008a34b2e03a529690ec3a9c38bae24e3117e9d9d54c945f55fde37bcbf6da5629795ed6969c56256a8df2b6cfc5617001be04b5310e703e5fe9a3475444b930af697f1a111a1d56b4bf246cdf23ccd0fa3617d52d073498b1b2d495cebfe5f313e12060313ba543f7de6d8519ff789d519915272cd6cb1a9f4bf685d2653fd771edf433ee156ac014632b1ffc87fae771604e6cb11dd3b6604b1605e43d988b6e470cebf0c8665c73e635cd4f3fe4ce5bbfd324bcda7fbc9b7b5a5f8d411e09a4b1e1da04129e0db6bd93c9d30c51e964d8e6dff55a6c486df74305c4d94c5742c9632a342c247cf0cf14b8d3d32eaf6222a38616050b796ce1b354cc7e3ba62902030100010282010005078feeeb10705c4bcc823cea482c124b4d7e58edd58476ababa8a8ae8e198e9ed51db8136e6b242a9047a8de0502bf7d7bcc6041a7420dd981d0a9b76a89e40851d0d0088442d087183b420f9a778c7385808387fc9905f67d180a931f3a2e6205fc9a2e12809bb7a382b184838e2e1705170ce1b03882cd8fe624d6fc70c9adae45c351b87844f02d124ee8803a7ebf7d1319edcb712e20949106d3d0ca03e773fc95ac5677d8ff29c19edbad31335065aa9b02b7fa4d302aa66758489c947adb816ab0fd6bd51d3aac0d6f37be783929bff5dfa1b915799b767e106c7c3138ea8d0b1cda866a90317c322e8aedc7453629ea1fb3c5ebcbaf38507649711502818100e406b1494924de5c572e733a8a29d0d8a9cc9cdb1a32f8a85f49741d6f884bd02efd6d402dba6c92ebb68ad9873f71b046021fef33cdf7d70fe6f0aa61b5cc7988505e2b363b464a379a28ff61cded16fcd010fe35dbc5153c03af84f80bd4d32e6c7f968ad803e57dcd125a7a900995af837ce8212c9255607fe3a890154867028181009b292471f9b30b896a1ef88a4dc4beb08b2968e6203f4803f1176d065d9d6a5eede37b819942d56c84215ccc8683905a283df7503f01f2952416bd59ba98573de644ec355798e56bc3ee8acfaa639a6a7370199afbd1ce0842edbfeba101543473615d42f0dfecf591e4523ff2da14034cddcb896200dc9e7865c88c1729c2ef028180434fbe71d5c7ae642fd0246fb96d529b42b485f11fb0c03a63b679325f442aad0fd1fbb8204791d964ff83c966e551982972631ee779fb995eb65b80d04b2c4b0bf43d7820102b55a94836a5fca71f3fd3ed4fb6db0b3f085fa8eedd1fa3ce757094d2ad0bdb6c7b0841cb132e6eea856744375106c9f3808475fc2c3c2c2c2d0281800f15fcf927f2049923bc47260b51a9c8b87f1a37e5c2c159c0c32a52881f9a0c08cd2960fc69c71e79ea547f7e44a4705fa146be82a1c9d83e5e07a305c572160ea17ce5e2d276dbf77ce5fa32f2e43c9d64b4d8a0cb5160f440f17c1377719c77eb6b89eaa99afc7566e1a85e105e09c41b7c82ab08b26aa6021f719f7eebf9028181009647f07c23871c1b8c16872bfa24a4c5ec5710b43028705d40e5a72bf9dcd47403d166d7d8ec3bd75840061605e96f795f24bb55aaf42f51c97aa88bec84a5a3d32ef3c8bf0d153e59f8fe85f72760adb5ccc83979fc29241c55dcd59e98cd8cb6bfc61a3e4b6ce76b27b6871605c1f58270c6ad81afe1167a795b14eebfb996");
		asymmetricKeys.put("RSA|publ|base64", "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAijSy4DpSlpDsOpw4uuJOMRfp2dVMlF9V/eN7y/baVil5XtaWnFYlao3yts/FYXABvgS1MQ5wPl/po0dURLkwr2l/GhEaHVa0vyRs3yPM0Po2F9UtBzSYsbLUlc6/5fMT4SBgMTulQ/febYUZ/3idUZkVJyzWyxqfS/aF0mU/13Ht9DPuFWrAFGMrH/yH+udxYE5ssR3TtmBLFgXkPZiLbkcM6/DIZlxz5jXNTz/kzlu/0yS82n+8m3taX41BHgmkseHaBBKeDba9k8nTDFHpZNjm3/VabEht90MFxNlMV0LJYyo0LCR88M8UuNPTLq9iIqOGFgULeWzhs1TMfjumKQIDAQAB");
		asymmetricKeys.put("RSA|priv|base64", "MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCKNLLgOlKWkOw6nDi64k4xF+nZ1UyUX1X943vL9tpWKXle1pacViVqjfK2z8VhcAG+BLUxDnA+X+mjR1REuTCvaX8aERodVrS/JGzfI8zQ+jYX1S0HNJixstSVzr/l8xPhIGAxO6VD995thRn/eJ1RmRUnLNbLGp9L9oXSZT/Xce30M+4VasAUYysf/If653FgTmyxHdO2YEsWBeQ9mItuRwzr8MhmXHPmNc1PP+TOW7/TJLzaf7ybe1pfjUEeCaSx4doEEp4Ntr2TydMMUelk2Obf9VpsSG33QwXE2UxXQsljKjQsJHzwzxS409Mur2Iio4YWBQt5bOGzVMx+O6YpAgMBAAECggEABQeP7usQcFxLzII86kgsEktNfljt1YR2q6uoqK6OGY6e1R24E25rJCqQR6jeBQK/fXvMYEGnQg3ZgdCpt2qJ5AhR0NAIhELQhxg7Qg+ad4xzhYCDh/yZBfZ9GAqTHzouYgX8mi4SgJu3o4KxhIOOLhcFFwzhsDiCzY/mJNb8cMmtrkXDUbh4RPAtEk7ogDp+v30TGe3LcS4glJEG09DKA+dz/JWsVnfY/ynBntutMTNQZaqbArf6TTAqpmdYSJyUetuBarD9a9UdOqwNbze+eDkpv/XfobkVeZt2fhBsfDE46o0LHNqGapAxfDIuiu3HRTYp6h+zxevLrzhQdklxFQKBgQDkBrFJSSTeXFcuczqKKdDYqcyc2xoy+KhfSXQdb4hL0C79bUAtumyS67aK2Yc/cbBGAh/vM8331w/m8Kphtcx5iFBeKzY7Rko3mij/Yc3tFvzQEP4128UVPAOvhPgL1NMubH+WitgD5X3NElp6kAmVr4N86CEsklVgf+OokBVIZwKBgQCbKSRx+bMLiWoe+IpNxL6wiylo5iA/SAPxF20GXZ1qXu3je4GZQtVshCFczIaDkFooPfdQPwHylSQWvVm6mFc95kTsNVeY5WvD7orPqmOaanNwGZr70c4IQu2/66EBVDRzYV1C8N/s9ZHkUj/y2hQDTN3LiWIA3J54ZciMFynC7wKBgENPvnHVx65kL9Akb7ltUptCtIXxH7DAOmO2eTJfRCqtD9H7uCBHkdlk/4PJZuVRmClyYx7nefuZXrZbgNBLLEsL9D14IBArValINqX8px8/0+1PttsLPwhfqO7dH6POdXCU0q0L22x7CEHLEy5u6oVnRDdRBsnzgIR1/Cw8LCwtAoGADxX8+SfyBJkjvEcmC1GpyLh/GjflwsFZwMMqUogfmgwIzSlg/GnHHnnqVH9+RKRwX6FGvoKhydg+XgejBcVyFg6hfOXi0nbb93zl+jLy5DydZLTYoMtRYPRA8XwTd3Gcd+trieqpmvx1ZuGoXhBeCcQbfIKrCLJqpgIfcZ9+6/kCgYEAlkfwfCOHHBuMFocr+iSkxexXELQwKHBdQOWnK/nc1HQD0WbX2Ow711hABhYF6W95XyS7Var0L1HJeqiL7ISlo9Mu88i/DRU+Wfj+hfcnYK21zMg5efwpJBxV3NWemM2Mtr/GGj5LbOdrJ7aHFgXB9YJwxq2Br+EWenlbFO6/uZY=");

		// hashing test data

		testValues.put("MD5|true|hex|TEST-INPUT", "f69948d2a41006117f640a9c106b744f");
		testValues.put("MD5|true|base64|TEST-INPUT", "9plI0qQQBhF/ZAqcEGt0Tw==");
		testValues.put("MD5|true|bytes|TEST-INPUT", new byte[] {-10, -103, 72, -46, -92, 16, 6, 17, 127, 100, 10, -100, 16, 107, 116, 79});
		testValues.put("MD5|false|hex|TEST-INPUT", "2d4f54b3fed87a73754f7516a9f6d746");
		testValues.put("MD5|false|base64|TEST-INPUT", "LU9Us/7YenN1T3UWqfbXRg==");
		testValues.put("MD5|false|bytes|TEST-INPUT", new byte[] {45, 79, 84, -77, -2, -40, 122, 115, 117, 79, 117, 22, -87, -10, -41, 70});
		testValues.put("MD5|true|hex|TEST-INPUT.", "2f1654fdc515499b8595ea2ca198247f");
		testValues.put("MD5|true|base64|TEST-INPUT.", "LxZU/cUVSZuFleosoZgkfw==");
		testValues.put("MD5|true|bytes|TEST-INPUT.", new byte[] {47, 22, 84, -3, -59, 21, 73, -101, -123, -107, -22, 44, -95, -104, 36, 127});
		testValues.put("MD5|false|hex|TEST-INPUT.", "95de9bbee0616b6101230b5a5cb0f1ba");
		testValues.put("MD5|false|base64|TEST-INPUT.", "ld6bvuBha2EBIwtaXLDxug==");
		testValues.put("MD5|false|bytes|TEST-INPUT.", new byte[] {-107, -34, -101, -66, -32, 97, 107, 97, 1, 35, 11, 90, 92, -80, -15, -70});
		testValues.put("SHA-1|true|hex|TEST-INPUT", "dc59042c33d3c829f6fe231cf366c731f4ca7d43");
		testValues.put("SHA-1|true|base64|TEST-INPUT", "3FkELDPTyCn2/iMc82bHMfTKfUM=");
		testValues.put("SHA-1|true|bytes|TEST-INPUT", new byte[] {-36, 89, 4, 44, 51, -45, -56, 41, -10, -2, 35, 28, -13, 102, -57, 49, -12, -54, 125, 67});
		testValues.put("SHA-1|false|hex|TEST-INPUT", "92e6ee89266ffd315eb4935f62f5e1eac8858295");
		testValues.put("SHA-1|false|base64|TEST-INPUT", "kubuiSZv/TFetJNfYvXh6siFgpU=");
		testValues.put("SHA-1|false|bytes|TEST-INPUT", new byte[] {-110, -26, -18, -119, 38, 111, -3, 49, 94, -76, -109, 95, 98, -11, -31, -22, -56, -123, -126, -107});
		testValues.put("SHA-1|true|hex|TEST-INPUT.", "fa083d20d7e8915e72ec591bf0ad6e754cbbbe31");
		testValues.put("SHA-1|true|base64|TEST-INPUT.", "+gg9INfokV5y7Fkb8K1udUy7vjE=");
		testValues.put("SHA-1|true|bytes|TEST-INPUT.", new byte[] {-6, 8, 61, 32, -41, -24, -111, 94, 114, -20, 89, 27, -16, -83, 110, 117, 76, -69, -66, 49});
		testValues.put("SHA-1|false|hex|TEST-INPUT.", "769ebe02c330a12b7b0b26a8deda9d6d1b268ed8");
		testValues.put("SHA-1|false|base64|TEST-INPUT.", "dp6+AsMwoSt7Cyao3tqdbRsmjtg=");
		testValues.put("SHA-1|false|bytes|TEST-INPUT.", new byte[] {118, -98, -66, 2, -61, 48, -95, 43, 123, 11, 38, -88, -34, -38, -99, 109, 27, 38, -114, -40});
		testValues.put("SHA-256|true|hex|TEST-INPUT", "e2fa941c135a70d4a3d00f110ed392e572a4e4e580705f393f026d10460d4dfd");
		testValues.put("SHA-256|true|base64|TEST-INPUT", "4vqUHBNacNSj0A8RDtOS5XKk5OWAcF85PwJtEEYNTf0=");
		testValues.put("SHA-256|true|bytes|TEST-INPUT", new byte[] {-30, -6, -108, 28, 19, 90, 112, -44, -93, -48, 15, 17, 14, -45, -110, -27, 114, -92, -28, -27, -128, 112, 95, 57, 63, 2, 109, 16, 70, 13, 77, -3});
		testValues.put("SHA-256|false|hex|TEST-INPUT", "1267afbe8e0ef06d0f44b2185c93f8a23e6af7a76900553268178d7acfe69fa9");
		testValues.put("SHA-256|false|base64|TEST-INPUT", "Emevvo4O8G0PRLIYXJP4oj5q96dpAFUyaBeNes/mn6k=");
		testValues.put("SHA-256|false|bytes|TEST-INPUT", new byte[] {18, 103, -81, -66, -114, 14, -16, 109, 15, 68, -78, 24, 92, -109, -8, -94, 62, 106, -9, -89, 105, 0, 85, 50, 104, 23, -115, 122, -49, -26, -97, -87});
		testValues.put("SHA-256|true|hex|TEST-INPUT.", "fb1a235f84d9071c76c2c33ae531831b6256d70b1911170145326785cc9135e4");
		testValues.put("SHA-256|true|base64|TEST-INPUT.", "+xojX4TZBxx2wsM65TGDG2JW1wsZERcBRTJnhcyRNeQ=");
		testValues.put("SHA-256|true|bytes|TEST-INPUT.", new byte[] {-5, 26, 35, 95, -124, -39, 7, 28, 118, -62, -61, 58, -27, 49, -125, 27, 98, 86, -41, 11, 25, 17, 23, 1, 69, 50, 103, -123, -52, -111, 53, -28});
		testValues.put("SHA-256|false|hex|TEST-INPUT.", "4651677f19b37ab0a2fd6b60236869ab4e6c6597193aa99e2e0e445d19e096e7");
		testValues.put("SHA-256|false|base64|TEST-INPUT.", "RlFnfxmzerCi/WtgI2hpq05sZZcZOqmeLg5EXRngluc=");
		testValues.put("SHA-256|false|bytes|TEST-INPUT.", new byte[] {70, 81, 103, 127, 25, -77, 122, -80, -94, -3, 107, 96, 35, 104, 105, -85, 78, 108, 101, -105, 25, 58, -87, -98, 46, 14, 68, 93, 25, -32, -106, -25});

		// symmetric encryption test data

		testValues.put("DES|false|hex|TEST-INPUT", "94e3a76b99a9b17dd05e591be2c1bdc8");
		testValues.put("DES|false|base64|TEST-INPUT", "lOOna5mpsX3QXlkb4sG9yA==");
		testValues.put("DES|false|bytes|TEST-INPUT", new byte[] {-108, -29, -89, 107, -103, -87, -79, 125, -48, 94, 89, 27, -30, -63, -67, -56});
		testValues.put("DES|false|hex|TEST-INPUT.", "94e3a76b99a9b17d978923888a7fe713");
		testValues.put("DES|false|base64|TEST-INPUT.", "lOOna5mpsX2XiSOIin/nEw==");
		testValues.put("DES|false|bytes|TEST-INPUT.", new byte[] {-108, -29, -89, 107, -103, -87, -79, 125, -105, -119, 35, -120, -118, 127, -25, 19});
		testValues.put("DESede|false|hex|TEST-INPUT", "377687cda5dc682082da7ea0b726825c");
		testValues.put("DESede|false|base64|TEST-INPUT", "N3aHzaXcaCCC2n6gtyaCXA==");
		testValues.put("DESede|false|bytes|TEST-INPUT", new byte[] {55, 118, -121, -51, -91, -36, 104, 32, -126, -38, 126, -96, -73, 38, -126, 92});
		testValues.put("DESede|false|hex|TEST-INPUT.", "377687cda5dc6820bc59a0d6da63e8b7");
		testValues.put("DESede|false|base64|TEST-INPUT.", "N3aHzaXcaCC8WaDW2mPotw==");
		testValues.put("DESede|false|bytes|TEST-INPUT.", new byte[] {55, 118, -121, -51, -91, -36, 104, 32, -68, 89, -96, -42, -38, 99, -24, -73});
		testValues.put("AES|false|hex|TEST-INPUT", "2f9e0bddd3704e1f2f7541b1084efcff");
		testValues.put("AES|false|base64|TEST-INPUT", "L54L3dNwTh8vdUGxCE78/w==");
		testValues.put("AES|false|bytes|TEST-INPUT", new byte[] {47, -98, 11, -35, -45, 112, 78, 31, 47, 117, 65, -79, 8, 78, -4, -1});
		testValues.put("AES|false|hex|TEST-INPUT.", "0e699c5c72c5d7804163bb557effd34c");
		testValues.put("AES|false|base64|TEST-INPUT.", "DmmcXHLF14BBY7tVfv/TTA==");
		testValues.put("AES|false|bytes|TEST-INPUT.", new byte[] {14, 105, -100, 92, 114, -59, -41, -128, 65, 99, -69, 85, 126, -1, -45, 76});

		// asymmetric encryption test data

		testValues.put("RSA|false|hex|TEST-INPUT", "2f78416f4b5428d6deafb9ca095931e33cd6482d157086a4e66876e14ddba60961f0d9b0b9c1ecc9f6c76bb5c70f4037ee28a59557c313fe7b22e9bf17a9160d7906cbc52d4cc56c7e36677efb73739d2c10f78d2d300b708753e439ee2a048ad4b22bd069d50835f5a8f8accb182f52f1281c1ffb778d8486484409ad3ec7037b126094ecfc41b0ad25583909d362d18c34ff095f3bde14166d1229af06203ad44418bbd5775cf8cc651e8743c7cfd8835e48032789e788daa91b539b953a742b66d57703b35bf67770e5f44c27089945f6302c320191909255fee4271f20a8e81379e010cf95cbbe61099e2e4340660cbf90e61adc250e2f06f300c8fb1ac9");
		testValues.put("RSA|false|base64|TEST-INPUT", "L3hBb0tUKNber7nKCVkx4zzWSC0VcIak5mh24U3bpglh8NmwucHsyfbHa7XHD0A37iillVfDE/57Ium/F6kWDXkGy8UtTMVsfjZnfvtzc50sEPeNLTALcIdT5DnuKgSK1LIr0GnVCDX1qPisyxgvUvEoHB/7d42EhkhECa0+xwN7EmCU7PxBsK0lWDkJ02LRjDT/CV873hQWbRIprwYgOtREGLvVd1z4zGUeh0PHz9iDXkgDJ4nniNqpG1OblTp0K2bVdwOzW/Z3cOX0TCcImUX2MCwyAZGQklX+5CcfIKjoE3ngEM+Vy75hCZ4uQ0BmDL+Q5hrcJQ4vBvMAyPsayQ==");
		testValues.put("RSA|false|bytes|TEST-INPUT", new byte[] {47, 120, 65, 111, 75, 84, 40, -42, -34, -81, -71, -54, 9, 89, 49, -29, 60, -42, 72, 45, 21, 112, -122, -92, -26, 104, 118, -31, 77, -37, -90, 9, 97, -16, -39, -80, -71, -63, -20, -55, -10, -57, 107, -75, -57, 15, 64, 55, -18, 40, -91, -107, 87, -61, 19, -2, 123, 34, -23, -65, 23, -87, 22, 13, 121, 6, -53, -59, 45, 76, -59, 108, 126, 54, 103, 126, -5, 115, 115, -99, 44, 16, -9, -115, 45, 48, 11, 112, -121, 83, -28, 57, -18, 42, 4, -118, -44, -78, 43, -48, 105, -43, 8, 53, -11, -88, -8, -84, -53, 24, 47, 82, -15, 40, 28, 31, -5, 119, -115, -124, -122, 72, 68, 9, -83, 62, -57, 3, 123, 18, 96, -108, -20, -4, 65, -80, -83, 37, 88, 57, 9, -45, 98, -47, -116, 52, -1, 9, 95, 59, -34, 20, 22, 109, 18, 41, -81, 6, 32, 58, -44, 68, 24, -69, -43, 119, 92, -8, -52, 101, 30, -121, 67, -57, -49, -40, -125, 94, 72, 3, 39, -119, -25, -120, -38, -87, 27, 83, -101, -107, 58, 116, 43, 102, -43, 119, 3, -77, 91, -10, 119, 112, -27, -12, 76, 39, 8, -103, 69, -10, 48, 44, 50, 1, -111, -112, -110, 85, -2, -28, 39, 31, 32, -88, -24, 19, 121, -32, 16, -49, -107, -53, -66, 97, 9, -98, 46, 67, 64, 102, 12, -65, -112, -26, 26, -36, 37, 14, 47, 6, -13, 0, -56, -5, 26, -55});
		testValues.put("RSA|false|hex|TEST-INPUT.", "5604da763de1663816620771ab46655fd2e70c4774bd952c583bd74353866217eb2886ebd53474dd78f25cd51a571e77614e2985fe6282eedb4dc0ac9b60c0c19363ea803d9bf47bcc5816aa6217034c772a775c2b7e7294306c1050fbd61e1997e1b73d1360e1e6e81fe53ef2ffd46b9b572442f732a3a760cbeda660eff11ae6fc35b31f434cd59b3842293eb80f48d87dde6154fdd3822c31e9bb3c7b41cf4d191b66f45848ceb0970794139bd45e06f7e4f93e5cd8460014b2a822f8099668c549757a95f49232c9e250edbd0f7f6d609b1adf36ef004f1ed97e63f2078df6de5907d380b21b01a0600a8be4c67e8787e5f5071e9376baab4d03df63e3c1");
		testValues.put("RSA|false|base64|TEST-INPUT.", "VgTadj3hZjgWYgdxq0ZlX9LnDEd0vZUsWDvXQ1OGYhfrKIbr1TR03XjyXNUaVx53YU4phf5igu7bTcCsm2DAwZNj6oA9m/R7zFgWqmIXA0x3KndcK35ylDBsEFD71h4Zl+G3PRNg4eboH+U+8v/Ua5tXJEL3MqOnYMvtpmDv8Rrm/DWzH0NM1Zs4Qik+uA9I2H3eYVT904IsMem7PHtBz00ZG2b0WEjOsJcHlBOb1F4G9+T5PlzYRgAUsqgi+AmWaMVJdXqV9JIyyeJQ7b0Pf21gmxrfNu8ATx7ZfmPyB4323lkH04CyGwGgYAqL5MZ+h4fl9Qcek3a6q00D32PjwQ==");
		testValues.put("RSA|false|bytes|TEST-INPUT.", new byte[] {86, 4, -38, 118, 61, -31, 102, 56, 22, 98, 7, 113, -85, 70, 101, 95, -46, -25, 12, 71, 116, -67, -107, 44, 88, 59, -41, 67, 83, -122, 98, 23, -21, 40, -122, -21, -43, 52, 116, -35, 120, -14, 92, -43, 26, 87, 30, 119, 97, 78, 41, -123, -2, 98, -126, -18, -37, 77, -64, -84, -101, 96, -64, -63, -109, 99, -22, -128, 61, -101, -12, 123, -52, 88, 22, -86, 98, 23, 3, 76, 119, 42, 119, 92, 43, 126, 114, -108, 48, 108, 16, 80, -5, -42, 30, 25, -105, -31, -73, 61, 19, 96, -31, -26, -24, 31, -27, 62, -14, -1, -44, 107, -101, 87, 36, 66, -9, 50, -93, -89, 96, -53, -19, -90, 96, -17, -15, 26, -26, -4, 53, -77, 31, 67, 76, -43, -101, 56, 66, 41, 62, -72, 15, 72, -40, 125, -34, 97, 84, -3, -45, -126, 44, 49, -23, -69, 60, 123, 65, -49, 77, 25, 27, 102, -12, 88, 72, -50, -80, -105, 7, -108, 19, -101, -44, 94, 6, -9, -28, -7, 62, 92, -40, 70, 0, 20, -78, -88, 34, -8, 9, -106, 104, -59, 73, 117, 122, -107, -12, -110, 50, -55, -30, 80, -19, -67, 15, 127, 109, 96, -101, 26, -33, 54, -17, 0, 79, 30, -39, 126, 99, -14, 7, -115, -10, -34, 89, 7, -45, -128, -78, 27, 1, -96, 96, 10, -117, -28, -58, 126, -121, -121, -27, -11, 7, 30, -109, 118, -70, -85, 77, 3, -33, 99, -29, -63});

		// ############################################
		// # .. //automatically generated data ...... #
		// ############################################

	}
	
}
