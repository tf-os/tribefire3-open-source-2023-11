<!--
 ============================================================================
 BRAINTRIBE TECHNOLOGY GMBH - www.braintribe.com
 Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022 - All Rights Reserved
 It is strictly forbidden to copy, modify, distribute or use this code without written permission
 To this file the Braintribe License Agreement applies.
 ============================================================================
--><project xmlns:bt="antlib:com.braintribe.build.ant.tasks" basedir="." default="install">

	<bt:import artifact="com.braintribe.devrock.ant:common-ant-script#1.0" useCase="DEVROCK"/>

	<property location="src" name="src"/>
	<property location="build" name="build"/>
	<property location="dist" name="dist"/>

	<target depends="common-init" name="init">
		<bt:pom file="pom.xml" id="maven.project"/>
		<bt:dependencies filesetId="compile.fileset" pathId="compile.classpath" useScope="compile">
			<pom refid="maven.project"/>
		</bt:dependencies>
		<bt:dependencies filesetId="runtime.fileset" pathId="runtime.classpath" useScope="runtime" solutionListStringProperty="runtime.solutions">
			<pom refid="maven.project"/>
		</bt:dependencies>
		<property name="versionedName" value="${maven.project.artifactId}-${maven.project.version}"/>
		<!-- Create time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
	</target>

	<target depends="init" description="compile the source " name="compile">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac debug="true" debuglevel="lines,source,vars" destdir="${build}" encoding="UTF-8" source="1.8" srcdir="${src}" target="1.8">
			<include name="**/*.java"/>
			<classpath refid="compile.classpath"/>
		</javac>
		<copy todir="${build}">
			<fileset dir="${src}">
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
	</target>

	<target depends="clean,compile, dist-jar-license" description="generate the distribution" name="dist">
		<mkdir dir="${dist}/application/lib"/>
		<jar jarfile="${dist}/application/lib/${versionedName}.jar">
			<fileset dir="${build}"/>
		</jar>
		<jar basedir="${src}" jarfile="${dist}/${versionedName}-sources.jar"/>

		<propertyregex property="packagedSolutions" input="${runtime.solutions}" regexp="," replace="&#10;" global="true" />
		<echo message="${maven.project.groupId}:${maven.project.artifactId}#${maven.project.version}&#10;" file="${dist}/application/packaged-solutions.txt"/>
		<echo append="true" message="${packagedSolutions}" file="${dist}/application/packaged-solutions.txt"/>
		<copy todir="${dist}/application/lib">
			<resources refid="runtime.fileset"/>
			<mapper type="flatten"/>
		</copy>

		<!-- patch jinni-update-support jar name to be version free -->
		<move todir="${dist}/application/lib" includeemptydirs="false">
			<fileset dir="${dist}/application/lib">
			<include name="jinni-update-support-*.jar"/>
			</fileset>
			<mapper type="glob" from="*" to="jinni-update-support.jar"/>
		</move>

		<fileset id="final-cp" dir="${dist}/application/lib"/>
		<pathconvert property="manifest-cp" refid="final-cp" pathsep=" ">
			<chainedmapper>
				<mapper type="flatten"/>
				<filtermapper>
					<replacestring from=" " to="%20"/>
				</filtermapper>
			</chainedmapper>
		</pathconvert>
		<jar destfile="${dist}/application/lib/launch.jar">
			<manifest>
				<attribute name="Main-Class" value="com.braintribe.tribefire.jinni.Jinni"/>
				<attribute name="Class-Path" value="${manifest-cp}"/>
			</manifest>
		</jar>


		<copy todir="${dist}/application/bin">
			<fileset dir="launch"/>
		</copy>
		<copy todir="${dist}/application/conf">
			<fileset dir="conf"/>
		</copy>
		<copy todir="${dist}/application/docker">
			<fileset dir="docker"/>
		</copy>

		<!-- Generate Jinni completion script -->
		<property environment="env" />
		<condition property="java.executable" value="${env.JAVA_HOME}${file.separator}bin${file.separator}java" else="java">
		  <isset property="env.JAVA_HOME" />
  	        </condition>
		<echo message="Generating completion script with java: ${java.executable}"/>
		<!-- We need to set the newenvironment attribute in order NOT to inherit other env vars when it's executed, especially in CI
		where in alpine image we have java related env vars (e.g. LD_LIBRARY_PATH=/opt/java/jdk8/lib/server:/opt/java/jdk8/lib:/opt/java/jdk8/../lib).
		This is important in CI because we compile with custom java version by setting the java.executable. -->
		<exec executable="${java.executable}" failonerror="true" newenvironment="true">
			<arg value="-Djinni.suppressDone=true"/>
			<arg value="-Djinni.installationDir=${dist}/application" />
			<arg value="-Dgm.ownCl=true"/>
			<!--  Uncomment if debugging jinni is needed
			<arg value="-Xdebug"/>
			<arg value="-Xrunjdwp:transport=dt_socket,address=9000,server=y,suspend=y"/>
			 -->
			<arg value="-jar"/>
			<arg value="${dist}/application/lib/launch.jar"/>
			<arg value="generate-shell-completion-script"/>
			<arg value="--file"/>
			<arg value="${dist}/application/bin/jinni-completion.sh"/>
			<arg value=":"/>
			<arg value="options"/>
			<arg value="--verbose"/>
			<arg value="--suppressHistory"/>
			<arg value="true"/>
			<!-- We need to specify at least one env variable to make newenvironment attribute work. -->
			<!-- Luckily, we need the TEMP, otherwise the temp folder is the Windows folder (on Windows). -->
			<env key="TEMP" value="${env.TEMP}"/>
		</exec>
		
		<chmod file="${dist}/application/bin/*" perm="754"/>
		
	</target>

	<target depends="dist" name="assemble">
		<zip destfile="${dist}/${versionedName}.zip">
			<zipfileset dir="${dist}/application" filemode="754">
			  <and>
    		   <!--  for performance -->
			   <not><filename name="**/*.jar"/></not>
			   <containsregexp expression="^#!\s*\/bin\/(ba)?sh"/>
			  </and>
			</zipfileset>
			<zipfileset dir="${dist}/application">
				<or>
     			   <!--  for performance -->
     			   <filename name="**/*.jar"/>
   			       <not><containsregexp expression="^#!\s*\/bin\/(ba)?sh"/></not>
				</or>
			</zipfileset>
		</zip>
	</target>

	<target depends="assemble" description="install to local maven repository" name="install">
		<bt:install file="${dist}/application/lib/${versionedName}.jar">
			<pom refid="maven.project"/>
			<attach file="dist/${versionedName}.zip" type="application:zip"/>
			<attach file="${dist}/${versionedName}-sources.jar" classifier="sources" />
		</bt:install>
	</target>

	<target description="clean up" name="clean">
		<delete dir="${build}"/>
		<delete dir="${dist}"/>
	</target>
</project>
