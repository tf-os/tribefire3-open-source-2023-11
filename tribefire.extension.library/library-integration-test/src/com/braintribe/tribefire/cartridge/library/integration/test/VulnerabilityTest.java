// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
// 
// This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License along with this library; See http://www.gnu.org/licenses/.
// ============================================================================
package com.braintribe.tribefire.cartridge.library.integration.test;

import static org.assertj.core.api.Assertions.assertThat;

import java.io.File;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.junit.Ignore;
import org.junit.Test;

import com.braintribe.model.generic.eval.EvalContext;
import com.braintribe.model.library.service.vulnerabilities.CheckVulnerabilities;
import com.braintribe.model.library.service.vulnerabilities.ReportFormat;
import com.braintribe.model.library.service.vulnerabilities.Vulnerabilities;
import com.braintribe.model.library.service.vulnerabilities.VulnerableLibrary;
import com.braintribe.model.resource.Resource;
import com.braintribe.utils.FileTools;
import com.braintribe.utils.IOTools;

public class VulnerabilityTest extends LibraryIntegrationTestBase {

	@Test
	// @Ignore //This test does not work at the moment because the NIST website have changed the URLs. We will have to wait for an updated version of
	// the Java lib. https://github.com/jeremylong/DependencyCheck/issues/1171
	@Ignore // Not yet supported as we do not resolve JAR files for terminals
	public void checkVulnerabilitiesPdf() throws Exception {

		CheckVulnerabilities checkVulns = CheckVulnerabilities.T.create();
		List<String> list = createVulnerabilitiesCheckDeps();

		checkVulns.setArtifactIdList(list);
		checkVulns.setResolveDependencies(false);
		checkVulns.setIncludeTerminalArtifact(true);
		checkVulns.setReportFormat(ReportFormat.HTML);
		checkVulns.setTitle("Test");

		EvalContext<? extends Vulnerabilities> eval = checkVulns.eval(librarySession);
		Vulnerabilities vulns = eval.get();
		Resource docResource = vulns.getReport();

		File tempFile = File.createTempFile("vulnerabilities", ".html");
		try {
			try (InputStream openStream = docResource.openStream()) {
				IOTools.inputToFile(openStream, tempFile);
			}

			log("====================================");
			log("Clean: (" + vulns.getCleanLibraries().size() + ")");
			for (String l : vulns.getCleanLibraries()) {
				log("   " + l);
			}
			log("====================================");
			log("Not checked: (" + vulns.getLibrariesNotChecked().size() + ")");
			for (String l : vulns.getLibrariesNotChecked()) {
				log("   " + l);
			}
			log("====================================");
			log("Missing: (" + vulns.getMissingLibraries().size() + ")");
			for (String l : vulns.getMissingLibraries()) {
				log("   " + l);
			}
			log("====================================");
			log("Vulnerabilities: (" + vulns.getVulnerableLibraries().size() + ")");
			for (VulnerableLibrary l : vulns.getVulnerableLibraries()) {
				log("   Artifact: " + l.getLibraryId());
				log("   Severity: " + l.getSeverity());
				log("   Score: " + l.getCvssScore());
				log("   Description: " + l.getDescription());
				log("   Name: " + l.getName());
				log("   URL: " + l.getUrl());
				log("");
			}

			assertThat(vulns.getCleanLibraries().size()).isEqualTo(1);

			assertThat(vulns.getMissingLibraries().size()).isEqualTo(1);

			assertThat(vulns.getVulnerableLibraries().size()).isGreaterThan(10);

		} finally {
			FileTools.deleteFile(tempFile);
		}
	}

	private List<String> createVulnerabilitiesCheckDeps() {
		List<String> list = new ArrayList<>();

		// vulnerable
		list.add("org.gagravarr:vorbis-java-tika#0.8");
		list.add("org.springframework:spring-core#3.0.5.RELEASE");
		list.add("org.tukaani:xz#1.5");

		// ok
		list.add("antlr:antlr#2.7.7");

		// missing
		list.add("unknown:unknown#1");
		return list;
	}

}
