// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
// 
// This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License along with this library; See http://www.gnu.org/licenses/.
// ============================================================================
package com.braintribe.model.processing.query.parser.impl.listener;

import com.braintribe.model.generic.value.EntityReference;
import com.braintribe.model.generic.value.EnumReference;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.EntityReferenceContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.EnumReferenceContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.TypeSignatureContext;
import com.braintribe.model.processing.query.parser.impl.context.EntityReferenceCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.EnumReferenceCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.ObjectCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.ValueCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.basetype.BooleanCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.basetype.DefaultCustomContext;

public abstract class GmqlEntityEnumParserListener extends GmqlIdentifierParserListener {

	@Override
	public void exitEntityReference(EntityReferenceContext ctx) {
		boolean persistedEntity = ctx.booleanValue() != null ? ((BooleanCustomContext) takeValue(ctx.booleanValue()).cast()).getReturnValue() : true;

		String typeSignature = ((DefaultCustomContext) takeValue(ctx.identifier()).cast()).getReturnValue();
		Object id = ((ValueCustomContext<?>) takeValue(ctx.value()).cast()).getReturnValue();
		String partition = ctx.stringValue() != null ? ((DefaultCustomContext) takeValue(ctx.stringValue()).cast()).getReturnValue() : null;

		EntityReference reference = $.entityReference(persistedEntity, typeSignature, id, partition);

		setValue(ctx, new EntityReferenceCustomContext(reference));
	}

	@Override
	public void exitEnumReference(EnumReferenceContext ctx) {
		String identifierPath = ((DefaultCustomContext) takeValue(ctx.identifier()).cast()).getReturnValue();
		String value = ((DefaultCustomContext) takeValue(ctx.genericIdentifier()).cast()).getReturnValue();
		EnumReference reference = $.enumReference(identifierPath, value);

		setValue(ctx, new EnumReferenceCustomContext(reference));
	}

	@Override
	public void exitTypeSignature(TypeSignatureContext ctx) {
		Object value = ((ValueCustomContext<?>) takeValue(ctx.value()).cast()).getReturnValue();
		setValue(ctx, new ObjectCustomContext($.entitySignature(value)));
	}

}
