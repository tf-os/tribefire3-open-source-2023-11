// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
// 
// This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License along with this library; See http://www.gnu.org/licenses/.
// ============================================================================
package com.braintribe.model.processing.query.parser.impl.autogenerated;

import org.antlr.v4.runtime.tree.ParseTreeListener;

/**
 * This interface defines a complete listener for a parse tree produced by
 * {@link GmqlParser}.
 */
public interface GmqlParserListener extends ParseTreeListener {
	/**
	 * Enter a parse tree produced by {@link GmqlParser#evaluate}.
	 * @param ctx the parse tree
	 */
	void enterEvaluate(GmqlParser.EvaluateContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#evaluate}.
	 * @param ctx the parse tree
	 */
	void exitEvaluate(GmqlParser.EvaluateContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#query}.
	 * @param ctx the parse tree
	 */
	void enterQuery(GmqlParser.QueryContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#query}.
	 * @param ctx the parse tree
	 */
	void exitQuery(GmqlParser.QueryContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#selectQuery}.
	 * @param ctx the parse tree
	 */
	void enterSelectQuery(GmqlParser.SelectQueryContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#selectQuery}.
	 * @param ctx the parse tree
	 */
	void exitSelectQuery(GmqlParser.SelectQueryContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#selectQueryStart}.
	 * @param ctx the parse tree
	 */
	void enterSelectQueryStart(GmqlParser.SelectQueryStartContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#selectQueryStart}.
	 * @param ctx the parse tree
	 */
	void exitSelectQueryStart(GmqlParser.SelectQueryStartContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#selectQueryHead}.
	 * @param ctx the parse tree
	 */
	void enterSelectQueryHead(GmqlParser.SelectQueryHeadContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#selectQueryHead}.
	 * @param ctx the parse tree
	 */
	void exitSelectQueryHead(GmqlParser.SelectQueryHeadContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#selectQuerySelection}.
	 * @param ctx the parse tree
	 */
	void enterSelectQuerySelection(GmqlParser.SelectQuerySelectionContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#selectQuerySelection}.
	 * @param ctx the parse tree
	 */
	void exitSelectQuerySelection(GmqlParser.SelectQuerySelectionContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#selectQuerySingleSelection}.
	 * @param ctx the parse tree
	 */
	void enterSelectQuerySingleSelection(GmqlParser.SelectQuerySingleSelectionContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#selectQuerySingleSelection}.
	 * @param ctx the parse tree
	 */
	void exitSelectQuerySingleSelection(GmqlParser.SelectQuerySingleSelectionContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#selectQueryFrom}.
	 * @param ctx the parse tree
	 */
	void enterSelectQueryFrom(GmqlParser.SelectQueryFromContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#selectQueryFrom}.
	 * @param ctx the parse tree
	 */
	void exitSelectQueryFrom(GmqlParser.SelectQueryFromContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#selectQuerySingleFrom}.
	 * @param ctx the parse tree
	 */
	void enterSelectQuerySingleFrom(GmqlParser.SelectQuerySingleFromContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#selectQuerySingleFrom}.
	 * @param ctx the parse tree
	 */
	void exitSelectQuerySingleFrom(GmqlParser.SelectQuerySingleFromContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#selectQueryJoin}.
	 * @param ctx the parse tree
	 */
	void enterSelectQueryJoin(GmqlParser.SelectQueryJoinContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#selectQueryJoin}.
	 * @param ctx the parse tree
	 */
	void exitSelectQueryJoin(GmqlParser.SelectQueryJoinContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#selectQueryTailGroupBy}.
	 * @param ctx the parse tree
	 */
	void enterSelectQueryTailGroupBy(GmqlParser.SelectQueryTailGroupByContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#selectQueryTailGroupBy}.
	 * @param ctx the parse tree
	 */
	void exitSelectQueryTailGroupBy(GmqlParser.SelectQueryTailGroupByContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#selectQueryTailHaving}.
	 * @param ctx the parse tree
	 */
	void enterSelectQueryTailHaving(GmqlParser.SelectQueryTailHavingContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#selectQueryTailHaving}.
	 * @param ctx the parse tree
	 */
	void exitSelectQueryTailHaving(GmqlParser.SelectQueryTailHavingContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#groupBy}.
	 * @param ctx the parse tree
	 */
	void enterGroupBy(GmqlParser.GroupByContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#groupBy}.
	 * @param ctx the parse tree
	 */
	void exitGroupBy(GmqlParser.GroupByContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#groupByExpression}.
	 * @param ctx the parse tree
	 */
	void enterGroupByExpression(GmqlParser.GroupByExpressionContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#groupByExpression}.
	 * @param ctx the parse tree
	 */
	void exitGroupByExpression(GmqlParser.GroupByExpressionContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#havingCondition}.
	 * @param ctx the parse tree
	 */
	void enterHavingCondition(GmqlParser.HavingConditionContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#havingCondition}.
	 * @param ctx the parse tree
	 */
	void exitHavingCondition(GmqlParser.HavingConditionContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#join}.
	 * @param ctx the parse tree
	 */
	void enterJoin(GmqlParser.JoinContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#join}.
	 * @param ctx the parse tree
	 */
	void exitJoin(GmqlParser.JoinContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#joinType}.
	 * @param ctx the parse tree
	 */
	void enterJoinType(GmqlParser.JoinTypeContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#joinType}.
	 * @param ctx the parse tree
	 */
	void exitJoinType(GmqlParser.JoinTypeContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#innerJoin}.
	 * @param ctx the parse tree
	 */
	void enterInnerJoin(GmqlParser.InnerJoinContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#innerJoin}.
	 * @param ctx the parse tree
	 */
	void exitInnerJoin(GmqlParser.InnerJoinContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#fullJoin}.
	 * @param ctx the parse tree
	 */
	void enterFullJoin(GmqlParser.FullJoinContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#fullJoin}.
	 * @param ctx the parse tree
	 */
	void exitFullJoin(GmqlParser.FullJoinContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#leftJoin}.
	 * @param ctx the parse tree
	 */
	void enterLeftJoin(GmqlParser.LeftJoinContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#leftJoin}.
	 * @param ctx the parse tree
	 */
	void exitLeftJoin(GmqlParser.LeftJoinContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#rightJoin}.
	 * @param ctx the parse tree
	 */
	void enterRightJoin(GmqlParser.RightJoinContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#rightJoin}.
	 * @param ctx the parse tree
	 */
	void exitRightJoin(GmqlParser.RightJoinContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#propertyQuery}.
	 * @param ctx the parse tree
	 */
	void enterPropertyQuery(GmqlParser.PropertyQueryContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#propertyQuery}.
	 * @param ctx the parse tree
	 */
	void exitPropertyQuery(GmqlParser.PropertyQueryContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#propertyQueryStart}.
	 * @param ctx the parse tree
	 */
	void enterPropertyQueryStart(GmqlParser.PropertyQueryStartContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#propertyQueryStart}.
	 * @param ctx the parse tree
	 */
	void exitPropertyQueryStart(GmqlParser.PropertyQueryStartContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#propertyQueryHead}.
	 * @param ctx the parse tree
	 */
	void enterPropertyQueryHead(GmqlParser.PropertyQueryHeadContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#propertyQueryHead}.
	 * @param ctx the parse tree
	 */
	void exitPropertyQueryHead(GmqlParser.PropertyQueryHeadContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#entityQuery}.
	 * @param ctx the parse tree
	 */
	void enterEntityQuery(GmqlParser.EntityQueryContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#entityQuery}.
	 * @param ctx the parse tree
	 */
	void exitEntityQuery(GmqlParser.EntityQueryContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#entityQueryStart}.
	 * @param ctx the parse tree
	 */
	void enterEntityQueryStart(GmqlParser.EntityQueryStartContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#entityQueryStart}.
	 * @param ctx the parse tree
	 */
	void exitEntityQueryStart(GmqlParser.EntityQueryStartContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#entityQueryHead}.
	 * @param ctx the parse tree
	 */
	void enterEntityQueryHead(GmqlParser.EntityQueryHeadContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#entityQueryHead}.
	 * @param ctx the parse tree
	 */
	void exitEntityQueryHead(GmqlParser.EntityQueryHeadContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#queryTailWhere}.
	 * @param ctx the parse tree
	 */
	void enterQueryTailWhere(GmqlParser.QueryTailWhereContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#queryTailWhere}.
	 * @param ctx the parse tree
	 */
	void exitQueryTailWhere(GmqlParser.QueryTailWhereContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#queryTailOrderBy}.
	 * @param ctx the parse tree
	 */
	void enterQueryTailOrderBy(GmqlParser.QueryTailOrderByContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#queryTailOrderBy}.
	 * @param ctx the parse tree
	 */
	void exitQueryTailOrderBy(GmqlParser.QueryTailOrderByContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#queryTailPagination}.
	 * @param ctx the parse tree
	 */
	void enterQueryTailPagination(GmqlParser.QueryTailPaginationContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#queryTailPagination}.
	 * @param ctx the parse tree
	 */
	void exitQueryTailPagination(GmqlParser.QueryTailPaginationContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#aggregateFunction}.
	 * @param ctx the parse tree
	 */
	void enterAggregateFunction(GmqlParser.AggregateFunctionContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#aggregateFunction}.
	 * @param ctx the parse tree
	 */
	void exitAggregateFunction(GmqlParser.AggregateFunctionContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#aggregateAvg}.
	 * @param ctx the parse tree
	 */
	void enterAggregateAvg(GmqlParser.AggregateAvgContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#aggregateAvg}.
	 * @param ctx the parse tree
	 */
	void exitAggregateAvg(GmqlParser.AggregateAvgContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#aggregateMin}.
	 * @param ctx the parse tree
	 */
	void enterAggregateMin(GmqlParser.AggregateMinContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#aggregateMin}.
	 * @param ctx the parse tree
	 */
	void exitAggregateMin(GmqlParser.AggregateMinContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#aggregateMax}.
	 * @param ctx the parse tree
	 */
	void enterAggregateMax(GmqlParser.AggregateMaxContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#aggregateMax}.
	 * @param ctx the parse tree
	 */
	void exitAggregateMax(GmqlParser.AggregateMaxContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#aggregateSum}.
	 * @param ctx the parse tree
	 */
	void enterAggregateSum(GmqlParser.AggregateSumContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#aggregateSum}.
	 * @param ctx the parse tree
	 */
	void exitAggregateSum(GmqlParser.AggregateSumContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#aggregateCount}.
	 * @param ctx the parse tree
	 */
	void enterAggregateCount(GmqlParser.AggregateCountContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#aggregateCount}.
	 * @param ctx the parse tree
	 */
	void exitAggregateCount(GmqlParser.AggregateCountContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#orderBy}.
	 * @param ctx the parse tree
	 */
	void enterOrderBy(GmqlParser.OrderByContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#orderBy}.
	 * @param ctx the parse tree
	 */
	void exitOrderBy(GmqlParser.OrderByContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#orderBySingle}.
	 * @param ctx the parse tree
	 */
	void enterOrderBySingle(GmqlParser.OrderBySingleContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#orderBySingle}.
	 * @param ctx the parse tree
	 */
	void exitOrderBySingle(GmqlParser.OrderBySingleContext ctx);
	/**
	 * Enter a parse tree produced by the {@code ascendingOrderByDirection}
	 * labeled alternative in {@link GmqlParser#orderByDirection}.
	 * @param ctx the parse tree
	 */
	void enterAscendingOrderByDirection(GmqlParser.AscendingOrderByDirectionContext ctx);
	/**
	 * Exit a parse tree produced by the {@code ascendingOrderByDirection}
	 * labeled alternative in {@link GmqlParser#orderByDirection}.
	 * @param ctx the parse tree
	 */
	void exitAscendingOrderByDirection(GmqlParser.AscendingOrderByDirectionContext ctx);
	/**
	 * Enter a parse tree produced by the {@code descendingOrderByDirection}
	 * labeled alternative in {@link GmqlParser#orderByDirection}.
	 * @param ctx the parse tree
	 */
	void enterDescendingOrderByDirection(GmqlParser.DescendingOrderByDirectionContext ctx);
	/**
	 * Exit a parse tree produced by the {@code descendingOrderByDirection}
	 * labeled alternative in {@link GmqlParser#orderByDirection}.
	 * @param ctx the parse tree
	 */
	void exitDescendingOrderByDirection(GmqlParser.DescendingOrderByDirectionContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#orderByExpression}.
	 * @param ctx the parse tree
	 */
	void enterOrderByExpression(GmqlParser.OrderByExpressionContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#orderByExpression}.
	 * @param ctx the parse tree
	 */
	void exitOrderByExpression(GmqlParser.OrderByExpressionContext ctx);
	/**
	 * Enter a parse tree produced by the {@code paginationLimit}
	 * labeled alternative in {@link GmqlParser#pagination}.
	 * @param ctx the parse tree
	 */
	void enterPaginationLimit(GmqlParser.PaginationLimitContext ctx);
	/**
	 * Exit a parse tree produced by the {@code paginationLimit}
	 * labeled alternative in {@link GmqlParser#pagination}.
	 * @param ctx the parse tree
	 */
	void exitPaginationLimit(GmqlParser.PaginationLimitContext ctx);
	/**
	 * Enter a parse tree produced by the {@code paginationOffset}
	 * labeled alternative in {@link GmqlParser#pagination}.
	 * @param ctx the parse tree
	 */
	void enterPaginationOffset(GmqlParser.PaginationOffsetContext ctx);
	/**
	 * Exit a parse tree produced by the {@code paginationOffset}
	 * labeled alternative in {@link GmqlParser#pagination}.
	 * @param ctx the parse tree
	 */
	void exitPaginationOffset(GmqlParser.PaginationOffsetContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#alias}.
	 * @param ctx the parse tree
	 */
	void enterAlias(GmqlParser.AliasContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#alias}.
	 * @param ctx the parse tree
	 */
	void exitAlias(GmqlParser.AliasContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#whereCondition}.
	 * @param ctx the parse tree
	 */
	void enterWhereCondition(GmqlParser.WhereConditionContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#whereCondition}.
	 * @param ctx the parse tree
	 */
	void exitWhereCondition(GmqlParser.WhereConditionContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#booleanValueExpression}.
	 * @param ctx the parse tree
	 */
	void enterBooleanValueExpression(GmqlParser.BooleanValueExpressionContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#booleanValueExpression}.
	 * @param ctx the parse tree
	 */
	void exitBooleanValueExpression(GmqlParser.BooleanValueExpressionContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#orPredicate}.
	 * @param ctx the parse tree
	 */
	void enterOrPredicate(GmqlParser.OrPredicateContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#orPredicate}.
	 * @param ctx the parse tree
	 */
	void exitOrPredicate(GmqlParser.OrPredicateContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#andPredicate}.
	 * @param ctx the parse tree
	 */
	void enterAndPredicate(GmqlParser.AndPredicateContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#andPredicate}.
	 * @param ctx the parse tree
	 */
	void exitAndPredicate(GmqlParser.AndPredicateContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#negationPredicate}.
	 * @param ctx the parse tree
	 */
	void enterNegationPredicate(GmqlParser.NegationPredicateContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#negationPredicate}.
	 * @param ctx the parse tree
	 */
	void exitNegationPredicate(GmqlParser.NegationPredicateContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#booleanAtomicExpression}.
	 * @param ctx the parse tree
	 */
	void enterBooleanAtomicExpression(GmqlParser.BooleanAtomicExpressionContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#booleanAtomicExpression}.
	 * @param ctx the parse tree
	 */
	void exitBooleanAtomicExpression(GmqlParser.BooleanAtomicExpressionContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#parenthesizedBooleanValueExpression}.
	 * @param ctx the parse tree
	 */
	void enterParenthesizedBooleanValueExpression(GmqlParser.ParenthesizedBooleanValueExpressionContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#parenthesizedBooleanValueExpression}.
	 * @param ctx the parse tree
	 */
	void exitParenthesizedBooleanValueExpression(GmqlParser.ParenthesizedBooleanValueExpressionContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#booleanFunction}.
	 * @param ctx the parse tree
	 */
	void enterBooleanFunction(GmqlParser.BooleanFunctionContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#booleanFunction}.
	 * @param ctx the parse tree
	 */
	void exitBooleanFunction(GmqlParser.BooleanFunctionContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#fullTextComparison}.
	 * @param ctx the parse tree
	 */
	void enterFullTextComparison(GmqlParser.FullTextComparisonContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#fullTextComparison}.
	 * @param ctx the parse tree
	 */
	void exitFullTextComparison(GmqlParser.FullTextComparisonContext ctx);
	/**
	 * Enter a parse tree produced by the {@code predicateComparison}
	 * labeled alternative in {@link GmqlParser#comparison}.
	 * @param ctx the parse tree
	 */
	void enterPredicateComparison(GmqlParser.PredicateComparisonContext ctx);
	/**
	 * Exit a parse tree produced by the {@code predicateComparison}
	 * labeled alternative in {@link GmqlParser#comparison}.
	 * @param ctx the parse tree
	 */
	void exitPredicateComparison(GmqlParser.PredicateComparisonContext ctx);
	/**
	 * Enter a parse tree produced by the {@code booleanFunctionComparison}
	 * labeled alternative in {@link GmqlParser#comparison}.
	 * @param ctx the parse tree
	 */
	void enterBooleanFunctionComparison(GmqlParser.BooleanFunctionComparisonContext ctx);
	/**
	 * Exit a parse tree produced by the {@code booleanFunctionComparison}
	 * labeled alternative in {@link GmqlParser#comparison}.
	 * @param ctx the parse tree
	 */
	void exitBooleanFunctionComparison(GmqlParser.BooleanFunctionComparisonContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#value}.
	 * @param ctx the parse tree
	 */
	void enterValue(GmqlParser.ValueContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#value}.
	 * @param ctx the parse tree
	 */
	void exitValue(GmqlParser.ValueContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#generalValue}.
	 * @param ctx the parse tree
	 */
	void enterGeneralValue(GmqlParser.GeneralValueContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#generalValue}.
	 * @param ctx the parse tree
	 */
	void exitGeneralValue(GmqlParser.GeneralValueContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#variable}.
	 * @param ctx the parse tree
	 */
	void enterVariable(GmqlParser.VariableContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#variable}.
	 * @param ctx the parse tree
	 */
	void exitVariable(GmqlParser.VariableContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#collection}.
	 * @param ctx the parse tree
	 */
	void enterCollection(GmqlParser.CollectionContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#collection}.
	 * @param ctx the parse tree
	 */
	void exitCollection(GmqlParser.CollectionContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#dateFunction}.
	 * @param ctx the parse tree
	 */
	void enterDateFunction(GmqlParser.DateFunctionContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#dateFunction}.
	 * @param ctx the parse tree
	 */
	void exitDateFunction(GmqlParser.DateFunctionContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#now}.
	 * @param ctx the parse tree
	 */
	void enterNow(GmqlParser.NowContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#now}.
	 * @param ctx the parse tree
	 */
	void exitNow(GmqlParser.NowContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#contextFunction}.
	 * @param ctx the parse tree
	 */
	void enterContextFunction(GmqlParser.ContextFunctionContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#contextFunction}.
	 * @param ctx the parse tree
	 */
	void exitContextFunction(GmqlParser.ContextFunctionContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#username}.
	 * @param ctx the parse tree
	 */
	void enterUsername(GmqlParser.UsernameContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#username}.
	 * @param ctx the parse tree
	 */
	void exitUsername(GmqlParser.UsernameContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#stringFunction}.
	 * @param ctx the parse tree
	 */
	void enterStringFunction(GmqlParser.StringFunctionContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#stringFunction}.
	 * @param ctx the parse tree
	 */
	void exitStringFunction(GmqlParser.StringFunctionContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#lower}.
	 * @param ctx the parse tree
	 */
	void enterLower(GmqlParser.LowerContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#lower}.
	 * @param ctx the parse tree
	 */
	void exitLower(GmqlParser.LowerContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#upper}.
	 * @param ctx the parse tree
	 */
	void enterUpper(GmqlParser.UpperContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#upper}.
	 * @param ctx the parse tree
	 */
	void exitUpper(GmqlParser.UpperContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#toStringRule}.
	 * @param ctx the parse tree
	 */
	void enterToStringRule(GmqlParser.ToStringRuleContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#toStringRule}.
	 * @param ctx the parse tree
	 */
	void exitToStringRule(GmqlParser.ToStringRuleContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#concatenation}.
	 * @param ctx the parse tree
	 */
	void enterConcatenation(GmqlParser.ConcatenationContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#concatenation}.
	 * @param ctx the parse tree
	 */
	void exitConcatenation(GmqlParser.ConcatenationContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#stringFunctionParameter}.
	 * @param ctx the parse tree
	 */
	void enterStringFunctionParameter(GmqlParser.StringFunctionParameterContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#stringFunctionParameter}.
	 * @param ctx the parse tree
	 */
	void exitStringFunctionParameter(GmqlParser.StringFunctionParameterContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#localize}.
	 * @param ctx the parse tree
	 */
	void enterLocalize(GmqlParser.LocalizeContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#localize}.
	 * @param ctx the parse tree
	 */
	void exitLocalize(GmqlParser.LocalizeContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#sourceProperty}.
	 * @param ctx the parse tree
	 */
	void enterSourceProperty(GmqlParser.SourcePropertyContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#sourceProperty}.
	 * @param ctx the parse tree
	 */
	void exitSourceProperty(GmqlParser.SourcePropertyContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#joinFunction}.
	 * @param ctx the parse tree
	 */
	void enterJoinFunction(GmqlParser.JoinFunctionContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#joinFunction}.
	 * @param ctx the parse tree
	 */
	void exitJoinFunction(GmqlParser.JoinFunctionContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#listIndex}.
	 * @param ctx the parse tree
	 */
	void enterListIndex(GmqlParser.ListIndexContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#listIndex}.
	 * @param ctx the parse tree
	 */
	void exitListIndex(GmqlParser.ListIndexContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#mapKey}.
	 * @param ctx the parse tree
	 */
	void enterMapKey(GmqlParser.MapKeyContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#mapKey}.
	 * @param ctx the parse tree
	 */
	void exitMapKey(GmqlParser.MapKeyContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#enumReference}.
	 * @param ctx the parse tree
	 */
	void enterEnumReference(GmqlParser.EnumReferenceContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#enumReference}.
	 * @param ctx the parse tree
	 */
	void exitEnumReference(GmqlParser.EnumReferenceContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#entityReference}.
	 * @param ctx the parse tree
	 */
	void enterEntityReference(GmqlParser.EntityReferenceContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#entityReference}.
	 * @param ctx the parse tree
	 */
	void exitEntityReference(GmqlParser.EntityReferenceContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#typeSignature}.
	 * @param ctx the parse tree
	 */
	void enterTypeSignature(GmqlParser.TypeSignatureContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#typeSignature}.
	 * @param ctx the parse tree
	 */
	void exitTypeSignature(GmqlParser.TypeSignatureContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#identifier}.
	 * @param ctx the parse tree
	 */
	void enterIdentifier(GmqlParser.IdentifierContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#identifier}.
	 * @param ctx the parse tree
	 */
	void exitIdentifier(GmqlParser.IdentifierContext ctx);
	/**
	 * Enter a parse tree produced by the {@code standardIdentifier}
	 * labeled alternative in {@link GmqlParser#genericIdentifier}.
	 * @param ctx the parse tree
	 */
	void enterStandardIdentifier(GmqlParser.StandardIdentifierContext ctx);
	/**
	 * Exit a parse tree produced by the {@code standardIdentifier}
	 * labeled alternative in {@link GmqlParser#genericIdentifier}.
	 * @param ctx the parse tree
	 */
	void exitStandardIdentifier(GmqlParser.StandardIdentifierContext ctx);
	/**
	 * Enter a parse tree produced by the {@code keyWordIdentifier}
	 * labeled alternative in {@link GmqlParser#genericIdentifier}.
	 * @param ctx the parse tree
	 */
	void enterKeyWordIdentifier(GmqlParser.KeyWordIdentifierContext ctx);
	/**
	 * Exit a parse tree produced by the {@code keyWordIdentifier}
	 * labeled alternative in {@link GmqlParser#genericIdentifier}.
	 * @param ctx the parse tree
	 */
	void exitKeyWordIdentifier(GmqlParser.KeyWordIdentifierContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#escapedIdentifier}.
	 * @param ctx the parse tree
	 */
	void enterEscapedIdentifier(GmqlParser.EscapedIdentifierContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#escapedIdentifier}.
	 * @param ctx the parse tree
	 */
	void exitEscapedIdentifier(GmqlParser.EscapedIdentifierContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#literalValue}.
	 * @param ctx the parse tree
	 */
	void enterLiteralValue(GmqlParser.LiteralValueContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#literalValue}.
	 * @param ctx the parse tree
	 */
	void exitLiteralValue(GmqlParser.LiteralValueContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#dateValue}.
	 * @param ctx the parse tree
	 */
	void enterDateValue(GmqlParser.DateValueContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#dateValue}.
	 * @param ctx the parse tree
	 */
	void exitDateValue(GmqlParser.DateValueContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#calendarOffsetValue}.
	 * @param ctx the parse tree
	 */
	void enterCalendarOffsetValue(GmqlParser.CalendarOffsetValueContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#calendarOffsetValue}.
	 * @param ctx the parse tree
	 */
	void exitCalendarOffsetValue(GmqlParser.CalendarOffsetValueContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#dateOffset}.
	 * @param ctx the parse tree
	 */
	void enterDateOffset(GmqlParser.DateOffsetContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#dateOffset}.
	 * @param ctx the parse tree
	 */
	void exitDateOffset(GmqlParser.DateOffsetContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#timeZoneOffset}.
	 * @param ctx the parse tree
	 */
	void enterTimeZoneOffset(GmqlParser.TimeZoneOffsetContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#timeZoneOffset}.
	 * @param ctx the parse tree
	 */
	void exitTimeZoneOffset(GmqlParser.TimeZoneOffsetContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#stringValue}.
	 * @param ctx the parse tree
	 */
	void enterStringValue(GmqlParser.StringValueContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#stringValue}.
	 * @param ctx the parse tree
	 */
	void exitStringValue(GmqlParser.StringValueContext ctx);
	/**
	 * Enter a parse tree produced by the {@code EscB}
	 * labeled alternative in {@link GmqlParser#escape}.
	 * @param ctx the parse tree
	 */
	void enterEscB(GmqlParser.EscBContext ctx);
	/**
	 * Exit a parse tree produced by the {@code EscB}
	 * labeled alternative in {@link GmqlParser#escape}.
	 * @param ctx the parse tree
	 */
	void exitEscB(GmqlParser.EscBContext ctx);
	/**
	 * Enter a parse tree produced by the {@code EscBS}
	 * labeled alternative in {@link GmqlParser#escape}.
	 * @param ctx the parse tree
	 */
	void enterEscBS(GmqlParser.EscBSContext ctx);
	/**
	 * Exit a parse tree produced by the {@code EscBS}
	 * labeled alternative in {@link GmqlParser#escape}.
	 * @param ctx the parse tree
	 */
	void exitEscBS(GmqlParser.EscBSContext ctx);
	/**
	 * Enter a parse tree produced by the {@code EscF}
	 * labeled alternative in {@link GmqlParser#escape}.
	 * @param ctx the parse tree
	 */
	void enterEscF(GmqlParser.EscFContext ctx);
	/**
	 * Exit a parse tree produced by the {@code EscF}
	 * labeled alternative in {@link GmqlParser#escape}.
	 * @param ctx the parse tree
	 */
	void exitEscF(GmqlParser.EscFContext ctx);
	/**
	 * Enter a parse tree produced by the {@code EscN}
	 * labeled alternative in {@link GmqlParser#escape}.
	 * @param ctx the parse tree
	 */
	void enterEscN(GmqlParser.EscNContext ctx);
	/**
	 * Exit a parse tree produced by the {@code EscN}
	 * labeled alternative in {@link GmqlParser#escape}.
	 * @param ctx the parse tree
	 */
	void exitEscN(GmqlParser.EscNContext ctx);
	/**
	 * Enter a parse tree produced by the {@code EscR}
	 * labeled alternative in {@link GmqlParser#escape}.
	 * @param ctx the parse tree
	 */
	void enterEscR(GmqlParser.EscRContext ctx);
	/**
	 * Exit a parse tree produced by the {@code EscR}
	 * labeled alternative in {@link GmqlParser#escape}.
	 * @param ctx the parse tree
	 */
	void exitEscR(GmqlParser.EscRContext ctx);
	/**
	 * Enter a parse tree produced by the {@code EscSQ}
	 * labeled alternative in {@link GmqlParser#escape}.
	 * @param ctx the parse tree
	 */
	void enterEscSQ(GmqlParser.EscSQContext ctx);
	/**
	 * Exit a parse tree produced by the {@code EscSQ}
	 * labeled alternative in {@link GmqlParser#escape}.
	 * @param ctx the parse tree
	 */
	void exitEscSQ(GmqlParser.EscSQContext ctx);
	/**
	 * Enter a parse tree produced by the {@code EscT}
	 * labeled alternative in {@link GmqlParser#escape}.
	 * @param ctx the parse tree
	 */
	void enterEscT(GmqlParser.EscTContext ctx);
	/**
	 * Exit a parse tree produced by the {@code EscT}
	 * labeled alternative in {@link GmqlParser#escape}.
	 * @param ctx the parse tree
	 */
	void exitEscT(GmqlParser.EscTContext ctx);
	/**
	 * Enter a parse tree produced by the {@code UnicodeEscape}
	 * labeled alternative in {@link GmqlParser#escape}.
	 * @param ctx the parse tree
	 */
	void enterUnicodeEscape(GmqlParser.UnicodeEscapeContext ctx);
	/**
	 * Exit a parse tree produced by the {@code UnicodeEscape}
	 * labeled alternative in {@link GmqlParser#escape}.
	 * @param ctx the parse tree
	 */
	void exitUnicodeEscape(GmqlParser.UnicodeEscapeContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#plainContent}.
	 * @param ctx the parse tree
	 */
	void enterPlainContent(GmqlParser.PlainContentContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#plainContent}.
	 * @param ctx the parse tree
	 */
	void exitPlainContent(GmqlParser.PlainContentContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#nullValue}.
	 * @param ctx the parse tree
	 */
	void enterNullValue(GmqlParser.NullValueContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#nullValue}.
	 * @param ctx the parse tree
	 */
	void exitNullValue(GmqlParser.NullValueContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#booleanValue}.
	 * @param ctx the parse tree
	 */
	void enterBooleanValue(GmqlParser.BooleanValueContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#booleanValue}.
	 * @param ctx the parse tree
	 */
	void exitBooleanValue(GmqlParser.BooleanValueContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#decimalValue}.
	 * @param ctx the parse tree
	 */
	void enterDecimalValue(GmqlParser.DecimalValueContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#decimalValue}.
	 * @param ctx the parse tree
	 */
	void exitDecimalValue(GmqlParser.DecimalValueContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#floatValue}.
	 * @param ctx the parse tree
	 */
	void enterFloatValue(GmqlParser.FloatValueContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#floatValue}.
	 * @param ctx the parse tree
	 */
	void exitFloatValue(GmqlParser.FloatValueContext ctx);
	/**
	 * Enter a parse tree produced by {@link GmqlParser#doubleValue}.
	 * @param ctx the parse tree
	 */
	void enterDoubleValue(GmqlParser.DoubleValueContext ctx);
	/**
	 * Exit a parse tree produced by {@link GmqlParser#doubleValue}.
	 * @param ctx the parse tree
	 */
	void exitDoubleValue(GmqlParser.DoubleValueContext ctx);
	/**
	 * Enter a parse tree produced by the {@code IntegerHexRepresentation}
	 * labeled alternative in {@link GmqlParser#integerValue}.
	 * @param ctx the parse tree
	 */
	void enterIntegerHexRepresentation(GmqlParser.IntegerHexRepresentationContext ctx);
	/**
	 * Exit a parse tree produced by the {@code IntegerHexRepresentation}
	 * labeled alternative in {@link GmqlParser#integerValue}.
	 * @param ctx the parse tree
	 */
	void exitIntegerHexRepresentation(GmqlParser.IntegerHexRepresentationContext ctx);
	/**
	 * Enter a parse tree produced by the {@code IntegerDecimalRepresenation}
	 * labeled alternative in {@link GmqlParser#integerValue}.
	 * @param ctx the parse tree
	 */
	void enterIntegerDecimalRepresenation(GmqlParser.IntegerDecimalRepresenationContext ctx);
	/**
	 * Exit a parse tree produced by the {@code IntegerDecimalRepresenation}
	 * labeled alternative in {@link GmqlParser#integerValue}.
	 * @param ctx the parse tree
	 */
	void exitIntegerDecimalRepresenation(GmqlParser.IntegerDecimalRepresenationContext ctx);
	/**
	 * Enter a parse tree produced by the {@code LongHexRepresentation}
	 * labeled alternative in {@link GmqlParser#longValue}.
	 * @param ctx the parse tree
	 */
	void enterLongHexRepresentation(GmqlParser.LongHexRepresentationContext ctx);
	/**
	 * Exit a parse tree produced by the {@code LongHexRepresentation}
	 * labeled alternative in {@link GmqlParser#longValue}.
	 * @param ctx the parse tree
	 */
	void exitLongHexRepresentation(GmqlParser.LongHexRepresentationContext ctx);
	/**
	 * Enter a parse tree produced by the {@code LongDecimalRepresenation}
	 * labeled alternative in {@link GmqlParser#longValue}.
	 * @param ctx the parse tree
	 */
	void enterLongDecimalRepresenation(GmqlParser.LongDecimalRepresenationContext ctx);
	/**
	 * Exit a parse tree produced by the {@code LongDecimalRepresenation}
	 * labeled alternative in {@link GmqlParser#longValue}.
	 * @param ctx the parse tree
	 */
	void exitLongDecimalRepresenation(GmqlParser.LongDecimalRepresenationContext ctx);
}