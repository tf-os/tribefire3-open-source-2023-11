// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
// 
// This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License along with this library; See http://www.gnu.org/licenses/.
// ============================================================================
package com.braintribe.model.processing.query.parser.impl.autogenerated;

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class GmqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.5", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		Boolean=1, Entity=2, TypeSignature=3, Enum=4, Select=5, Distinct=6, From=7, 
		Join=8, Full=9, Right=10, Left=11, Where=12, Null=13, Limit=14, Offset=15, 
		OrderBy=16, Ascending=17, Descending=18, GroupBy=19, Having=20, Property=21, 
		Of=22, AggCount=23, AggAvg=24, AggMin=25, AggMax=26, AggSum=27, ListIndex=28, 
		MapKey=29, Lower=30, Upper=31, ToStringToken=32, Concatenation=33, Localize=34, 
		Username=35, Star=36, Colon=37, FullText=38, Now=39, And=40, Not=41, Or=42, 
		Operator=43, LB=44, RB=45, LSB=46, RSB=47, LCB=48, RCB=49, COMMA=50, Dot=51, 
		StandardIdentifier=52, EscapedIdentifier=53, DateFunction=54, DateOffset=55, 
		TimeZoneOffset=56, DecimalLiteral=57, FloatLiteral=58, DoubleLiteral=59, 
		LongBase16Literal=60, LongBase10Literal=61, IntegerBase16Literal=62, IntegerBase10Literal=63, 
		StringOpen=64, WS=65, UnicodeEscape=66, EscB=67, EscT=68, EscN=69, EscF=70, 
		EscR=71, EscSQ=72, EscBS=73, PlainContent=74, StringClose=75, KeyWord=76, 
		EscapedIdentifierClose=77;
	public static final int
		RULE_evaluate = 0, RULE_query = 1, RULE_selectQuery = 2, RULE_selectQueryStart = 3, 
		RULE_selectQueryHead = 4, RULE_selectQuerySelection = 5, RULE_selectQuerySingleSelection = 6, 
		RULE_selectQueryFrom = 7, RULE_selectQuerySingleFrom = 8, RULE_selectQueryJoin = 9, 
		RULE_selectQueryTailGroupBy = 10, RULE_selectQueryTailHaving = 11, RULE_groupBy = 12, 
		RULE_groupByExpression = 13, RULE_havingCondition = 14, RULE_join = 15, 
		RULE_joinType = 16, RULE_innerJoin = 17, RULE_fullJoin = 18, RULE_leftJoin = 19, 
		RULE_rightJoin = 20, RULE_propertyQuery = 21, RULE_propertyQueryStart = 22, 
		RULE_propertyQueryHead = 23, RULE_entityQuery = 24, RULE_entityQueryStart = 25, 
		RULE_entityQueryHead = 26, RULE_queryTailWhere = 27, RULE_queryTailOrderBy = 28, 
		RULE_queryTailPagination = 29, RULE_aggregateFunction = 30, RULE_aggregateAvg = 31, 
		RULE_aggregateMin = 32, RULE_aggregateMax = 33, RULE_aggregateSum = 34, 
		RULE_aggregateCount = 35, RULE_orderBy = 36, RULE_orderBySingle = 37, 
		RULE_orderByDirection = 38, RULE_orderByExpression = 39, RULE_pagination = 40, 
		RULE_alias = 41, RULE_whereCondition = 42, RULE_booleanValueExpression = 43, 
		RULE_orPredicate = 44, RULE_andPredicate = 45, RULE_negationPredicate = 46, 
		RULE_booleanAtomicExpression = 47, RULE_parenthesizedBooleanValueExpression = 48, 
		RULE_booleanFunction = 49, RULE_fullTextComparison = 50, RULE_comparison = 51, 
		RULE_value = 52, RULE_generalValue = 53, RULE_variable = 54, RULE_collection = 55, 
		RULE_dateFunction = 56, RULE_now = 57, RULE_contextFunction = 58, RULE_username = 59, 
		RULE_stringFunction = 60, RULE_lower = 61, RULE_upper = 62, RULE_toStringRule = 63, 
		RULE_concatenation = 64, RULE_stringFunctionParameter = 65, RULE_localize = 66, 
		RULE_sourceProperty = 67, RULE_joinFunction = 68, RULE_listIndex = 69, 
		RULE_mapKey = 70, RULE_enumReference = 71, RULE_entityReference = 72, 
		RULE_typeSignature = 73, RULE_identifier = 74, RULE_genericIdentifier = 75, 
		RULE_escapedIdentifier = 76, RULE_literalValue = 77, RULE_dateValue = 78, 
		RULE_calendarOffsetValue = 79, RULE_dateOffset = 80, RULE_timeZoneOffset = 81, 
		RULE_stringValue = 82, RULE_escape = 83, RULE_plainContent = 84, RULE_nullValue = 85, 
		RULE_booleanValue = 86, RULE_decimalValue = 87, RULE_floatValue = 88, 
		RULE_doubleValue = 89, RULE_integerValue = 90, RULE_longValue = 91;
	public static final String[] ruleNames = {
		"evaluate", "query", "selectQuery", "selectQueryStart", "selectQueryHead", 
		"selectQuerySelection", "selectQuerySingleSelection", "selectQueryFrom", 
		"selectQuerySingleFrom", "selectQueryJoin", "selectQueryTailGroupBy", 
		"selectQueryTailHaving", "groupBy", "groupByExpression", "havingCondition", 
		"join", "joinType", "innerJoin", "fullJoin", "leftJoin", "rightJoin", 
		"propertyQuery", "propertyQueryStart", "propertyQueryHead", "entityQuery", 
		"entityQueryStart", "entityQueryHead", "queryTailWhere", "queryTailOrderBy", 
		"queryTailPagination", "aggregateFunction", "aggregateAvg", "aggregateMin", 
		"aggregateMax", "aggregateSum", "aggregateCount", "orderBy", "orderBySingle", 
		"orderByDirection", "orderByExpression", "pagination", "alias", "whereCondition", 
		"booleanValueExpression", "orPredicate", "andPredicate", "negationPredicate", 
		"booleanAtomicExpression", "parenthesizedBooleanValueExpression", "booleanFunction", 
		"fullTextComparison", "comparison", "value", "generalValue", "variable", 
		"collection", "dateFunction", "now", "contextFunction", "username", "stringFunction", 
		"lower", "upper", "toStringRule", "concatenation", "stringFunctionParameter", 
		"localize", "sourceProperty", "joinFunction", "listIndex", "mapKey", "enumReference", 
		"entityReference", "typeSignature", "identifier", "genericIdentifier", 
		"escapedIdentifier", "literalValue", "dateValue", "calendarOffsetValue", 
		"dateOffset", "timeZoneOffset", "stringValue", "escape", "plainContent", 
		"nullValue", "booleanValue", "decimalValue", "floatValue", "doubleValue", 
		"integerValue", "longValue"
	};

	private static final String[] _LITERAL_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"'*'", "':'", null, null, null, null, null, null, "'('", "')'", "'['", 
		"']'", "'{'", "'}'", "','", "'.'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "Boolean", "Entity", "TypeSignature", "Enum", "Select", "Distinct", 
		"From", "Join", "Full", "Right", "Left", "Where", "Null", "Limit", "Offset", 
		"OrderBy", "Ascending", "Descending", "GroupBy", "Having", "Property", 
		"Of", "AggCount", "AggAvg", "AggMin", "AggMax", "AggSum", "ListIndex", 
		"MapKey", "Lower", "Upper", "ToStringToken", "Concatenation", "Localize", 
		"Username", "Star", "Colon", "FullText", "Now", "And", "Not", "Or", "Operator", 
		"LB", "RB", "LSB", "RSB", "LCB", "RCB", "COMMA", "Dot", "StandardIdentifier", 
		"EscapedIdentifier", "DateFunction", "DateOffset", "TimeZoneOffset", "DecimalLiteral", 
		"FloatLiteral", "DoubleLiteral", "LongBase16Literal", "LongBase10Literal", 
		"IntegerBase16Literal", "IntegerBase10Literal", "StringOpen", "WS", "UnicodeEscape", 
		"EscB", "EscT", "EscN", "EscF", "EscR", "EscSQ", "EscBS", "PlainContent", 
		"StringClose", "KeyWord", "EscapedIdentifierClose"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "GmqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public GmqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class EvaluateContext extends ParserRuleContext {
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode EOF() { return getToken(GmqlParser.EOF, 0); }
		public EvaluateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_evaluate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterEvaluate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitEvaluate(this);
		}
	}

	public final EvaluateContext evaluate() throws RecognitionException {
		EvaluateContext _localctx = new EvaluateContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_evaluate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(184);
			query();
			setState(185);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryContext extends ParserRuleContext {
		public EntityQueryContext entityQuery() {
			return getRuleContext(EntityQueryContext.class,0);
		}
		public PropertyQueryContext propertyQuery() {
			return getRuleContext(PropertyQueryContext.class,0);
		}
		public SelectQueryContext selectQuery() {
			return getRuleContext(SelectQueryContext.class,0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitQuery(this);
		}
	}

	public final QueryContext query() throws RecognitionException {
		QueryContext _localctx = new QueryContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_query);
		try {
			setState(190);
			switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(187);
				entityQuery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(188);
				propertyQuery();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(189);
				selectQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectQueryContext extends ParserRuleContext {
		public SelectQueryStartContext selectQueryStart() {
			return getRuleContext(SelectQueryStartContext.class,0);
		}
		public QueryTailWhereContext queryTailWhere() {
			return getRuleContext(QueryTailWhereContext.class,0);
		}
		public SelectQueryTailGroupByContext selectQueryTailGroupBy() {
			return getRuleContext(SelectQueryTailGroupByContext.class,0);
		}
		public SelectQueryTailHavingContext selectQueryTailHaving() {
			return getRuleContext(SelectQueryTailHavingContext.class,0);
		}
		public QueryTailOrderByContext queryTailOrderBy() {
			return getRuleContext(QueryTailOrderByContext.class,0);
		}
		public QueryTailPaginationContext queryTailPagination() {
			return getRuleContext(QueryTailPaginationContext.class,0);
		}
		public SelectQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQuery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterSelectQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitSelectQuery(this);
		}
	}

	public final SelectQueryContext selectQuery() throws RecognitionException {
		SelectQueryContext _localctx = new SelectQueryContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_selectQuery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(192);
			selectQueryStart();
			setState(194);
			_la = _input.LA(1);
			if (_la==Where) {
				{
				setState(193);
				queryTailWhere();
				}
			}

			setState(197);
			_la = _input.LA(1);
			if (_la==GroupBy) {
				{
				setState(196);
				selectQueryTailGroupBy();
				}
			}

			setState(200);
			_la = _input.LA(1);
			if (_la==Having) {
				{
				setState(199);
				selectQueryTailHaving();
				}
			}

			setState(203);
			_la = _input.LA(1);
			if (_la==OrderBy) {
				{
				setState(202);
				queryTailOrderBy();
				}
			}

			setState(206);
			_la = _input.LA(1);
			if (_la==Limit || _la==Offset) {
				{
				setState(205);
				queryTailPagination();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectQueryStartContext extends ParserRuleContext {
		public SelectQueryHeadContext selectQueryHead() {
			return getRuleContext(SelectQueryHeadContext.class,0);
		}
		public SelectQueryFromContext selectQueryFrom() {
			return getRuleContext(SelectQueryFromContext.class,0);
		}
		public SelectQueryJoinContext selectQueryJoin() {
			return getRuleContext(SelectQueryJoinContext.class,0);
		}
		public SelectQueryStartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQueryStart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterSelectQueryStart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitSelectQueryStart(this);
		}
	}

	public final SelectQueryStartContext selectQueryStart() throws RecognitionException {
		SelectQueryStartContext _localctx = new SelectQueryStartContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_selectQueryStart);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(208);
			selectQueryHead();
			setState(209);
			selectQueryFrom();
			setState(211);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Join) | (1L << Full) | (1L << Right) | (1L << Left))) != 0)) {
				{
				setState(210);
				selectQueryJoin();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectQueryHeadContext extends ParserRuleContext {
		public TerminalNode Select() { return getToken(GmqlParser.Select, 0); }
		public SelectQuerySelectionContext selectQuerySelection() {
			return getRuleContext(SelectQuerySelectionContext.class,0);
		}
		public TerminalNode Distinct() { return getToken(GmqlParser.Distinct, 0); }
		public SelectQueryHeadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQueryHead; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterSelectQueryHead(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitSelectQueryHead(this);
		}
	}

	public final SelectQueryHeadContext selectQueryHead() throws RecognitionException {
		SelectQueryHeadContext _localctx = new SelectQueryHeadContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_selectQueryHead);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(213);
			match(Select);
			setState(215);
			_la = _input.LA(1);
			if (_la==Distinct) {
				{
				setState(214);
				match(Distinct);
				}
			}

			setState(217);
			selectQuerySelection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectQuerySelectionContext extends ParserRuleContext {
		public TerminalNode Star() { return getToken(GmqlParser.Star, 0); }
		public List<SelectQuerySingleSelectionContext> selectQuerySingleSelection() {
			return getRuleContexts(SelectQuerySingleSelectionContext.class);
		}
		public SelectQuerySingleSelectionContext selectQuerySingleSelection(int i) {
			return getRuleContext(SelectQuerySingleSelectionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GmqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GmqlParser.COMMA, i);
		}
		public SelectQuerySelectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQuerySelection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterSelectQuerySelection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitSelectQuerySelection(this);
		}
	}

	public final SelectQuerySelectionContext selectQuerySelection() throws RecognitionException {
		SelectQuerySelectionContext _localctx = new SelectQuerySelectionContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_selectQuerySelection);
		int _la;
		try {
			setState(228);
			switch (_input.LA(1)) {
			case Star:
				enterOuterAlt(_localctx, 1);
				{
				setState(219);
				match(Star);
				}
				break;
			case Boolean:
			case Entity:
			case TypeSignature:
			case Enum:
			case Null:
			case AggCount:
			case AggAvg:
			case AggMin:
			case AggMax:
			case AggSum:
			case ListIndex:
			case MapKey:
			case Lower:
			case Upper:
			case ToStringToken:
			case Concatenation:
			case Localize:
			case Username:
			case Colon:
			case FullText:
			case Now:
			case LB:
			case StandardIdentifier:
			case EscapedIdentifier:
			case DateFunction:
			case DecimalLiteral:
			case FloatLiteral:
			case DoubleLiteral:
			case LongBase16Literal:
			case LongBase10Literal:
			case IntegerBase16Literal:
			case IntegerBase10Literal:
			case StringOpen:
				enterOuterAlt(_localctx, 2);
				{
				setState(220);
				selectQuerySingleSelection();
				setState(225);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(221);
					match(COMMA);
					setState(222);
					selectQuerySingleSelection();
					}
					}
					setState(227);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectQuerySingleSelectionContext extends ParserRuleContext {
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public SelectQuerySingleSelectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQuerySingleSelection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterSelectQuerySingleSelection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitSelectQuerySingleSelection(this);
		}
	}

	public final SelectQuerySingleSelectionContext selectQuerySingleSelection() throws RecognitionException {
		SelectQuerySingleSelectionContext _localctx = new SelectQuerySingleSelectionContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_selectQuerySingleSelection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(230);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectQueryFromContext extends ParserRuleContext {
		public TerminalNode From() { return getToken(GmqlParser.From, 0); }
		public List<SelectQuerySingleFromContext> selectQuerySingleFrom() {
			return getRuleContexts(SelectQuerySingleFromContext.class);
		}
		public SelectQuerySingleFromContext selectQuerySingleFrom(int i) {
			return getRuleContext(SelectQuerySingleFromContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GmqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GmqlParser.COMMA, i);
		}
		public SelectQueryFromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQueryFrom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterSelectQueryFrom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitSelectQueryFrom(this);
		}
	}

	public final SelectQueryFromContext selectQueryFrom() throws RecognitionException {
		SelectQueryFromContext _localctx = new SelectQueryFromContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_selectQueryFrom);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(232);
			match(From);
			setState(233);
			selectQuerySingleFrom();
			setState(238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(234);
				match(COMMA);
				setState(235);
				selectQuerySingleFrom();
				}
				}
				setState(240);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectQuerySingleFromContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public SelectQuerySingleFromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQuerySingleFrom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterSelectQuerySingleFrom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitSelectQuerySingleFrom(this);
		}
	}

	public final SelectQuerySingleFromContext selectQuerySingleFrom() throws RecognitionException {
		SelectQuerySingleFromContext _localctx = new SelectQuerySingleFromContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_selectQuerySingleFrom);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(241);
			identifier();
			setState(243);
			_la = _input.LA(1);
			if (_la==StandardIdentifier || _la==EscapedIdentifier) {
				{
				setState(242);
				alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectQueryJoinContext extends ParserRuleContext {
		public List<JoinContext> join() {
			return getRuleContexts(JoinContext.class);
		}
		public JoinContext join(int i) {
			return getRuleContext(JoinContext.class,i);
		}
		public SelectQueryJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQueryJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterSelectQueryJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitSelectQueryJoin(this);
		}
	}

	public final SelectQueryJoinContext selectQueryJoin() throws RecognitionException {
		SelectQueryJoinContext _localctx = new SelectQueryJoinContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_selectQueryJoin);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(246); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(245);
				join();
				}
				}
				setState(248); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Join) | (1L << Full) | (1L << Right) | (1L << Left))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectQueryTailGroupByContext extends ParserRuleContext {
		public GroupByContext groupBy() {
			return getRuleContext(GroupByContext.class,0);
		}
		public SelectQueryTailGroupByContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQueryTailGroupBy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterSelectQueryTailGroupBy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitSelectQueryTailGroupBy(this);
		}
	}

	public final SelectQueryTailGroupByContext selectQueryTailGroupBy() throws RecognitionException {
		SelectQueryTailGroupByContext _localctx = new SelectQueryTailGroupByContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_selectQueryTailGroupBy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(250);
			groupBy();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectQueryTailHavingContext extends ParserRuleContext {
		public HavingConditionContext havingCondition() {
			return getRuleContext(HavingConditionContext.class,0);
		}
		public SelectQueryTailHavingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQueryTailHaving; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterSelectQueryTailHaving(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitSelectQueryTailHaving(this);
		}
	}

	public final SelectQueryTailHavingContext selectQueryTailHaving() throws RecognitionException {
		SelectQueryTailHavingContext _localctx = new SelectQueryTailHavingContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_selectQueryTailHaving);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(252);
			havingCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByContext extends ParserRuleContext {
		public TerminalNode GroupBy() { return getToken(GmqlParser.GroupBy, 0); }
		public List<GroupByExpressionContext> groupByExpression() {
			return getRuleContexts(GroupByExpressionContext.class);
		}
		public GroupByExpressionContext groupByExpression(int i) {
			return getRuleContext(GroupByExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GmqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GmqlParser.COMMA, i);
		}
		public GroupByContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupBy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterGroupBy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitGroupBy(this);
		}
	}

	public final GroupByContext groupBy() throws RecognitionException {
		GroupByContext _localctx = new GroupByContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_groupBy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(254);
			match(GroupBy);
			setState(255);
			groupByExpression();
			setState(260);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(256);
				match(COMMA);
				setState(257);
				groupByExpression();
				}
				}
				setState(262);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByExpressionContext extends ParserRuleContext {
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public GroupByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterGroupByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitGroupByExpression(this);
		}
	}

	public final GroupByExpressionContext groupByExpression() throws RecognitionException {
		GroupByExpressionContext _localctx = new GroupByExpressionContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_groupByExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(263);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingConditionContext extends ParserRuleContext {
		public TerminalNode Having() { return getToken(GmqlParser.Having, 0); }
		public BooleanValueExpressionContext booleanValueExpression() {
			return getRuleContext(BooleanValueExpressionContext.class,0);
		}
		public HavingConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterHavingCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitHavingCondition(this);
		}
	}

	public final HavingConditionContext havingCondition() throws RecognitionException {
		HavingConditionContext _localctx = new HavingConditionContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_havingCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(265);
			match(Having);
			setState(266);
			booleanValueExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinContext extends ParserRuleContext {
		public JoinTypeContext joinType() {
			return getRuleContext(JoinTypeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public JoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitJoin(this);
		}
	}

	public final JoinContext join() throws RecognitionException {
		JoinContext _localctx = new JoinContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_join);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(268);
			joinType();
			setState(269);
			identifier();
			setState(271);
			_la = _input.LA(1);
			if (_la==StandardIdentifier || _la==EscapedIdentifier) {
				{
				setState(270);
				alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinTypeContext extends ParserRuleContext {
		public InnerJoinContext innerJoin() {
			return getRuleContext(InnerJoinContext.class,0);
		}
		public FullJoinContext fullJoin() {
			return getRuleContext(FullJoinContext.class,0);
		}
		public LeftJoinContext leftJoin() {
			return getRuleContext(LeftJoinContext.class,0);
		}
		public RightJoinContext rightJoin() {
			return getRuleContext(RightJoinContext.class,0);
		}
		public JoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterJoinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitJoinType(this);
		}
	}

	public final JoinTypeContext joinType() throws RecognitionException {
		JoinTypeContext _localctx = new JoinTypeContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_joinType);
		try {
			setState(277);
			switch (_input.LA(1)) {
			case Join:
				enterOuterAlt(_localctx, 1);
				{
				setState(273);
				innerJoin();
				}
				break;
			case Full:
				enterOuterAlt(_localctx, 2);
				{
				setState(274);
				fullJoin();
				}
				break;
			case Left:
				enterOuterAlt(_localctx, 3);
				{
				setState(275);
				leftJoin();
				}
				break;
			case Right:
				enterOuterAlt(_localctx, 4);
				{
				setState(276);
				rightJoin();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InnerJoinContext extends ParserRuleContext {
		public TerminalNode Join() { return getToken(GmqlParser.Join, 0); }
		public InnerJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_innerJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterInnerJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitInnerJoin(this);
		}
	}

	public final InnerJoinContext innerJoin() throws RecognitionException {
		InnerJoinContext _localctx = new InnerJoinContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_innerJoin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(279);
			match(Join);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullJoinContext extends ParserRuleContext {
		public TerminalNode Full() { return getToken(GmqlParser.Full, 0); }
		public TerminalNode Join() { return getToken(GmqlParser.Join, 0); }
		public FullJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterFullJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitFullJoin(this);
		}
	}

	public final FullJoinContext fullJoin() throws RecognitionException {
		FullJoinContext _localctx = new FullJoinContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_fullJoin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(281);
			match(Full);
			setState(282);
			match(Join);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeftJoinContext extends ParserRuleContext {
		public TerminalNode Left() { return getToken(GmqlParser.Left, 0); }
		public TerminalNode Join() { return getToken(GmqlParser.Join, 0); }
		public LeftJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leftJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterLeftJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitLeftJoin(this);
		}
	}

	public final LeftJoinContext leftJoin() throws RecognitionException {
		LeftJoinContext _localctx = new LeftJoinContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_leftJoin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(284);
			match(Left);
			setState(285);
			match(Join);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RightJoinContext extends ParserRuleContext {
		public TerminalNode Right() { return getToken(GmqlParser.Right, 0); }
		public TerminalNode Join() { return getToken(GmqlParser.Join, 0); }
		public RightJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rightJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterRightJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitRightJoin(this);
		}
	}

	public final RightJoinContext rightJoin() throws RecognitionException {
		RightJoinContext _localctx = new RightJoinContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_rightJoin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(287);
			match(Right);
			setState(288);
			match(Join);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PropertyQueryContext extends ParserRuleContext {
		public PropertyQueryStartContext propertyQueryStart() {
			return getRuleContext(PropertyQueryStartContext.class,0);
		}
		public QueryTailWhereContext queryTailWhere() {
			return getRuleContext(QueryTailWhereContext.class,0);
		}
		public QueryTailOrderByContext queryTailOrderBy() {
			return getRuleContext(QueryTailOrderByContext.class,0);
		}
		public QueryTailPaginationContext queryTailPagination() {
			return getRuleContext(QueryTailPaginationContext.class,0);
		}
		public PropertyQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyQuery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterPropertyQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitPropertyQuery(this);
		}
	}

	public final PropertyQueryContext propertyQuery() throws RecognitionException {
		PropertyQueryContext _localctx = new PropertyQueryContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_propertyQuery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(290);
			propertyQueryStart();
			setState(292);
			_la = _input.LA(1);
			if (_la==Where) {
				{
				setState(291);
				queryTailWhere();
				}
			}

			setState(295);
			_la = _input.LA(1);
			if (_la==OrderBy) {
				{
				setState(294);
				queryTailOrderBy();
				}
			}

			setState(298);
			_la = _input.LA(1);
			if (_la==Limit || _la==Offset) {
				{
				setState(297);
				queryTailPagination();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PropertyQueryStartContext extends ParserRuleContext {
		public TerminalNode Property() { return getToken(GmqlParser.Property, 0); }
		public PropertyQueryHeadContext propertyQueryHead() {
			return getRuleContext(PropertyQueryHeadContext.class,0);
		}
		public TerminalNode Of() { return getToken(GmqlParser.Of, 0); }
		public EntityReferenceContext entityReference() {
			return getRuleContext(EntityReferenceContext.class,0);
		}
		public TerminalNode Distinct() { return getToken(GmqlParser.Distinct, 0); }
		public PropertyQueryStartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyQueryStart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterPropertyQueryStart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitPropertyQueryStart(this);
		}
	}

	public final PropertyQueryStartContext propertyQueryStart() throws RecognitionException {
		PropertyQueryStartContext _localctx = new PropertyQueryStartContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_propertyQueryStart);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(301);
			_la = _input.LA(1);
			if (_la==Distinct) {
				{
				setState(300);
				match(Distinct);
				}
			}

			setState(303);
			match(Property);
			setState(304);
			propertyQueryHead();
			setState(305);
			match(Of);
			setState(306);
			entityReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PropertyQueryHeadContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public PropertyQueryHeadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyQueryHead; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterPropertyQueryHead(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitPropertyQueryHead(this);
		}
	}

	public final PropertyQueryHeadContext propertyQueryHead() throws RecognitionException {
		PropertyQueryHeadContext _localctx = new PropertyQueryHeadContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_propertyQueryHead);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(308);
			identifier();
			setState(310);
			_la = _input.LA(1);
			if (_la==StandardIdentifier || _la==EscapedIdentifier) {
				{
				setState(309);
				alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EntityQueryContext extends ParserRuleContext {
		public EntityQueryStartContext entityQueryStart() {
			return getRuleContext(EntityQueryStartContext.class,0);
		}
		public QueryTailWhereContext queryTailWhere() {
			return getRuleContext(QueryTailWhereContext.class,0);
		}
		public QueryTailOrderByContext queryTailOrderBy() {
			return getRuleContext(QueryTailOrderByContext.class,0);
		}
		public QueryTailPaginationContext queryTailPagination() {
			return getRuleContext(QueryTailPaginationContext.class,0);
		}
		public EntityQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entityQuery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterEntityQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitEntityQuery(this);
		}
	}

	public final EntityQueryContext entityQuery() throws RecognitionException {
		EntityQueryContext _localctx = new EntityQueryContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_entityQuery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(312);
			entityQueryStart();
			setState(314);
			_la = _input.LA(1);
			if (_la==Where) {
				{
				setState(313);
				queryTailWhere();
				}
			}

			setState(317);
			_la = _input.LA(1);
			if (_la==OrderBy) {
				{
				setState(316);
				queryTailOrderBy();
				}
			}

			setState(320);
			_la = _input.LA(1);
			if (_la==Limit || _la==Offset) {
				{
				setState(319);
				queryTailPagination();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EntityQueryStartContext extends ParserRuleContext {
		public TerminalNode From() { return getToken(GmqlParser.From, 0); }
		public EntityQueryHeadContext entityQueryHead() {
			return getRuleContext(EntityQueryHeadContext.class,0);
		}
		public TerminalNode Distinct() { return getToken(GmqlParser.Distinct, 0); }
		public EntityQueryStartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entityQueryStart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterEntityQueryStart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitEntityQueryStart(this);
		}
	}

	public final EntityQueryStartContext entityQueryStart() throws RecognitionException {
		EntityQueryStartContext _localctx = new EntityQueryStartContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_entityQueryStart);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(323);
			_la = _input.LA(1);
			if (_la==Distinct) {
				{
				setState(322);
				match(Distinct);
				}
			}

			setState(325);
			match(From);
			setState(326);
			entityQueryHead();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EntityQueryHeadContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public EntityQueryHeadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entityQueryHead; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterEntityQueryHead(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitEntityQueryHead(this);
		}
	}

	public final EntityQueryHeadContext entityQueryHead() throws RecognitionException {
		EntityQueryHeadContext _localctx = new EntityQueryHeadContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_entityQueryHead);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(328);
			identifier();
			setState(330);
			_la = _input.LA(1);
			if (_la==StandardIdentifier || _la==EscapedIdentifier) {
				{
				setState(329);
				alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryTailWhereContext extends ParserRuleContext {
		public WhereConditionContext whereCondition() {
			return getRuleContext(WhereConditionContext.class,0);
		}
		public QueryTailWhereContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryTailWhere; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterQueryTailWhere(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitQueryTailWhere(this);
		}
	}

	public final QueryTailWhereContext queryTailWhere() throws RecognitionException {
		QueryTailWhereContext _localctx = new QueryTailWhereContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_queryTailWhere);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(332);
			whereCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryTailOrderByContext extends ParserRuleContext {
		public OrderByContext orderBy() {
			return getRuleContext(OrderByContext.class,0);
		}
		public QueryTailOrderByContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryTailOrderBy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterQueryTailOrderBy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitQueryTailOrderBy(this);
		}
	}

	public final QueryTailOrderByContext queryTailOrderBy() throws RecognitionException {
		QueryTailOrderByContext _localctx = new QueryTailOrderByContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_queryTailOrderBy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(334);
			orderBy();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryTailPaginationContext extends ParserRuleContext {
		public PaginationContext pagination() {
			return getRuleContext(PaginationContext.class,0);
		}
		public QueryTailPaginationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryTailPagination; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterQueryTailPagination(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitQueryTailPagination(this);
		}
	}

	public final QueryTailPaginationContext queryTailPagination() throws RecognitionException {
		QueryTailPaginationContext _localctx = new QueryTailPaginationContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_queryTailPagination);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(336);
			pagination();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateFunctionContext extends ParserRuleContext {
		public AggregateCountContext aggregateCount() {
			return getRuleContext(AggregateCountContext.class,0);
		}
		public AggregateAvgContext aggregateAvg() {
			return getRuleContext(AggregateAvgContext.class,0);
		}
		public AggregateMinContext aggregateMin() {
			return getRuleContext(AggregateMinContext.class,0);
		}
		public AggregateMaxContext aggregateMax() {
			return getRuleContext(AggregateMaxContext.class,0);
		}
		public AggregateSumContext aggregateSum() {
			return getRuleContext(AggregateSumContext.class,0);
		}
		public AggregateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterAggregateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitAggregateFunction(this);
		}
	}

	public final AggregateFunctionContext aggregateFunction() throws RecognitionException {
		AggregateFunctionContext _localctx = new AggregateFunctionContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_aggregateFunction);
		try {
			setState(343);
			switch (_input.LA(1)) {
			case AggCount:
				enterOuterAlt(_localctx, 1);
				{
				setState(338);
				aggregateCount();
				}
				break;
			case AggAvg:
				enterOuterAlt(_localctx, 2);
				{
				setState(339);
				aggregateAvg();
				}
				break;
			case AggMin:
				enterOuterAlt(_localctx, 3);
				{
				setState(340);
				aggregateMin();
				}
				break;
			case AggMax:
				enterOuterAlt(_localctx, 4);
				{
				setState(341);
				aggregateMax();
				}
				break;
			case AggSum:
				enterOuterAlt(_localctx, 5);
				{
				setState(342);
				aggregateSum();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateAvgContext extends ParserRuleContext {
		public TerminalNode AggAvg() { return getToken(GmqlParser.AggAvg, 0); }
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public SourcePropertyContext sourceProperty() {
			return getRuleContext(SourcePropertyContext.class,0);
		}
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public AggregateAvgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateAvg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterAggregateAvg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitAggregateAvg(this);
		}
	}

	public final AggregateAvgContext aggregateAvg() throws RecognitionException {
		AggregateAvgContext _localctx = new AggregateAvgContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_aggregateAvg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(345);
			match(AggAvg);
			setState(346);
			match(LB);
			setState(347);
			sourceProperty();
			setState(348);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateMinContext extends ParserRuleContext {
		public TerminalNode AggMin() { return getToken(GmqlParser.AggMin, 0); }
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public SourcePropertyContext sourceProperty() {
			return getRuleContext(SourcePropertyContext.class,0);
		}
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public AggregateMinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateMin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterAggregateMin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitAggregateMin(this);
		}
	}

	public final AggregateMinContext aggregateMin() throws RecognitionException {
		AggregateMinContext _localctx = new AggregateMinContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_aggregateMin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(350);
			match(AggMin);
			setState(351);
			match(LB);
			setState(352);
			sourceProperty();
			setState(353);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateMaxContext extends ParserRuleContext {
		public TerminalNode AggMax() { return getToken(GmqlParser.AggMax, 0); }
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public SourcePropertyContext sourceProperty() {
			return getRuleContext(SourcePropertyContext.class,0);
		}
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public AggregateMaxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateMax; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterAggregateMax(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitAggregateMax(this);
		}
	}

	public final AggregateMaxContext aggregateMax() throws RecognitionException {
		AggregateMaxContext _localctx = new AggregateMaxContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_aggregateMax);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(355);
			match(AggMax);
			setState(356);
			match(LB);
			setState(357);
			sourceProperty();
			setState(358);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateSumContext extends ParserRuleContext {
		public TerminalNode AggSum() { return getToken(GmqlParser.AggSum, 0); }
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public SourcePropertyContext sourceProperty() {
			return getRuleContext(SourcePropertyContext.class,0);
		}
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public AggregateSumContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateSum; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterAggregateSum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitAggregateSum(this);
		}
	}

	public final AggregateSumContext aggregateSum() throws RecognitionException {
		AggregateSumContext _localctx = new AggregateSumContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_aggregateSum);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(360);
			match(AggSum);
			setState(361);
			match(LB);
			setState(362);
			sourceProperty();
			setState(363);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateCountContext extends ParserRuleContext {
		public TerminalNode AggCount() { return getToken(GmqlParser.AggCount, 0); }
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public SourcePropertyContext sourceProperty() {
			return getRuleContext(SourcePropertyContext.class,0);
		}
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public TerminalNode COMMA() { return getToken(GmqlParser.COMMA, 0); }
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public AggregateCountContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateCount; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterAggregateCount(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitAggregateCount(this);
		}
	}

	public final AggregateCountContext aggregateCount() throws RecognitionException {
		AggregateCountContext _localctx = new AggregateCountContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_aggregateCount);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(365);
			match(AggCount);
			setState(366);
			match(LB);
			setState(367);
			sourceProperty();
			setState(370);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(368);
				match(COMMA);
				setState(369);
				booleanValue();
				}
			}

			setState(372);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByContext extends ParserRuleContext {
		public TerminalNode OrderBy() { return getToken(GmqlParser.OrderBy, 0); }
		public List<OrderBySingleContext> orderBySingle() {
			return getRuleContexts(OrderBySingleContext.class);
		}
		public OrderBySingleContext orderBySingle(int i) {
			return getRuleContext(OrderBySingleContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GmqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GmqlParser.COMMA, i);
		}
		public OrderByContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderBy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterOrderBy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitOrderBy(this);
		}
	}

	public final OrderByContext orderBy() throws RecognitionException {
		OrderByContext _localctx = new OrderByContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_orderBy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(374);
			match(OrderBy);
			setState(375);
			orderBySingle();
			setState(380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(376);
				match(COMMA);
				setState(377);
				orderBySingle();
				}
				}
				setState(382);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderBySingleContext extends ParserRuleContext {
		public OrderByExpressionContext orderByExpression() {
			return getRuleContext(OrderByExpressionContext.class,0);
		}
		public OrderByDirectionContext orderByDirection() {
			return getRuleContext(OrderByDirectionContext.class,0);
		}
		public OrderBySingleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderBySingle; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterOrderBySingle(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitOrderBySingle(this);
		}
	}

	public final OrderBySingleContext orderBySingle() throws RecognitionException {
		OrderBySingleContext _localctx = new OrderBySingleContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_orderBySingle);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(383);
			orderByExpression();
			setState(385);
			_la = _input.LA(1);
			if (_la==Ascending || _la==Descending) {
				{
				setState(384);
				orderByDirection();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByDirectionContext extends ParserRuleContext {
		public OrderByDirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByDirection; }
	 
		public OrderByDirectionContext() { }
		public void copyFrom(OrderByDirectionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AscendingOrderByDirectionContext extends OrderByDirectionContext {
		public TerminalNode Ascending() { return getToken(GmqlParser.Ascending, 0); }
		public AscendingOrderByDirectionContext(OrderByDirectionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterAscendingOrderByDirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitAscendingOrderByDirection(this);
		}
	}
	public static class DescendingOrderByDirectionContext extends OrderByDirectionContext {
		public TerminalNode Descending() { return getToken(GmqlParser.Descending, 0); }
		public DescendingOrderByDirectionContext(OrderByDirectionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterDescendingOrderByDirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitDescendingOrderByDirection(this);
		}
	}

	public final OrderByDirectionContext orderByDirection() throws RecognitionException {
		OrderByDirectionContext _localctx = new OrderByDirectionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_orderByDirection);
		try {
			setState(389);
			switch (_input.LA(1)) {
			case Ascending:
				_localctx = new AscendingOrderByDirectionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(387);
				match(Ascending);
				}
				break;
			case Descending:
				_localctx = new DescendingOrderByDirectionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(388);
				match(Descending);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByExpressionContext extends ParserRuleContext {
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterOrderByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitOrderByExpression(this);
		}
	}

	public final OrderByExpressionContext orderByExpression() throws RecognitionException {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_orderByExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(391);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PaginationContext extends ParserRuleContext {
		public PaginationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pagination; }
	 
		public PaginationContext() { }
		public void copyFrom(PaginationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PaginationOffsetContext extends PaginationContext {
		public TerminalNode Offset() { return getToken(GmqlParser.Offset, 0); }
		public IntegerValueContext integerValue() {
			return getRuleContext(IntegerValueContext.class,0);
		}
		public PaginationOffsetContext(PaginationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterPaginationOffset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitPaginationOffset(this);
		}
	}
	public static class PaginationLimitContext extends PaginationContext {
		public IntegerValueContext limit;
		public IntegerValueContext offset;
		public TerminalNode Limit() { return getToken(GmqlParser.Limit, 0); }
		public List<IntegerValueContext> integerValue() {
			return getRuleContexts(IntegerValueContext.class);
		}
		public IntegerValueContext integerValue(int i) {
			return getRuleContext(IntegerValueContext.class,i);
		}
		public TerminalNode Offset() { return getToken(GmqlParser.Offset, 0); }
		public PaginationLimitContext(PaginationContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterPaginationLimit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitPaginationLimit(this);
		}
	}

	public final PaginationContext pagination() throws RecognitionException {
		PaginationContext _localctx = new PaginationContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_pagination);
		int _la;
		try {
			setState(401);
			switch (_input.LA(1)) {
			case Limit:
				_localctx = new PaginationLimitContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(393);
				match(Limit);
				setState(394);
				((PaginationLimitContext)_localctx).limit = integerValue();
				setState(397);
				_la = _input.LA(1);
				if (_la==Offset) {
					{
					setState(395);
					match(Offset);
					setState(396);
					((PaginationLimitContext)_localctx).offset = integerValue();
					}
				}

				}
				break;
			case Offset:
				_localctx = new PaginationOffsetContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(399);
				match(Offset);
				setState(400);
				integerValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasContext extends ParserRuleContext {
		public GenericIdentifierContext genericIdentifier() {
			return getRuleContext(GenericIdentifierContext.class,0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitAlias(this);
		}
	}

	public final AliasContext alias() throws RecognitionException {
		AliasContext _localctx = new AliasContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(403);
			genericIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereConditionContext extends ParserRuleContext {
		public TerminalNode Where() { return getToken(GmqlParser.Where, 0); }
		public BooleanValueExpressionContext booleanValueExpression() {
			return getRuleContext(BooleanValueExpressionContext.class,0);
		}
		public WhereConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterWhereCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitWhereCondition(this);
		}
	}

	public final WhereConditionContext whereCondition() throws RecognitionException {
		WhereConditionContext _localctx = new WhereConditionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_whereCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(405);
			match(Where);
			setState(406);
			booleanValueExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanValueExpressionContext extends ParserRuleContext {
		public OrPredicateContext orPredicate() {
			return getRuleContext(OrPredicateContext.class,0);
		}
		public BooleanValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterBooleanValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitBooleanValueExpression(this);
		}
	}

	public final BooleanValueExpressionContext booleanValueExpression() throws RecognitionException {
		BooleanValueExpressionContext _localctx = new BooleanValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_booleanValueExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(408);
			orPredicate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrPredicateContext extends ParserRuleContext {
		public List<AndPredicateContext> andPredicate() {
			return getRuleContexts(AndPredicateContext.class);
		}
		public AndPredicateContext andPredicate(int i) {
			return getRuleContext(AndPredicateContext.class,i);
		}
		public List<TerminalNode> Or() { return getTokens(GmqlParser.Or); }
		public TerminalNode Or(int i) {
			return getToken(GmqlParser.Or, i);
		}
		public OrPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterOrPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitOrPredicate(this);
		}
	}

	public final OrPredicateContext orPredicate() throws RecognitionException {
		OrPredicateContext _localctx = new OrPredicateContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_orPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(410);
			andPredicate();
			setState(415);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Or) {
				{
				{
				setState(411);
				match(Or);
				setState(412);
				andPredicate();
				}
				}
				setState(417);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AndPredicateContext extends ParserRuleContext {
		public List<NegationPredicateContext> negationPredicate() {
			return getRuleContexts(NegationPredicateContext.class);
		}
		public NegationPredicateContext negationPredicate(int i) {
			return getRuleContext(NegationPredicateContext.class,i);
		}
		public List<TerminalNode> And() { return getTokens(GmqlParser.And); }
		public TerminalNode And(int i) {
			return getToken(GmqlParser.And, i);
		}
		public AndPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_andPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterAndPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitAndPredicate(this);
		}
	}

	public final AndPredicateContext andPredicate() throws RecognitionException {
		AndPredicateContext _localctx = new AndPredicateContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_andPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(418);
			negationPredicate();
			setState(423);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==And) {
				{
				{
				setState(419);
				match(And);
				setState(420);
				negationPredicate();
				}
				}
				setState(425);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NegationPredicateContext extends ParserRuleContext {
		public BooleanAtomicExpressionContext booleanAtomicExpression() {
			return getRuleContext(BooleanAtomicExpressionContext.class,0);
		}
		public TerminalNode Not() { return getToken(GmqlParser.Not, 0); }
		public NegationPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_negationPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterNegationPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitNegationPredicate(this);
		}
	}

	public final NegationPredicateContext negationPredicate() throws RecognitionException {
		NegationPredicateContext _localctx = new NegationPredicateContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_negationPredicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(427);
			_la = _input.LA(1);
			if (_la==Not) {
				{
				setState(426);
				match(Not);
				}
			}

			setState(429);
			booleanAtomicExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanAtomicExpressionContext extends ParserRuleContext {
		public ParenthesizedBooleanValueExpressionContext parenthesizedBooleanValueExpression() {
			return getRuleContext(ParenthesizedBooleanValueExpressionContext.class,0);
		}
		public ComparisonContext comparison() {
			return getRuleContext(ComparisonContext.class,0);
		}
		public BooleanAtomicExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanAtomicExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterBooleanAtomicExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitBooleanAtomicExpression(this);
		}
	}

	public final BooleanAtomicExpressionContext booleanAtomicExpression() throws RecognitionException {
		BooleanAtomicExpressionContext _localctx = new BooleanAtomicExpressionContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_booleanAtomicExpression);
		try {
			setState(433);
			switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(431);
				parenthesizedBooleanValueExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(432);
				comparison();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParenthesizedBooleanValueExpressionContext extends ParserRuleContext {
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public BooleanValueExpressionContext booleanValueExpression() {
			return getRuleContext(BooleanValueExpressionContext.class,0);
		}
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public ParenthesizedBooleanValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parenthesizedBooleanValueExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterParenthesizedBooleanValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitParenthesizedBooleanValueExpression(this);
		}
	}

	public final ParenthesizedBooleanValueExpressionContext parenthesizedBooleanValueExpression() throws RecognitionException {
		ParenthesizedBooleanValueExpressionContext _localctx = new ParenthesizedBooleanValueExpressionContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_parenthesizedBooleanValueExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(435);
			match(LB);
			setState(436);
			booleanValueExpression();
			setState(437);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanFunctionContext extends ParserRuleContext {
		public FullTextComparisonContext fullTextComparison() {
			return getRuleContext(FullTextComparisonContext.class,0);
		}
		public BooleanFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterBooleanFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitBooleanFunction(this);
		}
	}

	public final BooleanFunctionContext booleanFunction() throws RecognitionException {
		BooleanFunctionContext _localctx = new BooleanFunctionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_booleanFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(439);
			fullTextComparison();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullTextComparisonContext extends ParserRuleContext {
		public TerminalNode FullText() { return getToken(GmqlParser.FullText, 0); }
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public StringValueContext stringValue() {
			return getRuleContext(StringValueContext.class,0);
		}
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(GmqlParser.COMMA, 0); }
		public FullTextComparisonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullTextComparison; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterFullTextComparison(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitFullTextComparison(this);
		}
	}

	public final FullTextComparisonContext fullTextComparison() throws RecognitionException {
		FullTextComparisonContext _localctx = new FullTextComparisonContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_fullTextComparison);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(441);
			match(FullText);
			setState(442);
			match(LB);
			setState(446);
			_la = _input.LA(1);
			if (_la==StandardIdentifier || _la==EscapedIdentifier) {
				{
				setState(443);
				alias();
				setState(444);
				match(COMMA);
				}
			}

			setState(448);
			stringValue();
			setState(449);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonContext extends ParserRuleContext {
		public ComparisonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison; }
	 
		public ComparisonContext() { }
		public void copyFrom(ComparisonContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class BooleanFunctionComparisonContext extends ComparisonContext {
		public BooleanFunctionContext booleanFunction() {
			return getRuleContext(BooleanFunctionContext.class,0);
		}
		public BooleanFunctionComparisonContext(ComparisonContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterBooleanFunctionComparison(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitBooleanFunctionComparison(this);
		}
	}
	public static class PredicateComparisonContext extends ComparisonContext {
		public ValueContext leftOperand;
		public ValueContext rightOperand;
		public TerminalNode Operator() { return getToken(GmqlParser.Operator, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public PredicateComparisonContext(ComparisonContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterPredicateComparison(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitPredicateComparison(this);
		}
	}

	public final ComparisonContext comparison() throws RecognitionException {
		ComparisonContext _localctx = new ComparisonContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_comparison);
		try {
			setState(456);
			switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
			case 1:
				_localctx = new PredicateComparisonContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(451);
				((PredicateComparisonContext)_localctx).leftOperand = value();
				setState(452);
				match(Operator);
				setState(453);
				((PredicateComparisonContext)_localctx).rightOperand = value();
				}
				break;
			case 2:
				_localctx = new BooleanFunctionComparisonContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(455);
				booleanFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValueContext extends ParserRuleContext {
		public LiteralValueContext literalValue() {
			return getRuleContext(LiteralValueContext.class,0);
		}
		public NullValueContext nullValue() {
			return getRuleContext(NullValueContext.class,0);
		}
		public EntityReferenceContext entityReference() {
			return getRuleContext(EntityReferenceContext.class,0);
		}
		public EnumReferenceContext enumReference() {
			return getRuleContext(EnumReferenceContext.class,0);
		}
		public SourcePropertyContext sourceProperty() {
			return getRuleContext(SourcePropertyContext.class,0);
		}
		public StringFunctionContext stringFunction() {
			return getRuleContext(StringFunctionContext.class,0);
		}
		public BooleanFunctionContext booleanFunction() {
			return getRuleContext(BooleanFunctionContext.class,0);
		}
		public DateFunctionContext dateFunction() {
			return getRuleContext(DateFunctionContext.class,0);
		}
		public TypeSignatureContext typeSignature() {
			return getRuleContext(TypeSignatureContext.class,0);
		}
		public CollectionContext collection() {
			return getRuleContext(CollectionContext.class,0);
		}
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public GeneralValueContext generalValue() {
			return getRuleContext(GeneralValueContext.class,0);
		}
		public ContextFunctionContext contextFunction() {
			return getRuleContext(ContextFunctionContext.class,0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitValue(this);
		}
	}

	public final ValueContext value() throws RecognitionException {
		ValueContext _localctx = new ValueContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_value);
		try {
			setState(471);
			switch (_input.LA(1)) {
			case Boolean:
			case DateFunction:
			case DecimalLiteral:
			case FloatLiteral:
			case DoubleLiteral:
			case LongBase16Literal:
			case LongBase10Literal:
			case IntegerBase16Literal:
			case IntegerBase10Literal:
			case StringOpen:
				enterOuterAlt(_localctx, 1);
				{
				setState(458);
				literalValue();
				}
				break;
			case Null:
				enterOuterAlt(_localctx, 2);
				{
				setState(459);
				nullValue();
				}
				break;
			case Entity:
				enterOuterAlt(_localctx, 3);
				{
				setState(460);
				entityReference();
				}
				break;
			case Enum:
				enterOuterAlt(_localctx, 4);
				{
				setState(461);
				enumReference();
				}
				break;
			case StandardIdentifier:
			case EscapedIdentifier:
				enterOuterAlt(_localctx, 5);
				{
				setState(462);
				sourceProperty();
				}
				break;
			case Lower:
			case Upper:
			case ToStringToken:
			case Concatenation:
			case Localize:
				enterOuterAlt(_localctx, 6);
				{
				setState(463);
				stringFunction();
				}
				break;
			case FullText:
				enterOuterAlt(_localctx, 7);
				{
				setState(464);
				booleanFunction();
				}
				break;
			case Now:
				enterOuterAlt(_localctx, 8);
				{
				setState(465);
				dateFunction();
				}
				break;
			case TypeSignature:
				enterOuterAlt(_localctx, 9);
				{
				setState(466);
				typeSignature();
				}
				break;
			case LB:
				enterOuterAlt(_localctx, 10);
				{
				setState(467);
				collection();
				}
				break;
			case Colon:
				enterOuterAlt(_localctx, 11);
				{
				setState(468);
				variable();
				}
				break;
			case AggCount:
			case AggAvg:
			case AggMin:
			case AggMax:
			case AggSum:
			case ListIndex:
			case MapKey:
				enterOuterAlt(_localctx, 12);
				{
				setState(469);
				generalValue();
				}
				break;
			case Username:
				enterOuterAlt(_localctx, 13);
				{
				setState(470);
				contextFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GeneralValueContext extends ParserRuleContext {
		public JoinFunctionContext joinFunction() {
			return getRuleContext(JoinFunctionContext.class,0);
		}
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public GeneralValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generalValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterGeneralValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitGeneralValue(this);
		}
	}

	public final GeneralValueContext generalValue() throws RecognitionException {
		GeneralValueContext _localctx = new GeneralValueContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_generalValue);
		try {
			setState(475);
			switch (_input.LA(1)) {
			case ListIndex:
			case MapKey:
				enterOuterAlt(_localctx, 1);
				{
				setState(473);
				joinFunction();
				}
				break;
			case AggCount:
			case AggAvg:
			case AggMin:
			case AggMax:
			case AggSum:
				enterOuterAlt(_localctx, 2);
				{
				setState(474);
				aggregateFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableContext extends ParserRuleContext {
		public TerminalNode Colon() { return getToken(GmqlParser.Colon, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public TerminalNode COMMA() { return getToken(GmqlParser.COMMA, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitVariable(this);
		}
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(477);
			match(Colon);
			setState(478);
			identifier();
			setState(487);
			_la = _input.LA(1);
			if (_la==LB) {
				{
				setState(479);
				match(LB);
				setState(480);
				identifier();
				setState(483);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(481);
					match(COMMA);
					setState(482);
					value();
					}
				}

				setState(485);
				match(RB);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionContext extends ParserRuleContext {
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GmqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GmqlParser.COMMA, i);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterCollection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitCollection(this);
		}
	}

	public final CollectionContext collection() throws RecognitionException {
		CollectionContext _localctx = new CollectionContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_collection);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(489);
			match(LB);
			setState(490);
			value();
			setState(495);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(491);
				match(COMMA);
				setState(492);
				value();
				}
				}
				setState(497);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(498);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DateFunctionContext extends ParserRuleContext {
		public NowContext now() {
			return getRuleContext(NowContext.class,0);
		}
		public DateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterDateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitDateFunction(this);
		}
	}

	public final DateFunctionContext dateFunction() throws RecognitionException {
		DateFunctionContext _localctx = new DateFunctionContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_dateFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(500);
			now();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NowContext extends ParserRuleContext {
		public TerminalNode Now() { return getToken(GmqlParser.Now, 0); }
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public NowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_now; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterNow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitNow(this);
		}
	}

	public final NowContext now() throws RecognitionException {
		NowContext _localctx = new NowContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_now);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(502);
			match(Now);
			setState(503);
			match(LB);
			setState(504);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ContextFunctionContext extends ParserRuleContext {
		public UsernameContext username() {
			return getRuleContext(UsernameContext.class,0);
		}
		public ContextFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_contextFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterContextFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitContextFunction(this);
		}
	}

	public final ContextFunctionContext contextFunction() throws RecognitionException {
		ContextFunctionContext _localctx = new ContextFunctionContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_contextFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(506);
			username();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsernameContext extends ParserRuleContext {
		public TerminalNode Username() { return getToken(GmqlParser.Username, 0); }
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public UsernameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_username; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterUsername(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitUsername(this);
		}
	}

	public final UsernameContext username() throws RecognitionException {
		UsernameContext _localctx = new UsernameContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_username);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(508);
			match(Username);
			setState(509);
			match(LB);
			setState(510);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringFunctionContext extends ParserRuleContext {
		public LowerContext lower() {
			return getRuleContext(LowerContext.class,0);
		}
		public UpperContext upper() {
			return getRuleContext(UpperContext.class,0);
		}
		public ToStringRuleContext toStringRule() {
			return getRuleContext(ToStringRuleContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public LocalizeContext localize() {
			return getRuleContext(LocalizeContext.class,0);
		}
		public StringFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterStringFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitStringFunction(this);
		}
	}

	public final StringFunctionContext stringFunction() throws RecognitionException {
		StringFunctionContext _localctx = new StringFunctionContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_stringFunction);
		try {
			setState(517);
			switch (_input.LA(1)) {
			case Lower:
				enterOuterAlt(_localctx, 1);
				{
				setState(512);
				lower();
				}
				break;
			case Upper:
				enterOuterAlt(_localctx, 2);
				{
				setState(513);
				upper();
				}
				break;
			case ToStringToken:
				enterOuterAlt(_localctx, 3);
				{
				setState(514);
				toStringRule();
				}
				break;
			case Concatenation:
				enterOuterAlt(_localctx, 4);
				{
				setState(515);
				concatenation();
				}
				break;
			case Localize:
				enterOuterAlt(_localctx, 5);
				{
				setState(516);
				localize();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LowerContext extends ParserRuleContext {
		public TerminalNode Lower() { return getToken(GmqlParser.Lower, 0); }
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public StringFunctionParameterContext stringFunctionParameter() {
			return getRuleContext(StringFunctionParameterContext.class,0);
		}
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public LowerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lower; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterLower(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitLower(this);
		}
	}

	public final LowerContext lower() throws RecognitionException {
		LowerContext _localctx = new LowerContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_lower);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(519);
			match(Lower);
			setState(520);
			match(LB);
			setState(521);
			stringFunctionParameter();
			setState(522);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpperContext extends ParserRuleContext {
		public TerminalNode Upper() { return getToken(GmqlParser.Upper, 0); }
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public StringFunctionParameterContext stringFunctionParameter() {
			return getRuleContext(StringFunctionParameterContext.class,0);
		}
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public UpperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterUpper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitUpper(this);
		}
	}

	public final UpperContext upper() throws RecognitionException {
		UpperContext _localctx = new UpperContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_upper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(524);
			match(Upper);
			setState(525);
			match(LB);
			setState(526);
			stringFunctionParameter();
			setState(527);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ToStringRuleContext extends ParserRuleContext {
		public TerminalNode ToStringToken() { return getToken(GmqlParser.ToStringToken, 0); }
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public StringFunctionParameterContext stringFunctionParameter() {
			return getRuleContext(StringFunctionParameterContext.class,0);
		}
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public ToStringRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_toStringRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterToStringRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitToStringRule(this);
		}
	}

	public final ToStringRuleContext toStringRule() throws RecognitionException {
		ToStringRuleContext _localctx = new ToStringRuleContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_toStringRule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(529);
			match(ToStringToken);
			setState(530);
			match(LB);
			setState(531);
			stringFunctionParameter();
			setState(532);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConcatenationContext extends ParserRuleContext {
		public TerminalNode Concatenation() { return getToken(GmqlParser.Concatenation, 0); }
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public List<StringFunctionParameterContext> stringFunctionParameter() {
			return getRuleContexts(StringFunctionParameterContext.class);
		}
		public StringFunctionParameterContext stringFunctionParameter(int i) {
			return getRuleContext(StringFunctionParameterContext.class,i);
		}
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GmqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GmqlParser.COMMA, i);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterConcatenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitConcatenation(this);
		}
	}

	public final ConcatenationContext concatenation() throws RecognitionException {
		ConcatenationContext _localctx = new ConcatenationContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_concatenation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(534);
			match(Concatenation);
			setState(535);
			match(LB);
			setState(536);
			stringFunctionParameter();
			setState(541);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(537);
				match(COMMA);
				setState(538);
				stringFunctionParameter();
				}
				}
				setState(543);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(544);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringFunctionParameterContext extends ParserRuleContext {
		public StringValueContext stringValue() {
			return getRuleContext(StringValueContext.class,0);
		}
		public StringFunctionContext stringFunction() {
			return getRuleContext(StringFunctionContext.class,0);
		}
		public SourcePropertyContext sourceProperty() {
			return getRuleContext(SourcePropertyContext.class,0);
		}
		public StringFunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringFunctionParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterStringFunctionParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitStringFunctionParameter(this);
		}
	}

	public final StringFunctionParameterContext stringFunctionParameter() throws RecognitionException {
		StringFunctionParameterContext _localctx = new StringFunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_stringFunctionParameter);
		try {
			setState(549);
			switch (_input.LA(1)) {
			case StringOpen:
				enterOuterAlt(_localctx, 1);
				{
				setState(546);
				stringValue();
				}
				break;
			case Lower:
			case Upper:
			case ToStringToken:
			case Concatenation:
			case Localize:
				enterOuterAlt(_localctx, 2);
				{
				setState(547);
				stringFunction();
				}
				break;
			case StandardIdentifier:
			case EscapedIdentifier:
				enterOuterAlt(_localctx, 3);
				{
				setState(548);
				sourceProperty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LocalizeContext extends ParserRuleContext {
		public TerminalNode Localize() { return getToken(GmqlParser.Localize, 0); }
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(GmqlParser.COMMA, 0); }
		public StringValueContext stringValue() {
			return getRuleContext(StringValueContext.class,0);
		}
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public LocalizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_localize; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterLocalize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitLocalize(this);
		}
	}

	public final LocalizeContext localize() throws RecognitionException {
		LocalizeContext _localctx = new LocalizeContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_localize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(551);
			match(Localize);
			setState(552);
			match(LB);
			setState(553);
			value();
			setState(554);
			match(COMMA);
			setState(555);
			stringValue();
			setState(556);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SourcePropertyContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SourcePropertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceProperty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterSourceProperty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitSourceProperty(this);
		}
	}

	public final SourcePropertyContext sourceProperty() throws RecognitionException {
		SourcePropertyContext _localctx = new SourcePropertyContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_sourceProperty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(558);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinFunctionContext extends ParserRuleContext {
		public ListIndexContext listIndex() {
			return getRuleContext(ListIndexContext.class,0);
		}
		public MapKeyContext mapKey() {
			return getRuleContext(MapKeyContext.class,0);
		}
		public JoinFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterJoinFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitJoinFunction(this);
		}
	}

	public final JoinFunctionContext joinFunction() throws RecognitionException {
		JoinFunctionContext _localctx = new JoinFunctionContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_joinFunction);
		try {
			setState(562);
			switch (_input.LA(1)) {
			case ListIndex:
				enterOuterAlt(_localctx, 1);
				{
				setState(560);
				listIndex();
				}
				break;
			case MapKey:
				enterOuterAlt(_localctx, 2);
				{
				setState(561);
				mapKey();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListIndexContext extends ParserRuleContext {
		public TerminalNode ListIndex() { return getToken(GmqlParser.ListIndex, 0); }
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public ListIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterListIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitListIndex(this);
		}
	}

	public final ListIndexContext listIndex() throws RecognitionException {
		ListIndexContext _localctx = new ListIndexContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_listIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(564);
			match(ListIndex);
			setState(565);
			match(LB);
			setState(566);
			alias();
			setState(567);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MapKeyContext extends ParserRuleContext {
		public TerminalNode MapKey() { return getToken(GmqlParser.MapKey, 0); }
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public MapKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mapKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterMapKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitMapKey(this);
		}
	}

	public final MapKeyContext mapKey() throws RecognitionException {
		MapKeyContext _localctx = new MapKeyContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_mapKey);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(569);
			match(MapKey);
			setState(570);
			match(LB);
			setState(571);
			alias();
			setState(572);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnumReferenceContext extends ParserRuleContext {
		public TerminalNode Enum() { return getToken(GmqlParser.Enum, 0); }
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(GmqlParser.COMMA, 0); }
		public GenericIdentifierContext genericIdentifier() {
			return getRuleContext(GenericIdentifierContext.class,0);
		}
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public EnumReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enumReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterEnumReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitEnumReference(this);
		}
	}

	public final EnumReferenceContext enumReference() throws RecognitionException {
		EnumReferenceContext _localctx = new EnumReferenceContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_enumReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(574);
			match(Enum);
			setState(575);
			match(LB);
			setState(576);
			identifier();
			setState(577);
			match(COMMA);
			setState(578);
			genericIdentifier();
			setState(579);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EntityReferenceContext extends ParserRuleContext {
		public TerminalNode Entity() { return getToken(GmqlParser.Entity, 0); }
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GmqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GmqlParser.COMMA, i);
		}
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public StringValueContext stringValue() {
			return getRuleContext(StringValueContext.class,0);
		}
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public EntityReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entityReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterEntityReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitEntityReference(this);
		}
	}

	public final EntityReferenceContext entityReference() throws RecognitionException {
		EntityReferenceContext _localctx = new EntityReferenceContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_entityReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(581);
			match(Entity);
			setState(582);
			match(LB);
			setState(583);
			identifier();
			setState(584);
			match(COMMA);
			setState(585);
			value();
			setState(588);
			switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
			case 1:
				{
				setState(586);
				match(COMMA);
				setState(587);
				stringValue();
				}
				break;
			}
			setState(592);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(590);
				match(COMMA);
				setState(591);
				booleanValue();
				}
			}

			setState(594);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeSignatureContext extends ParserRuleContext {
		public TerminalNode TypeSignature() { return getToken(GmqlParser.TypeSignature, 0); }
		public TerminalNode LB() { return getToken(GmqlParser.LB, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public TypeSignatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeSignature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterTypeSignature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitTypeSignature(this);
		}
	}

	public final TypeSignatureContext typeSignature() throws RecognitionException {
		TypeSignatureContext _localctx = new TypeSignatureContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_typeSignature);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(596);
			match(TypeSignature);
			setState(597);
			match(LB);
			setState(598);
			value();
			setState(599);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public List<GenericIdentifierContext> genericIdentifier() {
			return getRuleContexts(GenericIdentifierContext.class);
		}
		public GenericIdentifierContext genericIdentifier(int i) {
			return getRuleContext(GenericIdentifierContext.class,i);
		}
		public List<TerminalNode> Dot() { return getTokens(GmqlParser.Dot); }
		public TerminalNode Dot(int i) {
			return getToken(GmqlParser.Dot, i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitIdentifier(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_identifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(601);
			genericIdentifier();
			setState(606);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Dot) {
				{
				{
				setState(602);
				match(Dot);
				setState(603);
				genericIdentifier();
				}
				}
				setState(608);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericIdentifierContext extends ParserRuleContext {
		public GenericIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericIdentifier; }
	 
		public GenericIdentifierContext() { }
		public void copyFrom(GenericIdentifierContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StandardIdentifierContext extends GenericIdentifierContext {
		public TerminalNode StandardIdentifier() { return getToken(GmqlParser.StandardIdentifier, 0); }
		public StandardIdentifierContext(GenericIdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterStandardIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitStandardIdentifier(this);
		}
	}
	public static class KeyWordIdentifierContext extends GenericIdentifierContext {
		public EscapedIdentifierContext escapedIdentifier() {
			return getRuleContext(EscapedIdentifierContext.class,0);
		}
		public KeyWordIdentifierContext(GenericIdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterKeyWordIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitKeyWordIdentifier(this);
		}
	}

	public final GenericIdentifierContext genericIdentifier() throws RecognitionException {
		GenericIdentifierContext _localctx = new GenericIdentifierContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_genericIdentifier);
		try {
			setState(611);
			switch (_input.LA(1)) {
			case StandardIdentifier:
				_localctx = new StandardIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(609);
				match(StandardIdentifier);
				}
				break;
			case EscapedIdentifier:
				_localctx = new KeyWordIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(610);
				escapedIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EscapedIdentifierContext extends ParserRuleContext {
		public TerminalNode EscapedIdentifier() { return getToken(GmqlParser.EscapedIdentifier, 0); }
		public TerminalNode KeyWord() { return getToken(GmqlParser.KeyWord, 0); }
		public TerminalNode EscapedIdentifierClose() { return getToken(GmqlParser.EscapedIdentifierClose, 0); }
		public EscapedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_escapedIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterEscapedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitEscapedIdentifier(this);
		}
	}

	public final EscapedIdentifierContext escapedIdentifier() throws RecognitionException {
		EscapedIdentifierContext _localctx = new EscapedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_escapedIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(613);
			match(EscapedIdentifier);
			setState(614);
			match(KeyWord);
			setState(615);
			match(EscapedIdentifierClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralValueContext extends ParserRuleContext {
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public FloatValueContext floatValue() {
			return getRuleContext(FloatValueContext.class,0);
		}
		public DoubleValueContext doubleValue() {
			return getRuleContext(DoubleValueContext.class,0);
		}
		public DecimalValueContext decimalValue() {
			return getRuleContext(DecimalValueContext.class,0);
		}
		public IntegerValueContext integerValue() {
			return getRuleContext(IntegerValueContext.class,0);
		}
		public LongValueContext longValue() {
			return getRuleContext(LongValueContext.class,0);
		}
		public StringValueContext stringValue() {
			return getRuleContext(StringValueContext.class,0);
		}
		public DateValueContext dateValue() {
			return getRuleContext(DateValueContext.class,0);
		}
		public LiteralValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literalValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterLiteralValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitLiteralValue(this);
		}
	}

	public final LiteralValueContext literalValue() throws RecognitionException {
		LiteralValueContext _localctx = new LiteralValueContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_literalValue);
		try {
			setState(625);
			switch (_input.LA(1)) {
			case Boolean:
				enterOuterAlt(_localctx, 1);
				{
				setState(617);
				booleanValue();
				}
				break;
			case FloatLiteral:
				enterOuterAlt(_localctx, 2);
				{
				setState(618);
				floatValue();
				}
				break;
			case DoubleLiteral:
				enterOuterAlt(_localctx, 3);
				{
				setState(619);
				doubleValue();
				}
				break;
			case DecimalLiteral:
				enterOuterAlt(_localctx, 4);
				{
				setState(620);
				decimalValue();
				}
				break;
			case IntegerBase16Literal:
			case IntegerBase10Literal:
				enterOuterAlt(_localctx, 5);
				{
				setState(621);
				integerValue();
				}
				break;
			case LongBase16Literal:
			case LongBase10Literal:
				enterOuterAlt(_localctx, 6);
				{
				setState(622);
				longValue();
				}
				break;
			case StringOpen:
				enterOuterAlt(_localctx, 7);
				{
				setState(623);
				stringValue();
				}
				break;
			case DateFunction:
				enterOuterAlt(_localctx, 8);
				{
				setState(624);
				dateValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DateValueContext extends ParserRuleContext {
		public TerminalNode DateFunction() { return getToken(GmqlParser.DateFunction, 0); }
		public List<CalendarOffsetValueContext> calendarOffsetValue() {
			return getRuleContexts(CalendarOffsetValueContext.class);
		}
		public CalendarOffsetValueContext calendarOffsetValue(int i) {
			return getRuleContext(CalendarOffsetValueContext.class,i);
		}
		public TerminalNode RB() { return getToken(GmqlParser.RB, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GmqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GmqlParser.COMMA, i);
		}
		public DateValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterDateValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitDateValue(this);
		}
	}

	public final DateValueContext dateValue() throws RecognitionException {
		DateValueContext _localctx = new DateValueContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_dateValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(627);
			match(DateFunction);
			setState(628);
			calendarOffsetValue();
			setState(633);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(629);
				match(COMMA);
				setState(630);
				calendarOffsetValue();
				}
				}
				setState(635);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(636);
			match(RB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CalendarOffsetValueContext extends ParserRuleContext {
		public DateOffsetContext dateOffset() {
			return getRuleContext(DateOffsetContext.class,0);
		}
		public TimeZoneOffsetContext timeZoneOffset() {
			return getRuleContext(TimeZoneOffsetContext.class,0);
		}
		public CalendarOffsetValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_calendarOffsetValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterCalendarOffsetValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitCalendarOffsetValue(this);
		}
	}

	public final CalendarOffsetValueContext calendarOffsetValue() throws RecognitionException {
		CalendarOffsetValueContext _localctx = new CalendarOffsetValueContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_calendarOffsetValue);
		try {
			setState(640);
			switch (_input.LA(1)) {
			case DateOffset:
				enterOuterAlt(_localctx, 1);
				{
				setState(638);
				dateOffset();
				}
				break;
			case TimeZoneOffset:
				enterOuterAlt(_localctx, 2);
				{
				setState(639);
				timeZoneOffset();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DateOffsetContext extends ParserRuleContext {
		public TerminalNode DateOffset() { return getToken(GmqlParser.DateOffset, 0); }
		public DateOffsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateOffset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterDateOffset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitDateOffset(this);
		}
	}

	public final DateOffsetContext dateOffset() throws RecognitionException {
		DateOffsetContext _localctx = new DateOffsetContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_dateOffset);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(642);
			match(DateOffset);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeZoneOffsetContext extends ParserRuleContext {
		public TerminalNode TimeZoneOffset() { return getToken(GmqlParser.TimeZoneOffset, 0); }
		public TimeZoneOffsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeZoneOffset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterTimeZoneOffset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitTimeZoneOffset(this);
		}
	}

	public final TimeZoneOffsetContext timeZoneOffset() throws RecognitionException {
		TimeZoneOffsetContext _localctx = new TimeZoneOffsetContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_timeZoneOffset);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(644);
			match(TimeZoneOffset);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringValueContext extends ParserRuleContext {
		public TerminalNode StringOpen() { return getToken(GmqlParser.StringOpen, 0); }
		public TerminalNode StringClose() { return getToken(GmqlParser.StringClose, 0); }
		public List<EscapeContext> escape() {
			return getRuleContexts(EscapeContext.class);
		}
		public EscapeContext escape(int i) {
			return getRuleContext(EscapeContext.class,i);
		}
		public List<PlainContentContext> plainContent() {
			return getRuleContexts(PlainContentContext.class);
		}
		public PlainContentContext plainContent(int i) {
			return getRuleContext(PlainContentContext.class,i);
		}
		public StringValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterStringValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitStringValue(this);
		}
	}

	public final StringValueContext stringValue() throws RecognitionException {
		StringValueContext _localctx = new StringValueContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_stringValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(646);
			match(StringOpen);
			setState(651);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (UnicodeEscape - 66)) | (1L << (EscB - 66)) | (1L << (EscT - 66)) | (1L << (EscN - 66)) | (1L << (EscF - 66)) | (1L << (EscR - 66)) | (1L << (EscSQ - 66)) | (1L << (EscBS - 66)) | (1L << (PlainContent - 66)))) != 0)) {
				{
				setState(649);
				switch (_input.LA(1)) {
				case UnicodeEscape:
				case EscB:
				case EscT:
				case EscN:
				case EscF:
				case EscR:
				case EscSQ:
				case EscBS:
					{
					setState(647);
					escape();
					}
					break;
				case PlainContent:
					{
					setState(648);
					plainContent();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(653);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(654);
			match(StringClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EscapeContext extends ParserRuleContext {
		public EscapeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_escape; }
	 
		public EscapeContext() { }
		public void copyFrom(EscapeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class EscFContext extends EscapeContext {
		public TerminalNode EscF() { return getToken(GmqlParser.EscF, 0); }
		public EscFContext(EscapeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterEscF(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitEscF(this);
		}
	}
	public static class EscSQContext extends EscapeContext {
		public TerminalNode EscSQ() { return getToken(GmqlParser.EscSQ, 0); }
		public EscSQContext(EscapeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterEscSQ(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitEscSQ(this);
		}
	}
	public static class EscBSContext extends EscapeContext {
		public TerminalNode EscBS() { return getToken(GmqlParser.EscBS, 0); }
		public EscBSContext(EscapeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterEscBS(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitEscBS(this);
		}
	}
	public static class EscNContext extends EscapeContext {
		public TerminalNode EscN() { return getToken(GmqlParser.EscN, 0); }
		public EscNContext(EscapeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterEscN(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitEscN(this);
		}
	}
	public static class EscBContext extends EscapeContext {
		public TerminalNode EscB() { return getToken(GmqlParser.EscB, 0); }
		public EscBContext(EscapeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterEscB(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitEscB(this);
		}
	}
	public static class EscRContext extends EscapeContext {
		public TerminalNode EscR() { return getToken(GmqlParser.EscR, 0); }
		public EscRContext(EscapeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterEscR(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitEscR(this);
		}
	}
	public static class UnicodeEscapeContext extends EscapeContext {
		public TerminalNode UnicodeEscape() { return getToken(GmqlParser.UnicodeEscape, 0); }
		public UnicodeEscapeContext(EscapeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterUnicodeEscape(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitUnicodeEscape(this);
		}
	}
	public static class EscTContext extends EscapeContext {
		public TerminalNode EscT() { return getToken(GmqlParser.EscT, 0); }
		public EscTContext(EscapeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterEscT(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitEscT(this);
		}
	}

	public final EscapeContext escape() throws RecognitionException {
		EscapeContext _localctx = new EscapeContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_escape);
		try {
			setState(664);
			switch (_input.LA(1)) {
			case EscB:
				_localctx = new EscBContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(656);
				match(EscB);
				}
				break;
			case EscBS:
				_localctx = new EscBSContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(657);
				match(EscBS);
				}
				break;
			case EscF:
				_localctx = new EscFContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(658);
				match(EscF);
				}
				break;
			case EscN:
				_localctx = new EscNContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(659);
				match(EscN);
				}
				break;
			case EscR:
				_localctx = new EscRContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(660);
				match(EscR);
				}
				break;
			case EscSQ:
				_localctx = new EscSQContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(661);
				match(EscSQ);
				}
				break;
			case EscT:
				_localctx = new EscTContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(662);
				match(EscT);
				}
				break;
			case UnicodeEscape:
				_localctx = new UnicodeEscapeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(663);
				match(UnicodeEscape);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlainContentContext extends ParserRuleContext {
		public TerminalNode PlainContent() { return getToken(GmqlParser.PlainContent, 0); }
		public PlainContentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plainContent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterPlainContent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitPlainContent(this);
		}
	}

	public final PlainContentContext plainContent() throws RecognitionException {
		PlainContentContext _localctx = new PlainContentContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_plainContent);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(666);
			match(PlainContent);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullValueContext extends ParserRuleContext {
		public TerminalNode Null() { return getToken(GmqlParser.Null, 0); }
		public NullValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterNullValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitNullValue(this);
		}
	}

	public final NullValueContext nullValue() throws RecognitionException {
		NullValueContext _localctx = new NullValueContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_nullValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(668);
			match(Null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanValueContext extends ParserRuleContext {
		public TerminalNode Boolean() { return getToken(GmqlParser.Boolean, 0); }
		public BooleanValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterBooleanValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitBooleanValue(this);
		}
	}

	public final BooleanValueContext booleanValue() throws RecognitionException {
		BooleanValueContext _localctx = new BooleanValueContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_booleanValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(670);
			match(Boolean);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalValueContext extends ParserRuleContext {
		public TerminalNode DecimalLiteral() { return getToken(GmqlParser.DecimalLiteral, 0); }
		public DecimalValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterDecimalValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitDecimalValue(this);
		}
	}

	public final DecimalValueContext decimalValue() throws RecognitionException {
		DecimalValueContext _localctx = new DecimalValueContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_decimalValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(672);
			match(DecimalLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FloatValueContext extends ParserRuleContext {
		public TerminalNode FloatLiteral() { return getToken(GmqlParser.FloatLiteral, 0); }
		public FloatValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_floatValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterFloatValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitFloatValue(this);
		}
	}

	public final FloatValueContext floatValue() throws RecognitionException {
		FloatValueContext _localctx = new FloatValueContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_floatValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(674);
			match(FloatLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoubleValueContext extends ParserRuleContext {
		public TerminalNode DoubleLiteral() { return getToken(GmqlParser.DoubleLiteral, 0); }
		public DoubleValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doubleValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterDoubleValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitDoubleValue(this);
		}
	}

	public final DoubleValueContext doubleValue() throws RecognitionException {
		DoubleValueContext _localctx = new DoubleValueContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_doubleValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(676);
			match(DoubleLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntegerValueContext extends ParserRuleContext {
		public IntegerValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_integerValue; }
	 
		public IntegerValueContext() { }
		public void copyFrom(IntegerValueContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IntegerHexRepresentationContext extends IntegerValueContext {
		public TerminalNode IntegerBase16Literal() { return getToken(GmqlParser.IntegerBase16Literal, 0); }
		public IntegerHexRepresentationContext(IntegerValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterIntegerHexRepresentation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitIntegerHexRepresentation(this);
		}
	}
	public static class IntegerDecimalRepresenationContext extends IntegerValueContext {
		public TerminalNode IntegerBase10Literal() { return getToken(GmqlParser.IntegerBase10Literal, 0); }
		public IntegerDecimalRepresenationContext(IntegerValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterIntegerDecimalRepresenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitIntegerDecimalRepresenation(this);
		}
	}

	public final IntegerValueContext integerValue() throws RecognitionException {
		IntegerValueContext _localctx = new IntegerValueContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_integerValue);
		try {
			setState(680);
			switch (_input.LA(1)) {
			case IntegerBase16Literal:
				_localctx = new IntegerHexRepresentationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(678);
				match(IntegerBase16Literal);
				}
				break;
			case IntegerBase10Literal:
				_localctx = new IntegerDecimalRepresenationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(679);
				match(IntegerBase10Literal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LongValueContext extends ParserRuleContext {
		public LongValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_longValue; }
	 
		public LongValueContext() { }
		public void copyFrom(LongValueContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LongDecimalRepresenationContext extends LongValueContext {
		public TerminalNode LongBase10Literal() { return getToken(GmqlParser.LongBase10Literal, 0); }
		public LongDecimalRepresenationContext(LongValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterLongDecimalRepresenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitLongDecimalRepresenation(this);
		}
	}
	public static class LongHexRepresentationContext extends LongValueContext {
		public TerminalNode LongBase16Literal() { return getToken(GmqlParser.LongBase16Literal, 0); }
		public LongHexRepresentationContext(LongValueContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).enterLongHexRepresentation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GmqlParserListener ) ((GmqlParserListener)listener).exitLongHexRepresentation(this);
		}
	}

	public final LongValueContext longValue() throws RecognitionException {
		LongValueContext _localctx = new LongValueContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_longValue);
		try {
			setState(684);
			switch (_input.LA(1)) {
			case LongBase16Literal:
				_localctx = new LongHexRepresentationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(682);
				match(LongBase16Literal);
				}
				break;
			case LongBase10Literal:
				_localctx = new LongDecimalRepresenationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(683);
				match(LongBase10Literal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3O\u02b1\4\2\t\2\4"+
		"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"+
		"\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\3\2\3\2\3\2\3"+
		"\3\3\3\3\3\5\3\u00c1\n\3\3\4\3\4\5\4\u00c5\n\4\3\4\5\4\u00c8\n\4\3\4\5"+
		"\4\u00cb\n\4\3\4\5\4\u00ce\n\4\3\4\5\4\u00d1\n\4\3\5\3\5\3\5\5\5\u00d6"+
		"\n\5\3\6\3\6\5\6\u00da\n\6\3\6\3\6\3\7\3\7\3\7\3\7\7\7\u00e2\n\7\f\7\16"+
		"\7\u00e5\13\7\5\7\u00e7\n\7\3\b\3\b\3\t\3\t\3\t\3\t\7\t\u00ef\n\t\f\t"+
		"\16\t\u00f2\13\t\3\n\3\n\5\n\u00f6\n\n\3\13\6\13\u00f9\n\13\r\13\16\13"+
		"\u00fa\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\16\7\16\u0105\n\16\f\16\16\16"+
		"\u0108\13\16\3\17\3\17\3\20\3\20\3\20\3\21\3\21\3\21\5\21\u0112\n\21\3"+
		"\22\3\22\3\22\3\22\5\22\u0118\n\22\3\23\3\23\3\24\3\24\3\24\3\25\3\25"+
		"\3\25\3\26\3\26\3\26\3\27\3\27\5\27\u0127\n\27\3\27\5\27\u012a\n\27\3"+
		"\27\5\27\u012d\n\27\3\30\5\30\u0130\n\30\3\30\3\30\3\30\3\30\3\30\3\31"+
		"\3\31\5\31\u0139\n\31\3\32\3\32\5\32\u013d\n\32\3\32\5\32\u0140\n\32\3"+
		"\32\5\32\u0143\n\32\3\33\5\33\u0146\n\33\3\33\3\33\3\33\3\34\3\34\5\34"+
		"\u014d\n\34\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3 \3 \3 \5 \u015a\n \3"+
		"!\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3%\3%"+
		"\3%\3%\3%\5%\u0175\n%\3%\3%\3&\3&\3&\3&\7&\u017d\n&\f&\16&\u0180\13&\3"+
		"\'\3\'\5\'\u0184\n\'\3(\3(\5(\u0188\n(\3)\3)\3*\3*\3*\3*\5*\u0190\n*\3"+
		"*\3*\5*\u0194\n*\3+\3+\3,\3,\3,\3-\3-\3.\3.\3.\7.\u01a0\n.\f.\16.\u01a3"+
		"\13.\3/\3/\3/\7/\u01a8\n/\f/\16/\u01ab\13/\3\60\5\60\u01ae\n\60\3\60\3"+
		"\60\3\61\3\61\5\61\u01b4\n\61\3\62\3\62\3\62\3\62\3\63\3\63\3\64\3\64"+
		"\3\64\3\64\3\64\5\64\u01c1\n\64\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65"+
		"\5\65\u01cb\n\65\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\5\66\u01da\n\66\3\67\3\67\5\67\u01de\n\67\38\38\38\38\38\3"+
		"8\58\u01e6\n8\38\38\58\u01ea\n8\39\39\39\39\79\u01f0\n9\f9\169\u01f3\13"+
		"9\39\39\3:\3:\3;\3;\3;\3;\3<\3<\3=\3=\3=\3=\3>\3>\3>\3>\3>\5>\u0208\n"+
		">\3?\3?\3?\3?\3?\3@\3@\3@\3@\3@\3A\3A\3A\3A\3A\3B\3B\3B\3B\3B\7B\u021e"+
		"\nB\fB\16B\u0221\13B\3B\3B\3C\3C\3C\5C\u0228\nC\3D\3D\3D\3D\3D\3D\3D\3"+
		"E\3E\3F\3F\5F\u0235\nF\3G\3G\3G\3G\3G\3H\3H\3H\3H\3H\3I\3I\3I\3I\3I\3"+
		"I\3I\3J\3J\3J\3J\3J\3J\3J\5J\u024f\nJ\3J\3J\5J\u0253\nJ\3J\3J\3K\3K\3"+
		"K\3K\3K\3L\3L\3L\7L\u025f\nL\fL\16L\u0262\13L\3M\3M\5M\u0266\nM\3N\3N"+
		"\3N\3N\3O\3O\3O\3O\3O\3O\3O\3O\5O\u0274\nO\3P\3P\3P\3P\7P\u027a\nP\fP"+
		"\16P\u027d\13P\3P\3P\3Q\3Q\5Q\u0283\nQ\3R\3R\3S\3S\3T\3T\3T\7T\u028c\n"+
		"T\fT\16T\u028f\13T\3T\3T\3U\3U\3U\3U\3U\3U\3U\3U\5U\u029b\nU\3V\3V\3W"+
		"\3W\3X\3X\3Y\3Y\3Z\3Z\3[\3[\3\\\3\\\5\\\u02ab\n\\\3]\3]\5]\u02af\n]\3"+
		"]\2\2^\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<"+
		">@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a"+
		"\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2"+
		"\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\2\2"+
		"\u02b1\2\u00ba\3\2\2\2\4\u00c0\3\2\2\2\6\u00c2\3\2\2\2\b\u00d2\3\2\2\2"+
		"\n\u00d7\3\2\2\2\f\u00e6\3\2\2\2\16\u00e8\3\2\2\2\20\u00ea\3\2\2\2\22"+
		"\u00f3\3\2\2\2\24\u00f8\3\2\2\2\26\u00fc\3\2\2\2\30\u00fe\3\2\2\2\32\u0100"+
		"\3\2\2\2\34\u0109\3\2\2\2\36\u010b\3\2\2\2 \u010e\3\2\2\2\"\u0117\3\2"+
		"\2\2$\u0119\3\2\2\2&\u011b\3\2\2\2(\u011e\3\2\2\2*\u0121\3\2\2\2,\u0124"+
		"\3\2\2\2.\u012f\3\2\2\2\60\u0136\3\2\2\2\62\u013a\3\2\2\2\64\u0145\3\2"+
		"\2\2\66\u014a\3\2\2\28\u014e\3\2\2\2:\u0150\3\2\2\2<\u0152\3\2\2\2>\u0159"+
		"\3\2\2\2@\u015b\3\2\2\2B\u0160\3\2\2\2D\u0165\3\2\2\2F\u016a\3\2\2\2H"+
		"\u016f\3\2\2\2J\u0178\3\2\2\2L\u0181\3\2\2\2N\u0187\3\2\2\2P\u0189\3\2"+
		"\2\2R\u0193\3\2\2\2T\u0195\3\2\2\2V\u0197\3\2\2\2X\u019a\3\2\2\2Z\u019c"+
		"\3\2\2\2\\\u01a4\3\2\2\2^\u01ad\3\2\2\2`\u01b3\3\2\2\2b\u01b5\3\2\2\2"+
		"d\u01b9\3\2\2\2f\u01bb\3\2\2\2h\u01ca\3\2\2\2j\u01d9\3\2\2\2l\u01dd\3"+
		"\2\2\2n\u01df\3\2\2\2p\u01eb\3\2\2\2r\u01f6\3\2\2\2t\u01f8\3\2\2\2v\u01fc"+
		"\3\2\2\2x\u01fe\3\2\2\2z\u0207\3\2\2\2|\u0209\3\2\2\2~\u020e\3\2\2\2\u0080"+
		"\u0213\3\2\2\2\u0082\u0218\3\2\2\2\u0084\u0227\3\2\2\2\u0086\u0229\3\2"+
		"\2\2\u0088\u0230\3\2\2\2\u008a\u0234\3\2\2\2\u008c\u0236\3\2\2\2\u008e"+
		"\u023b\3\2\2\2\u0090\u0240\3\2\2\2\u0092\u0247\3\2\2\2\u0094\u0256\3\2"+
		"\2\2\u0096\u025b\3\2\2\2\u0098\u0265\3\2\2\2\u009a\u0267\3\2\2\2\u009c"+
		"\u0273\3\2\2\2\u009e\u0275\3\2\2\2\u00a0\u0282\3\2\2\2\u00a2\u0284\3\2"+
		"\2\2\u00a4\u0286\3\2\2\2\u00a6\u0288\3\2\2\2\u00a8\u029a\3\2\2\2\u00aa"+
		"\u029c\3\2\2\2\u00ac\u029e\3\2\2\2\u00ae\u02a0\3\2\2\2\u00b0\u02a2\3\2"+
		"\2\2\u00b2\u02a4\3\2\2\2\u00b4\u02a6\3\2\2\2\u00b6\u02aa\3\2\2\2\u00b8"+
		"\u02ae\3\2\2\2\u00ba\u00bb\5\4\3\2\u00bb\u00bc\7\2\2\3\u00bc\3\3\2\2\2"+
		"\u00bd\u00c1\5\62\32\2\u00be\u00c1\5,\27\2\u00bf\u00c1\5\6\4\2\u00c0\u00bd"+
		"\3\2\2\2\u00c0\u00be\3\2\2\2\u00c0\u00bf\3\2\2\2\u00c1\5\3\2\2\2\u00c2"+
		"\u00c4\5\b\5\2\u00c3\u00c5\58\35\2\u00c4\u00c3\3\2\2\2\u00c4\u00c5\3\2"+
		"\2\2\u00c5\u00c7\3\2\2\2\u00c6\u00c8\5\26\f\2\u00c7\u00c6\3\2\2\2\u00c7"+
		"\u00c8\3\2\2\2\u00c8\u00ca\3\2\2\2\u00c9\u00cb\5\30\r\2\u00ca\u00c9\3"+
		"\2\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00cd\3\2\2\2\u00cc\u00ce\5:\36\2\u00cd"+
		"\u00cc\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce\u00d0\3\2\2\2\u00cf\u00d1\5<"+
		"\37\2\u00d0\u00cf\3\2\2\2\u00d0\u00d1\3\2\2\2\u00d1\7\3\2\2\2\u00d2\u00d3"+
		"\5\n\6\2\u00d3\u00d5\5\20\t\2\u00d4\u00d6\5\24\13\2\u00d5\u00d4\3\2\2"+
		"\2\u00d5\u00d6\3\2\2\2\u00d6\t\3\2\2\2\u00d7\u00d9\7\7\2\2\u00d8\u00da"+
		"\7\b\2\2\u00d9\u00d8\3\2\2\2\u00d9\u00da\3\2\2\2\u00da\u00db\3\2\2\2\u00db"+
		"\u00dc\5\f\7\2\u00dc\13\3\2\2\2\u00dd\u00e7\7&\2\2\u00de\u00e3\5\16\b"+
		"\2\u00df\u00e0\7\64\2\2\u00e0\u00e2\5\16\b\2\u00e1\u00df\3\2\2\2\u00e2"+
		"\u00e5\3\2\2\2\u00e3\u00e1\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e7\3\2"+
		"\2\2\u00e5\u00e3\3\2\2\2\u00e6\u00dd\3\2\2\2\u00e6\u00de\3\2\2\2\u00e7"+
		"\r\3\2\2\2\u00e8\u00e9\5j\66\2\u00e9\17\3\2\2\2\u00ea\u00eb\7\t\2\2\u00eb"+
		"\u00f0\5\22\n\2\u00ec\u00ed\7\64\2\2\u00ed\u00ef\5\22\n\2\u00ee\u00ec"+
		"\3\2\2\2\u00ef\u00f2\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f0\u00f1\3\2\2\2\u00f1"+
		"\21\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f3\u00f5\5\u0096L\2\u00f4\u00f6\5T"+
		"+\2\u00f5\u00f4\3\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\23\3\2\2\2\u00f7\u00f9"+
		"\5 \21\2\u00f8\u00f7\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\u00f8\3\2\2\2\u00fa"+
		"\u00fb\3\2\2\2\u00fb\25\3\2\2\2\u00fc\u00fd\5\32\16\2\u00fd\27\3\2\2\2"+
		"\u00fe\u00ff\5\36\20\2\u00ff\31\3\2\2\2\u0100\u0101\7\25\2\2\u0101\u0106"+
		"\5\34\17\2\u0102\u0103\7\64\2\2\u0103\u0105\5\34\17\2\u0104\u0102\3\2"+
		"\2\2\u0105\u0108\3\2\2\2\u0106\u0104\3\2\2\2\u0106\u0107\3\2\2\2\u0107"+
		"\33\3\2\2\2\u0108\u0106\3\2\2\2\u0109\u010a\5j\66\2\u010a\35\3\2\2\2\u010b"+
		"\u010c\7\26\2\2\u010c\u010d\5X-\2\u010d\37\3\2\2\2\u010e\u010f\5\"\22"+
		"\2\u010f\u0111\5\u0096L\2\u0110\u0112\5T+\2\u0111\u0110\3\2\2\2\u0111"+
		"\u0112\3\2\2\2\u0112!\3\2\2\2\u0113\u0118\5$\23\2\u0114\u0118\5&\24\2"+
		"\u0115\u0118\5(\25\2\u0116\u0118\5*\26\2\u0117\u0113\3\2\2\2\u0117\u0114"+
		"\3\2\2\2\u0117\u0115\3\2\2\2\u0117\u0116\3\2\2\2\u0118#\3\2\2\2\u0119"+
		"\u011a\7\n\2\2\u011a%\3\2\2\2\u011b\u011c\7\13\2\2\u011c\u011d\7\n\2\2"+
		"\u011d\'\3\2\2\2\u011e\u011f\7\r\2\2\u011f\u0120\7\n\2\2\u0120)\3\2\2"+
		"\2\u0121\u0122\7\f\2\2\u0122\u0123\7\n\2\2\u0123+\3\2\2\2\u0124\u0126"+
		"\5.\30\2\u0125\u0127\58\35\2\u0126\u0125\3\2\2\2\u0126\u0127\3\2\2\2\u0127"+
		"\u0129\3\2\2\2\u0128\u012a\5:\36\2\u0129\u0128\3\2\2\2\u0129\u012a\3\2"+
		"\2\2\u012a\u012c\3\2\2\2\u012b\u012d\5<\37\2\u012c\u012b\3\2\2\2\u012c"+
		"\u012d\3\2\2\2\u012d-\3\2\2\2\u012e\u0130\7\b\2\2\u012f\u012e\3\2\2\2"+
		"\u012f\u0130\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0132\7\27\2\2\u0132\u0133"+
		"\5\60\31\2\u0133\u0134\7\30\2\2\u0134\u0135\5\u0092J\2\u0135/\3\2\2\2"+
		"\u0136\u0138\5\u0096L\2\u0137\u0139\5T+\2\u0138\u0137\3\2\2\2\u0138\u0139"+
		"\3\2\2\2\u0139\61\3\2\2\2\u013a\u013c\5\64\33\2\u013b\u013d\58\35\2\u013c"+
		"\u013b\3\2\2\2\u013c\u013d\3\2\2\2\u013d\u013f\3\2\2\2\u013e\u0140\5:"+
		"\36\2\u013f\u013e\3\2\2\2\u013f\u0140\3\2\2\2\u0140\u0142\3\2\2\2\u0141"+
		"\u0143\5<\37\2\u0142\u0141\3\2\2\2\u0142\u0143\3\2\2\2\u0143\63\3\2\2"+
		"\2\u0144\u0146\7\b\2\2\u0145\u0144\3\2\2\2\u0145\u0146\3\2\2\2\u0146\u0147"+
		"\3\2\2\2\u0147\u0148\7\t\2\2\u0148\u0149\5\66\34\2\u0149\65\3\2\2\2\u014a"+
		"\u014c\5\u0096L\2\u014b\u014d\5T+\2\u014c\u014b\3\2\2\2\u014c\u014d\3"+
		"\2\2\2\u014d\67\3\2\2\2\u014e\u014f\5V,\2\u014f9\3\2\2\2\u0150\u0151\5"+
		"J&\2\u0151;\3\2\2\2\u0152\u0153\5R*\2\u0153=\3\2\2\2\u0154\u015a\5H%\2"+
		"\u0155\u015a\5@!\2\u0156\u015a\5B\"\2\u0157\u015a\5D#\2\u0158\u015a\5"+
		"F$\2\u0159\u0154\3\2\2\2\u0159\u0155\3\2\2\2\u0159\u0156\3\2\2\2\u0159"+
		"\u0157\3\2\2\2\u0159\u0158\3\2\2\2\u015a?\3\2\2\2\u015b\u015c\7\32\2\2"+
		"\u015c\u015d\7.\2\2\u015d\u015e\5\u0088E\2\u015e\u015f\7/\2\2\u015fA\3"+
		"\2\2\2\u0160\u0161\7\33\2\2\u0161\u0162\7.\2\2\u0162\u0163\5\u0088E\2"+
		"\u0163\u0164\7/\2\2\u0164C\3\2\2\2\u0165\u0166\7\34\2\2\u0166\u0167\7"+
		".\2\2\u0167\u0168\5\u0088E\2\u0168\u0169\7/\2\2\u0169E\3\2\2\2\u016a\u016b"+
		"\7\35\2\2\u016b\u016c\7.\2\2\u016c\u016d\5\u0088E\2\u016d\u016e\7/\2\2"+
		"\u016eG\3\2\2\2\u016f\u0170\7\31\2\2\u0170\u0171\7.\2\2\u0171\u0174\5"+
		"\u0088E\2\u0172\u0173\7\64\2\2\u0173\u0175\5\u00aeX\2\u0174\u0172\3\2"+
		"\2\2\u0174\u0175\3\2\2\2\u0175\u0176\3\2\2\2\u0176\u0177\7/\2\2\u0177"+
		"I\3\2\2\2\u0178\u0179\7\22\2\2\u0179\u017e\5L\'\2\u017a\u017b\7\64\2\2"+
		"\u017b\u017d\5L\'\2\u017c\u017a\3\2\2\2\u017d\u0180\3\2\2\2\u017e\u017c"+
		"\3\2\2\2\u017e\u017f\3\2\2\2\u017fK\3\2\2\2\u0180\u017e\3\2\2\2\u0181"+
		"\u0183\5P)\2\u0182\u0184\5N(\2\u0183\u0182\3\2\2\2\u0183\u0184\3\2\2\2"+
		"\u0184M\3\2\2\2\u0185\u0188\7\23\2\2\u0186\u0188\7\24\2\2\u0187\u0185"+
		"\3\2\2\2\u0187\u0186\3\2\2\2\u0188O\3\2\2\2\u0189\u018a\5j\66\2\u018a"+
		"Q\3\2\2\2\u018b\u018c\7\20\2\2\u018c\u018f\5\u00b6\\\2\u018d\u018e\7\21"+
		"\2\2\u018e\u0190\5\u00b6\\\2\u018f\u018d\3\2\2\2\u018f\u0190\3\2\2\2\u0190"+
		"\u0194\3\2\2\2\u0191\u0192\7\21\2\2\u0192\u0194\5\u00b6\\\2\u0193\u018b"+
		"\3\2\2\2\u0193\u0191\3\2\2\2\u0194S\3\2\2\2\u0195\u0196\5\u0098M\2\u0196"+
		"U\3\2\2\2\u0197\u0198\7\16\2\2\u0198\u0199\5X-\2\u0199W\3\2\2\2\u019a"+
		"\u019b\5Z.\2\u019bY\3\2\2\2\u019c\u01a1\5\\/\2\u019d\u019e\7,\2\2\u019e"+
		"\u01a0\5\\/\2\u019f\u019d\3\2\2\2\u01a0\u01a3\3\2\2\2\u01a1\u019f\3\2"+
		"\2\2\u01a1\u01a2\3\2\2\2\u01a2[\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a4\u01a9"+
		"\5^\60\2\u01a5\u01a6\7*\2\2\u01a6\u01a8\5^\60\2\u01a7\u01a5\3\2\2\2\u01a8"+
		"\u01ab\3\2\2\2\u01a9\u01a7\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa]\3\2\2\2"+
		"\u01ab\u01a9\3\2\2\2\u01ac\u01ae\7+\2\2\u01ad\u01ac\3\2\2\2\u01ad\u01ae"+
		"\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b0\5`\61\2\u01b0_\3\2\2\2\u01b1"+
		"\u01b4\5b\62\2\u01b2\u01b4\5h\65\2\u01b3\u01b1\3\2\2\2\u01b3\u01b2\3\2"+
		"\2\2\u01b4a\3\2\2\2\u01b5\u01b6\7.\2\2\u01b6\u01b7\5X-\2\u01b7\u01b8\7"+
		"/\2\2\u01b8c\3\2\2\2\u01b9\u01ba\5f\64\2\u01bae\3\2\2\2\u01bb\u01bc\7"+
		"(\2\2\u01bc\u01c0\7.\2\2\u01bd\u01be\5T+\2\u01be\u01bf\7\64\2\2\u01bf"+
		"\u01c1\3\2\2\2\u01c0\u01bd\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1\u01c2\3\2"+
		"\2\2\u01c2\u01c3\5\u00a6T\2\u01c3\u01c4\7/\2\2\u01c4g\3\2\2\2\u01c5\u01c6"+
		"\5j\66\2\u01c6\u01c7\7-\2\2\u01c7\u01c8\5j\66\2\u01c8\u01cb\3\2\2\2\u01c9"+
		"\u01cb\5d\63\2\u01ca\u01c5\3\2\2\2\u01ca\u01c9\3\2\2\2\u01cbi\3\2\2\2"+
		"\u01cc\u01da\5\u009cO\2\u01cd\u01da\5\u00acW\2\u01ce\u01da\5\u0092J\2"+
		"\u01cf\u01da\5\u0090I\2\u01d0\u01da\5\u0088E\2\u01d1\u01da\5z>\2\u01d2"+
		"\u01da\5d\63\2\u01d3\u01da\5r:\2\u01d4\u01da\5\u0094K\2\u01d5\u01da\5"+
		"p9\2\u01d6\u01da\5n8\2\u01d7\u01da\5l\67\2\u01d8\u01da\5v<\2\u01d9\u01cc"+
		"\3\2\2\2\u01d9\u01cd\3\2\2\2\u01d9\u01ce\3\2\2\2\u01d9\u01cf\3\2\2\2\u01d9"+
		"\u01d0\3\2\2\2\u01d9\u01d1\3\2\2\2\u01d9\u01d2\3\2\2\2\u01d9\u01d3\3\2"+
		"\2\2\u01d9\u01d4\3\2\2\2\u01d9\u01d5\3\2\2\2\u01d9\u01d6\3\2\2\2\u01d9"+
		"\u01d7\3\2\2\2\u01d9\u01d8\3\2\2\2\u01dak\3\2\2\2\u01db\u01de\5\u008a"+
		"F\2\u01dc\u01de\5> \2\u01dd\u01db\3\2\2\2\u01dd\u01dc\3\2\2\2\u01dem\3"+
		"\2\2\2\u01df\u01e0\7\'\2\2\u01e0\u01e9\5\u0096L\2\u01e1\u01e2\7.\2\2\u01e2"+
		"\u01e5\5\u0096L\2\u01e3\u01e4\7\64\2\2\u01e4\u01e6\5j\66\2\u01e5\u01e3"+
		"\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7\u01e8\7/\2\2\u01e8"+
		"\u01ea\3\2\2\2\u01e9\u01e1\3\2\2\2\u01e9\u01ea\3\2\2\2\u01eao\3\2\2\2"+
		"\u01eb\u01ec\7.\2\2\u01ec\u01f1\5j\66\2\u01ed\u01ee\7\64\2\2\u01ee\u01f0"+
		"\5j\66\2\u01ef\u01ed\3\2\2\2\u01f0\u01f3\3\2\2\2\u01f1\u01ef\3\2\2\2\u01f1"+
		"\u01f2\3\2\2\2\u01f2\u01f4\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f4\u01f5\7/"+
		"\2\2\u01f5q\3\2\2\2\u01f6\u01f7\5t;\2\u01f7s\3\2\2\2\u01f8\u01f9\7)\2"+
		"\2\u01f9\u01fa\7.\2\2\u01fa\u01fb\7/\2\2\u01fbu\3\2\2\2\u01fc\u01fd\5"+
		"x=\2\u01fdw\3\2\2\2\u01fe\u01ff\7%\2\2\u01ff\u0200\7.\2\2\u0200\u0201"+
		"\7/\2\2\u0201y\3\2\2\2\u0202\u0208\5|?\2\u0203\u0208\5~@\2\u0204\u0208"+
		"\5\u0080A\2\u0205\u0208\5\u0082B\2\u0206\u0208\5\u0086D\2\u0207\u0202"+
		"\3\2\2\2\u0207\u0203\3\2\2\2\u0207\u0204\3\2\2\2\u0207\u0205\3\2\2\2\u0207"+
		"\u0206\3\2\2\2\u0208{\3\2\2\2\u0209\u020a\7 \2\2\u020a\u020b\7.\2\2\u020b"+
		"\u020c\5\u0084C\2\u020c\u020d\7/\2\2\u020d}\3\2\2\2\u020e\u020f\7!\2\2"+
		"\u020f\u0210\7.\2\2\u0210\u0211\5\u0084C\2\u0211\u0212\7/\2\2\u0212\177"+
		"\3\2\2\2\u0213\u0214\7\"\2\2\u0214\u0215\7.\2\2\u0215\u0216\5\u0084C\2"+
		"\u0216\u0217\7/\2\2\u0217\u0081\3\2\2\2\u0218\u0219\7#\2\2\u0219\u021a"+
		"\7.\2\2\u021a\u021f\5\u0084C\2\u021b\u021c\7\64\2\2\u021c\u021e\5\u0084"+
		"C\2\u021d\u021b\3\2\2\2\u021e\u0221\3\2\2\2\u021f\u021d\3\2\2\2\u021f"+
		"\u0220\3\2\2\2\u0220\u0222\3\2\2\2\u0221\u021f\3\2\2\2\u0222\u0223\7/"+
		"\2\2\u0223\u0083\3\2\2\2\u0224\u0228\5\u00a6T\2\u0225\u0228\5z>\2\u0226"+
		"\u0228\5\u0088E\2\u0227\u0224\3\2\2\2\u0227\u0225\3\2\2\2\u0227\u0226"+
		"\3\2\2\2\u0228\u0085\3\2\2\2\u0229\u022a\7$\2\2\u022a\u022b\7.\2\2\u022b"+
		"\u022c\5j\66\2\u022c\u022d\7\64\2\2\u022d\u022e\5\u00a6T\2\u022e\u022f"+
		"\7/\2\2\u022f\u0087\3\2\2\2\u0230\u0231\5\u0096L\2\u0231\u0089\3\2\2\2"+
		"\u0232\u0235\5\u008cG\2\u0233\u0235\5\u008eH\2\u0234\u0232\3\2\2\2\u0234"+
		"\u0233\3\2\2\2\u0235\u008b\3\2\2\2\u0236\u0237\7\36\2\2\u0237\u0238\7"+
		".\2\2\u0238\u0239\5T+\2\u0239\u023a\7/\2\2\u023a\u008d\3\2\2\2\u023b\u023c"+
		"\7\37\2\2\u023c\u023d\7.\2\2\u023d\u023e\5T+\2\u023e\u023f\7/\2\2\u023f"+
		"\u008f\3\2\2\2\u0240\u0241\7\6\2\2\u0241\u0242\7.\2\2\u0242\u0243\5\u0096"+
		"L\2\u0243\u0244\7\64\2\2\u0244\u0245\5\u0098M\2\u0245\u0246\7/\2\2\u0246"+
		"\u0091\3\2\2\2\u0247\u0248\7\4\2\2\u0248\u0249\7.\2\2\u0249\u024a\5\u0096"+
		"L\2\u024a\u024b\7\64\2\2\u024b\u024e\5j\66\2\u024c\u024d\7\64\2\2\u024d"+
		"\u024f\5\u00a6T\2\u024e\u024c\3\2\2\2\u024e\u024f\3\2\2\2\u024f\u0252"+
		"\3\2\2\2\u0250\u0251\7\64\2\2\u0251\u0253\5\u00aeX\2\u0252\u0250\3\2\2"+
		"\2\u0252\u0253\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u0255\7/\2\2\u0255\u0093"+
		"\3\2\2\2\u0256\u0257\7\5\2\2\u0257\u0258\7.\2\2\u0258\u0259\5j\66\2\u0259"+
		"\u025a\7/\2\2\u025a\u0095\3\2\2\2\u025b\u0260\5\u0098M\2\u025c\u025d\7"+
		"\65\2\2\u025d\u025f\5\u0098M\2\u025e\u025c\3\2\2\2\u025f\u0262\3\2\2\2"+
		"\u0260\u025e\3\2\2\2\u0260\u0261\3\2\2\2\u0261\u0097\3\2\2\2\u0262\u0260"+
		"\3\2\2\2\u0263\u0266\7\66\2\2\u0264\u0266\5\u009aN\2\u0265\u0263\3\2\2"+
		"\2\u0265\u0264\3\2\2\2\u0266\u0099\3\2\2\2\u0267\u0268\7\67\2\2\u0268"+
		"\u0269\7N\2\2\u0269\u026a\7O\2\2\u026a\u009b\3\2\2\2\u026b\u0274\5\u00ae"+
		"X\2\u026c\u0274\5\u00b2Z\2\u026d\u0274\5\u00b4[\2\u026e\u0274\5\u00b0"+
		"Y\2\u026f\u0274\5\u00b6\\\2\u0270\u0274\5\u00b8]\2\u0271\u0274\5\u00a6"+
		"T\2\u0272\u0274\5\u009eP\2\u0273\u026b\3\2\2\2\u0273\u026c\3\2\2\2\u0273"+
		"\u026d\3\2\2\2\u0273\u026e\3\2\2\2\u0273\u026f\3\2\2\2\u0273\u0270\3\2"+
		"\2\2\u0273\u0271\3\2\2\2\u0273\u0272\3\2\2\2\u0274\u009d\3\2\2\2\u0275"+
		"\u0276\78\2\2\u0276\u027b\5\u00a0Q\2\u0277\u0278\7\64\2\2\u0278\u027a"+
		"\5\u00a0Q\2\u0279\u0277\3\2\2\2\u027a\u027d\3\2\2\2\u027b\u0279\3\2\2"+
		"\2\u027b\u027c\3\2\2\2\u027c\u027e\3\2\2\2\u027d\u027b\3\2\2\2\u027e\u027f"+
		"\7/\2\2\u027f\u009f\3\2\2\2\u0280\u0283\5\u00a2R\2\u0281\u0283\5\u00a4"+
		"S\2\u0282\u0280\3\2\2\2\u0282\u0281\3\2\2\2\u0283\u00a1\3\2\2\2\u0284"+
		"\u0285\79\2\2\u0285\u00a3\3\2\2\2\u0286\u0287\7:\2\2\u0287\u00a5\3\2\2"+
		"\2\u0288\u028d\7B\2\2\u0289\u028c\5\u00a8U\2\u028a\u028c\5\u00aaV\2\u028b"+
		"\u0289\3\2\2\2\u028b\u028a\3\2\2\2\u028c\u028f\3\2\2\2\u028d\u028b\3\2"+
		"\2\2\u028d\u028e\3\2\2\2\u028e\u0290\3\2\2\2\u028f\u028d\3\2\2\2\u0290"+
		"\u0291\7M\2\2\u0291\u00a7\3\2\2\2\u0292\u029b\7E\2\2\u0293\u029b\7K\2"+
		"\2\u0294\u029b\7H\2\2\u0295\u029b\7G\2\2\u0296\u029b\7I\2\2\u0297\u029b"+
		"\7J\2\2\u0298\u029b\7F\2\2\u0299\u029b\7D\2\2\u029a\u0292\3\2\2\2\u029a"+
		"\u0293\3\2\2\2\u029a\u0294\3\2\2\2\u029a\u0295\3\2\2\2\u029a\u0296\3\2"+
		"\2\2\u029a\u0297\3\2\2\2\u029a\u0298\3\2\2\2\u029a\u0299\3\2\2\2\u029b"+
		"\u00a9\3\2\2\2\u029c\u029d\7L\2\2\u029d\u00ab\3\2\2\2\u029e\u029f\7\17"+
		"\2\2\u029f\u00ad\3\2\2\2\u02a0\u02a1\7\3\2\2\u02a1\u00af\3\2\2\2\u02a2"+
		"\u02a3\7;\2\2\u02a3\u00b1\3\2\2\2\u02a4\u02a5\7<\2\2\u02a5\u00b3\3\2\2"+
		"\2\u02a6\u02a7\7=\2\2\u02a7\u00b5\3\2\2\2\u02a8\u02ab\7@\2\2\u02a9\u02ab"+
		"\7A\2\2\u02aa\u02a8\3\2\2\2\u02aa\u02a9\3\2\2\2\u02ab\u00b7\3\2\2\2\u02ac"+
		"\u02af\7>\2\2\u02ad\u02af\7?\2\2\u02ae\u02ac\3\2\2\2\u02ae\u02ad\3\2\2"+
		"\2\u02af\u00b9\3\2\2\2>\u00c0\u00c4\u00c7\u00ca\u00cd\u00d0\u00d5\u00d9"+
		"\u00e3\u00e6\u00f0\u00f5\u00fa\u0106\u0111\u0117\u0126\u0129\u012c\u012f"+
		"\u0138\u013c\u013f\u0142\u0145\u014c\u0159\u0174\u017e\u0183\u0187\u018f"+
		"\u0193\u01a1\u01a9\u01ad\u01b3\u01c0\u01ca\u01d9\u01dd\u01e5\u01e9\u01f1"+
		"\u0207\u021f\u0227\u0234\u024e\u0252\u0260\u0265\u0273\u027b\u0282\u028b"+
		"\u028d\u029a\u02aa\u02ae";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}