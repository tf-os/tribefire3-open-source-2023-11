// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
// 
// This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License along with this library; See http://www.gnu.org/licenses/.
// ============================================================================
package com.braintribe.model.processing.query.parser.impl.listener;

import java.util.ArrayList;
import java.util.List;

import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.AscendingOrderByDirectionContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.DescendingOrderByDirectionContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.OrderByContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.OrderByExpressionContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.OrderBySingleContext;
import com.braintribe.model.processing.query.parser.impl.context.ObjectCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.OrderingCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.OrderingDirectionCustomContext;
import com.braintribe.model.processing.query.parser.impl.context.ValueCustomContext;
import com.braintribe.model.query.OrderingDirection;

public abstract class GmqlOrderByParserListener extends GmqlPaginationParserListener {

	@Override
	public void exitAscendingOrderByDirection(AscendingOrderByDirectionContext ctx) {
		setValue(ctx, new OrderingDirectionCustomContext(OrderingDirection.ascending));
	}

	@Override
	public void exitDescendingOrderByDirection(DescendingOrderByDirectionContext ctx) {
		setValue(ctx, new OrderingDirectionCustomContext(OrderingDirection.descending));
	}

	@Override
	public void exitOrderByExpression(OrderByExpressionContext ctx) {
		propagateChildResult(ctx);
	}

	@Override
	public void exitOrderBySingle(OrderBySingleContext ctx) {
		Object orderBy = ((ValueCustomContext<?>) takeValue(ctx.orderByExpression()).cast()).getReturnValue();
		OrderingDirection direction = OrderingDirection.ascending;
		if (ctx.orderByDirection() != null) {
			direction = ((OrderingDirectionCustomContext) takeValue(ctx.orderByDirection()).cast()).getReturnValue();
		}

		setValue(ctx, new ObjectCustomContext($.singleOrderBy(orderBy, direction)));
	}

	@Override
	public void exitOrderBy(OrderByContext ctx) {
		List<Object> orderByList = new ArrayList<Object>();
		List<OrderBySingleContext> orderBySingleList = ctx.orderBySingle();
		while (!orderBySingleList.isEmpty()) {
			Object orderBy = ((ObjectCustomContext) takeValue(orderBySingleList.remove(0)).cast()).getReturnValue();
			orderByList.add(orderBy);
		}

		setValue(ctx, new OrderingCustomContext($.orderBy(orderByList)));
	}
}
