// ============================================================================
// Copyright BRAINTRIBE TECHNOLOGY GMBH, Austria, 2002-2022
// 
// This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License along with this library; See http://www.gnu.org/licenses/.
// ============================================================================
package com.braintribe.model.processing.query.parser.impl.listener;

import java.util.List;

import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.AliasContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.EscapedIdentifierContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.GenericIdentifierContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.IdentifierContext;
import com.braintribe.model.processing.query.parser.impl.autogenerated.GmqlParser.KeyWordIdentifierContext;
import com.braintribe.model.processing.query.parser.impl.context.basetype.DefaultCustomContext;

public abstract class GmqlIdentifierParserListener extends GmqlBooleanConditionParserListener {

	@Override
	public void exitIdentifier(IdentifierContext ctx) {
		List<GenericIdentifierContext> generalIdentifierList = ctx.genericIdentifier();
		StringBuilder stringBuilder = new StringBuilder();
		int counter = 0;
		while (!generalIdentifierList.isEmpty()) {
			if (counter > 0) {
				stringBuilder.append(".");
			}
			DefaultCustomContext currentContext = takeValue(generalIdentifierList.remove(0)).cast();
			stringBuilder.append(currentContext.getReturnValue());
			counter++;
		}
		setValue(ctx, new DefaultCustomContext(stringBuilder.toString()));
	}

	@Override
	public void exitEscapedIdentifier(EscapedIdentifierContext ctx) {
		setValue(ctx, new DefaultCustomContext(ctx.KeyWord().toString()));
	}

	@Override
	public void exitKeyWordIdentifier(KeyWordIdentifierContext ctx) {
		setValue(ctx, takeValue(ctx.escapedIdentifier()));
	}

	@Override
	public void exitAlias(AliasContext ctx) {
		propagateChildResult(ctx);
	}

}
