package com.braintribe.devrock.mc.core.cycles;

import java.io.File;

import org.junit.Assert;

import com.braintribe.devrock.mc.api.resolver.CompiledArtifactResolver;
import com.braintribe.devrock.mc.core.wirings.resolver.contract.ArtifactDataResolverContract;
import com.braintribe.gm.model.reason.Maybe;
import com.braintribe.model.artifact.compiled.CompiledArtifact;
import com.braintribe.model.artifact.compiled.CompiledArtifactIdentification;

public class CycleViaParentTest extends AbstractCycleTest {

	
	@Override
	protected File archiveContentDirectory() {
		return new File( input, "cycleViaParent");
	}

	@Override
	protected void runTest(ArtifactDataResolverContract contract) {	
		boolean exceptionThrown = false;
		// pom compiler test
		try {
			CompiledArtifactResolver compiledArtifactResolver = contract.redirectAwareCompiledArtifactResolver();
			Maybe<CompiledArtifact> resolved = compiledArtifactResolver.resolve( CompiledArtifactIdentification.parse(TERMINAL));
			if (resolved.isUnsatisfied()) {
				System.out.println( "nothing's found");
			}
		}
		catch (Exception e) {
			exceptionThrown = true;
			System.out.println("as expected [" + e.getMessage() + "] thrown");
		}
		Assert.assertTrue("expected exception not thrown", exceptionThrown);
	}
	
}
